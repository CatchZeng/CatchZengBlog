<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CatchZeng Blog</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 13 Jun 2018 17:21:09 +0800</pubDate>
    <lastBuildDate>Wed, 13 Jun 2018 17:21:09 +0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>【Learning OpenCV with iOS】(一) Hello OpenCV</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;一概念介绍&quot;&gt;一、概念介绍&lt;/h2&gt;
&lt;h4 id=&quot;图像处理计算机视觉&quot;&gt;图像处理、计算机视觉&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86&quot;&gt;图像处理&lt;/a&gt;，用计算机对图像进行分析，以达到所需结果的技术。又称影像处理。图像处理一般指&lt;strong&gt;数字图像处理&lt;/strong&gt;。数字图像是指用工业相机、摄像机、扫描仪等设备经过拍摄得到的一个大的二维数组，该数组的元素称为&lt;strong&gt;像素&lt;/strong&gt;，其值称为&lt;strong&gt;灰度值&lt;/strong&gt;。图像处理技术一般包括图像压缩，增强和复原，匹配、描述和识别3个部分。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/计算机视觉&quot;&gt;计算机视觉&lt;/a&gt;是一门研究如何使&lt;a href=&quot;https://baike.baidu.com/item/%E6%9C%BA%E5%99%A8&quot;&gt;机器&lt;/a&gt;“看”的科学，更进一步的说，就是是指用摄影机和电脑代替人眼对目标进行识别、跟踪和测量等&lt;a href=&quot;https://baike.baidu.com/item/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89&quot;&gt;机器视觉&lt;/a&gt;，并进一步做图形处理，使电脑处理成为更适合人眼观察或传送给仪器检测的图像。作为一个科学学科，计算机视觉研究相关的理论和技术，试图建立能够从图像或者多维数据中获取‘信息’的&lt;a href=&quot;https://baike.baidu.com/item/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD&quot;&gt;人工智能&lt;/a&gt;系统。因为感知可以看作是从感官信号中提 取信息，所以计算机视觉也可以看作是研究如何使人工系统从图像或多维数据中“感知”的科学。&lt;/p&gt;

&lt;p&gt;图像处理与计算机视觉区别：
图像处理侧重于对图像的“处理”（如：增强，还原，去燥，分割等）。
计算机视觉则重在使用计算机来模拟人的视觉，&lt;strong&gt;模拟&lt;/strong&gt;才是计算机视觉的目的。&lt;/p&gt;

&lt;h4 id=&quot;opencv&quot;&gt;OpenCV&lt;/h4&gt;

&lt;p&gt;OpenCV（Open Source Computer Vision Library）于1999年由&lt;a href=&quot;https://baike.baidu.com/item/Intel&quot;&gt;Intel&lt;/a&gt;建立，如今由Willow Garage提供支持。
OpenCV是一个基于BSD许可（开源）发行的跨平台计算机视觉库，可以运行在&lt;a href=&quot;https://baike.baidu.com/item/Linux&quot;&gt;Linux&lt;/a&gt;、&lt;a href=&quot;https://baike.baidu.com/item/Windows&quot;&gt;Windows&lt;/a&gt;和&lt;a href=&quot;https://baike.baidu.com/item/Mac%20OS&quot;&gt;Mac OS&lt;/a&gt;操作系统上。它轻量级而且高效——由一系列 C 函数和少量 C++ 类构成，同时提供了Python、Ruby、MATLAB等语言的接口，实现了图像处理和计算机视觉方面的很多通用算法。OpenCV覆盖了计算机视觉的许多领域，如产品检测、信息安全、立体视觉和机器人、医学成像等。因为计算机视觉和机器学习关系密切，所以OpenCV还提供了MLL（Machine Learning Library）机器学习库。&lt;/p&gt;

&lt;p&gt;常用链接：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://opencv.org&quot;&gt;OpenCV官方主页&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/opencv/opencv&quot;&gt;OpenCV github主页&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.opencv.org/3.1.0/d3/dc9/tutorial_table_of_content_ios.html&quot;&gt;OpenCV iOS tutorials&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;二环境搭建&quot;&gt;二、环境搭建&lt;/h2&gt;

&lt;p&gt;“工欲善其事必先利其器”，接下来我们先搭建一下开发环境，借此了解下OpenCV的基本架构。&lt;/p&gt;

&lt;h6 id=&quot;1创建项目&quot;&gt;1.创建项目&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-d42b8064456f791a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;创建项目&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注:这里以Objective-C作为语言是因为OpenCV接口为C++，使用Objective-C较好与其交互。&lt;/p&gt;

&lt;h5 id=&quot;2加入opencv2framework&quot;&gt;2.加入opencv2.framework&lt;/h5&gt;

&lt;p&gt;前往https://opencv.org/releases.html下载iOS pack。
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-101047bd286e5e0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;iOS pack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;将opencv2.framework加入项目
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-e0cbecf02e7fe2d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;加入项目&quot; /&gt;&lt;/p&gt;

&lt;p&gt;将OpenCV所需的依赖库添加到项目中&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CoreGraphics.framework&lt;/li&gt;
  &lt;li&gt;Foundation.framework&lt;/li&gt;
  &lt;li&gt;UIKit.framework&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果要使用摄像头做视频处理，还需要添加以下依赖库：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CoreVideo.framework&lt;/li&gt;
  &lt;li&gt;CoreMedia.framework&lt;/li&gt;
  &lt;li&gt;AssetsLibrary.framework&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-086ef4bf0182bf81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;framework&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;3say-hello&quot;&gt;3.Say Hello&lt;/h5&gt;

&lt;p&gt;新建OpenCV.h &amp;amp; OpenCV.mm，并添加以下代码&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;注：因为OpenCV是C++写的，所以引入项目中的文件需要使用Object-C++的兼容方式来写，具体的做法就是将需要导入OpenCV头文件的m文件改成mm文件&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//
//  OpenCV.h
//  LearningOpenCV
//
//  Created by CatchZeng on 2018/6/12.
//  Copyright © 2018年 catch. All rights reserved.
//
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
#import &amp;lt;UIKit/UIKit.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OpenCV&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSObject&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//
//  OpenCV.m
//  LearningOpenCV
//
//  Created by CatchZeng on 2018/6/12.
//  Copyright © 2018年 catch. All rights reserved.
//
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//!!!opencv的头文件引入必须在其他头文件之前
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;opencv2/opencv.hpp&amp;gt;
#import &amp;lt;opencv2/imgproc/types_c.h&amp;gt;
#import &amp;lt;opencv2/imgcodecs/ios.h&amp;gt;
#import &amp;lt;opencv2/core/core_c.h&amp;gt;
#import &quot;OpenCV.h&quot;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OpenCV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OpenCV&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UIImageToMat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grayMat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cvtColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grayMat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CV_BGR2GRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MatToUIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grayMat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;新建视图控制器SayHelloViewController&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class SayHelloViewController: UIViewController {
    
    @IBOutlet weak var imageView: UIImageView!
    @IBOutlet weak var grayImageView: UIImageView!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        grayImageView.image = OpenCV.gray(#imageLiteral(resourceName: &quot;sayHello&quot;))
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;效果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-afb139a09ec5365d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;效果&quot; /&gt;&lt;/p&gt;

&lt;p&gt;源码地址: https://github.com/CatchZeng/LearningOpenCV&lt;/p&gt;

&lt;h2 id=&quot;三opencv基础架构&quot;&gt;三、OpenCV基础架构&lt;/h2&gt;

&lt;p&gt;OpenCV包含的内容较多，在学习之前先了解下它的整体模块架构，再选择自己感兴趣的部分重点学习，这样学起来比较得心应手。&lt;/p&gt;

&lt;p&gt;鉴于此，下面我们一起来看下OpenCV的整体模块架构。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-18342122cfdc0d61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;OpenCV&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从上图可看到OpenCV的所有模块：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;【calib3d】Calibration(校准)和3D这两个词的组合缩写。这个模块主要是相机校准和三维重建相关的内容，包括基本的多视角几何算法、单个立体摄像头标定，物体姿态估计，立体相似性算法，3D信息的重建等。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;【core】核心功能模块，包含如下内容：
    &lt;ul&gt;
      &lt;li&gt;OpenCV基本数据结构&lt;/li&gt;
      &lt;li&gt;动态数据结构&lt;/li&gt;
      &lt;li&gt;绘图函数&lt;/li&gt;
      &lt;li&gt;数组操作相关函数&lt;/li&gt;
      &lt;li&gt;辅助功能与系统函数和宏&lt;/li&gt;
      &lt;li&gt;与OpenGL的互操作&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;【feature2d】2D功能框架。包含如下内容：
    &lt;ul&gt;
      &lt;li&gt;特征检测和描述&lt;/li&gt;
      &lt;li&gt;特征检测器(Fearure Detectors) 通用接口&lt;/li&gt;
      &lt;li&gt;描述符提取器(Description Extractors) 通用接口&lt;/li&gt;
      &lt;li&gt;描述符匹配器(Description Eatchers) 通用接口&lt;/li&gt;
      &lt;li&gt;通用描述符(Generic Description)匹配器通用接口&lt;/li&gt;
      &lt;li&gt;关键点绘制函数和匹配功能绘制函数&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;【imgproc】Image 和Process 这两个单词的缩写组合，图像处理模块。包含如下内容：
    &lt;ul&gt;
      &lt;li&gt;线性和非线性的图像滤波&lt;/li&gt;
      &lt;li&gt;图像的几何变换&lt;/li&gt;
      &lt;li&gt;其他的图像变换&lt;/li&gt;
      &lt;li&gt;直方图相关&lt;/li&gt;
      &lt;li&gt;结构分析和形状描述&lt;/li&gt;
      &lt;li&gt;运动分析和对象跟踪&lt;/li&gt;
      &lt;li&gt;特征检测&lt;/li&gt;
      &lt;li&gt;目标检测等内容&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;【flann】Fast Library For Approximate Nearest Neighbors，高维的近似近邻快速搜索算法库，包含以下两个部分：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;快速近似最近邻搜索&lt;/li&gt;
      &lt;li&gt;聚类&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;【highgui】高层GUI图形用户界面，包含媒体的输入输出、视频捕捉、图像和视频的解码编码、图形交互界面的接口等内容。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;【ml】Machine Learning，机器学习模块， 基本上是统计模型和分类算法，包含如下内容：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;统计模型 （Statistical Models）&lt;/li&gt;
      &lt;li&gt;一般贝叶斯分类器 （Normal Bayes Classifier）&lt;/li&gt;
      &lt;li&gt;K-近邻 （K-NearestNeighbors）&lt;/li&gt;
      &lt;li&gt;支持向量机 （Support Vector Machines）&lt;/li&gt;
      &lt;li&gt;决策树 （Decision Trees）&lt;/li&gt;
      &lt;li&gt;提升（Boosting）&lt;/li&gt;
      &lt;li&gt;梯度提高树（Gradient Boosted Trees）&lt;/li&gt;
      &lt;li&gt;随机树 （Random Trees）&lt;/li&gt;
      &lt;li&gt;超随机树 （Extremely randomized trees）&lt;/li&gt;
      &lt;li&gt;期望最大化 （Expectation Maximization）&lt;/li&gt;
      &lt;li&gt;神经网络 （Neural Networks）&lt;/li&gt;
      &lt;li&gt;MLData&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;【objdetect】目标检测模块，包含Cascade Classification（级联分类）和Latent SVM这两个部分。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;【photo】Computational Photography，包含图像修复和图像去噪两部分。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;【stitching】images stitching，图像拼接模块，包含如下部分：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;拼接流水线&lt;/li&gt;
      &lt;li&gt;特点寻找和匹配图像&lt;/li&gt;
      &lt;li&gt;估计旋转&lt;/li&gt;
      &lt;li&gt;自动校准&lt;/li&gt;
      &lt;li&gt;图片歪斜&lt;/li&gt;
      &lt;li&gt;接缝估测&lt;/li&gt;
      &lt;li&gt;曝光补偿&lt;/li&gt;
      &lt;li&gt;图片混合&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;【video】视频分析组件，该模块包括运动估计，背景分离，对象跟踪等视频处理相关内容。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;【Videostab】Video stabilization，视频稳定相关的组件，官方文档中没有多作介绍，不管它了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;看到到这里，相信大家已经对OpenCV的模块架构设计有了一定的认识，OpenCV其实就是这么多模块作为代码容器组合起来的一个SDK，了解这些可以更快的学习OpenCV了！&lt;/p&gt;

&lt;h2 id=&quot;四小结&quot;&gt;四、小结&lt;/h2&gt;

&lt;p&gt;本文从概念到环境搭建再到基本架构的角度介绍了OpenCV，让读者有一个宏观的认识。下一节开始，我将以原理+例子的形式一步步介绍OpenCV的各个模块。&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Jun 2018 17:38:27 +0800</pubDate>
        <link>http://localhost:4000/2018/06/12/Learning-OpenCV-with-iOS-(%E4%B8%80)-Hello-OpenCV/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/12/Learning-OpenCV-with-iOS-(%E4%B8%80)-Hello-OpenCV/</guid>
        
        <category>OpenCV</category>
        
        
      </item>
    
      <item>
        <title>聊聊设计模式原则（三） -- 依赖倒置原则</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;目录&quot;&gt;目录&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://catchzeng.com/2017/02/19/%E8%81%8A%E8%81%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99-%E4%B8%80-%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/&quot;&gt;聊聊设计模式原则（一） – 单一职责原则&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://catchzeng.com/2017/05/04/%E8%81%8A%E8%81%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99-%E4%BA%8C-%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/&quot;&gt;聊聊设计模式原则（二） – 接口隔离原则&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://catchzeng.com/2018/06/01/%E8%81%8A%E8%81%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99-%E4%B8%89-%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/&quot;&gt;聊聊设计模式原则（三） – 依赖倒置原则&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;依赖倒置原则dip-dependence-inversion-principle&quot;&gt;依赖倒置原则（DIP ：Dependence Inversion Principle）&lt;/h1&gt;

&lt;h2 id=&quot;定义&quot;&gt;定义&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;高层模块不应该依赖低层模块，二者都应该依赖其抽象；&lt;/li&gt;
  &lt;li&gt;抽象不应该依赖细节；&lt;/li&gt;
  &lt;li&gt;细节应该依赖抽象。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;也就是说高层模块低层模块细节都应该依赖抽象&quot;&gt;也就是说高层模块，低层模块，细节都应该依赖抽象&lt;/h5&gt;

&lt;h2 id=&quot;由来&quot;&gt;由来&lt;/h2&gt;

&lt;p&gt;类A直接依赖类B，假如要将类B改为类C，则必须通过修改类A的代码来达成。
类A一般是高层模块，负责复杂的业务逻辑。
类B和类C是低层模块，负责基本的原子操作。
修改类A，会给程序带来不必要的风险。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-10ce9ac0558a6d77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;由来&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;解决方案&quot;&gt;解决方案&lt;/h2&gt;
&lt;p&gt;将类A修改为依赖接口I，类B和类C各自实现接口I，类A通过接口I间接与类B或者类C发生联系，则会大大降低修改类A的几率。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-9826ba438ef18ed9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;解决方案&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;优点&quot;&gt;优点&lt;/h2&gt;
&lt;p&gt;依赖倒置原则可以减少类间的耦合性，提高系统的稳定，降低并行开发引起的风险，提高代码的可读性和可维护性。&lt;/p&gt;

&lt;h2 id=&quot;思考&quot;&gt;思考&lt;/h2&gt;

&lt;h4 id=&quot;1依赖倒置原则跟面向接口编程是什么关系&quot;&gt;1.依赖倒置原则跟面向接口编程是什么关系？&lt;/h4&gt;
&lt;p&gt;依赖倒置原则的核心思想就是面向接口编程&lt;/p&gt;

&lt;h4 id=&quot;2什么是细节什么是抽象他们有什么区别&quot;&gt;2.什么是细节？什么是抽象？他们有什么区别？&lt;/h4&gt;

&lt;p&gt;所谓细节就是较为具体的东西，比如具体的类，就如上面的类B与类C，有具体的实现。&lt;/p&gt;

&lt;p&gt;所谓抽象就是具有&lt;strong&gt;契约性、共同性、规范性的表达&lt;/strong&gt;，比如上面的接口I。它表达了一种契约–你需要实现funcA和funcB才能被当成I来对待。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;相对于细节的多变性，抽象的东西要稳定的多。&lt;/strong&gt;
以上面的类ABC作为例子，B、C类都属于细节，如果A直接依赖B或者C，那么B或C的改动有可能就会影响到A的稳定性。同样的，A对B或者C的操作也有可能影响到B或C的稳定性。这些互相影响，其实来源于直接的依赖，导致B或C的细节暴露过多。而面对抽象的接口I，A只能操作funA和funcB，从而避免了不必要的暴露和风险。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;以抽象为基础搭建起来的架构比以细节为基础搭建起来的架构要稳定的多。&lt;/strong&gt;
稳定性表现在规范性、契约性、易修改性、扩展性、可维护性等。&lt;/p&gt;

&lt;h2 id=&quot;来个栗子&quot;&gt;来个栗子&lt;/h2&gt;
&lt;p&gt;小明（程序员）接到小李（产品经理）的需求：
客户端开始的时候打个“开始”的log。
小明心想简单，一下子完成了代码&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Logger {
    func log(_ text: String) {
        print(text)
    }
}

public class Client {
    public var logger: Logger?

    func start() {
        logger?.log(&quot;开始&quot;)
    }
}

let client = Client()
let logger = Logger()
client.logger = logger

client.start()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这个时候，小李突然说，要把log变成存到文件的形式。
小明想了下，有点不情愿地改了代码（因为要改好几个地方）&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class FileLogger { //修改1
    func log(_ text: String) {
        writeTofile(text) //修改2
    }
    
    func start() {
        print(&quot;开始&quot;)
    }
}

public class Client {
    public var logger: FileLogger? //修改3

    func start() {
        logger.start()
        logger?.log(&quot;开始&quot;)
    }
}

let client = Client()
let logger = FileLogger() //修改4
client.logger = logger

client.start()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;小李想了想现在是互联网时代，还是直接将log信息传到网络上吧。
这个时候，小明非常不情愿地说了声“你不早说”，但还是改了代码(又是好几处改动)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class WebLogger { //修改1
    func log(_ text: String) {
        writeToWeb(text) //修改2
    }
}

public class Client {
    public var logger: WebLogger? //修改3

    func start() {
        logger?.log(&quot;开始&quot;)
    }
}

let client = Client()
let logger = WebLogger() //修改4
client.logger = logger

client.start()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这时，小明的老大小华看到小明不开心，便过来帮忙，改了下代码&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;protocol Logger {
    func log(_ text: String)
}

public class WebLogger: Logger {
    func log(_ text: String) {
        writeToWeb(text) 
    }
}

public class FileLogger: Logger {
    func log(_ text: String) {
        writeTofile(text) 
    }
}

public class PrintLogger: Logger {
    func log(_ text: String) {
        print(text)
    }
}

public class Client {
    public var logger: Logger? 

    func start() {
        logger?.log(&quot;开始&quot;)
    }
}

let client = Client()
let logger = WebLogger()
client.logger = logger

client.start()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;小华对小明说，现在不用怕了，小李想什么样的log你改一下实现类就行了&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let logger = WebLogger() // PrintLogger()  FileLogger()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;小华的改动其实就是利用了依赖倒置原则，增强了易修改性、扩展性、可维护性等。
细心的朋友其实还发现了，在改成FileLogger的时候，Client多余地调用了FileLogger的start方法。这就是依赖细节，暴露细节，引起的问题。而使用抽象的接口就能较好地避免这类问题。&lt;/p&gt;

&lt;h2 id=&quot;注意点&quot;&gt;注意点&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;分清细节与抽象&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;虽然依赖倒置原则有很大的好处，但也不是所有的类都需要有抽象一个接口去对应，要视情况而定。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;变量的声明类型尽量是抽象类或接口&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意是尽量，而不是全部。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;尽量不要覆写基类的方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果基类是一个抽象类，而这个方法已经实现了，子类尽量不要覆写。类间依赖的是抽象，覆写了抽象方法，对依赖的稳定性会有一定的影响。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;继承要遵循里氏替换原则&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 01 Jun 2018 17:38:27 +0800</pubDate>
        <link>http://localhost:4000/2018/06/01/%E8%81%8A%E8%81%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99-%E4%B8%89-%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/01/%E8%81%8A%E8%81%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99-%E4%B8%89-%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/</guid>
        
        <category>设计模式</category>
        
        
      </item>
    
      <item>
        <title>团队需要一个私有npm</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;一前言&quot;&gt;一、前言&lt;/h2&gt;

&lt;p&gt;随着Team人员越来越多，项目间的代码复用显得越来越重要。比如：常用的框架/库、工具方法等。另外团队内部的代码模块化，也需要有一个机制来管理。目前npm是前端代码的包管理(类似iOS 的cocoapods、android的gradle)首选。于是，我尝试使用私有npm搭建一套前端仓库，用以在公司内部托管公共代码以及将代码模块化。&lt;/p&gt;

&lt;h2 id=&quot;二选型&quot;&gt;二、选型&lt;/h2&gt;

&lt;h3 id=&quot;npm私有git仓库&quot;&gt;npm+私有git仓库&lt;/h3&gt;

&lt;h5 id=&quot;制作使用&quot;&gt;制作&amp;amp;使用&lt;/h5&gt;

&lt;p&gt;1.新建私有git仓库（如：https://gitlab.com/mygroup/myproject.git)，用group建立项目较方便代码的管理，也能作为npm的scope。&lt;/p&gt;

&lt;p&gt;2.clone仓库&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://gitlab.com/mygroup/myproject.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3.npm  init&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm init --scope=mygroup
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;4.push到仓库即可&lt;/p&gt;

&lt;p&gt;5.安装&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;@mygroup/myproject&quot;: &quot;https://gitlab.com/mygroup/myproject.git&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;6.使用&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var myproject = require('@mygroup/myproject');
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;优缺点&quot;&gt;优缺点&lt;/h5&gt;

&lt;p&gt;缺点：不能使用npm直接update&lt;/p&gt;

&lt;p&gt;优点：简单直接&lt;/p&gt;

&lt;h3 id=&quot;npmjs官方托管&quot;&gt;npmjs官方托管&lt;/h3&gt;

&lt;h5 id=&quot;制作使用-1&quot;&gt;制作&amp;amp;使用&lt;/h5&gt;

&lt;p&gt;参考官方教程&lt;a href=&quot;https://docs.npmjs.com/private-modules/intro&quot;&gt;https://docs.npmjs.com/private-modules/intro&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;优缺点-1&quot;&gt;优缺点&lt;/h5&gt;

&lt;p&gt;缺点：需要支付每个月7刀； 不能使用npm直接update;&lt;/p&gt;

&lt;p&gt;优点：简单直接；开源&amp;amp;闭源项目同一托管&lt;/p&gt;

&lt;h3 id=&quot;使用verdaccio自己托管&quot;&gt;使用verdaccio自己托管&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-95672e464e73e902.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;verdaccio&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;制作使用-2&quot;&gt;制作&amp;amp;使用&lt;/h5&gt;

&lt;p&gt;1.安装&lt;a href=&quot;https://www.verdaccio.org&quot;&gt;verdaccio&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install --global verdaccio 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.启动服务&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;verdaccio
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3.团队人员都绑定registry&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm set registry http://verdaccio托管的ip地址:4873
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;4.增加用户&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm adduser --registry http://verdaccio托管的ip地址:4873
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;5.发布私有库&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm publish --registry http://verdaccio托管的ip地址:4873
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;6.安装私有库&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i 私有库名称
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;7.使用私有库&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var 私有库名称 = require('私有库名称');
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;优缺点-2&quot;&gt;优缺点&lt;/h5&gt;

&lt;p&gt;优点：免费；本地速度快&amp;amp;带公有库缓存；支持yarn&lt;/p&gt;

&lt;p&gt;缺点：需要自己托管维护&lt;/p&gt;

&lt;h5 id=&quot;注为了切换源方便可以使用nrm&quot;&gt;注：为了切换源方便，可以使用nrm&lt;/h5&gt;

&lt;p&gt;安装&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install -g nrm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;增加私有源&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nrm add 私有源名称 http://verdaccio托管的ip地址:4873
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;列出所有源（*表示现在正在使用的源）&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ nrm ls

* npm ---- https://registry.npmjs.org/
  cnpm --- http://r.cnpmjs.org/
  eu ----- http://registry.npmjs.eu/
  au ----- http://registry.npmjs.org.au/
  sl ----- http://npm.strongloop.com/
  nj ----- https://registry.nodejitsu.com/
私有源名称  http://verdaccio托管的ip地址:4873
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;切换源&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ nrm use 自定义私有库名称
   Registry has been set to: http://verdaccio托管的ip地址:4873
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;三总结&quot;&gt;三、总结&lt;/h2&gt;

&lt;p&gt;基于上面选型中的分析，我最终选择了verdaccio。私有npm的作用，不单单是作为包管理器，更是项目模块化的一种“约束”。这样一来，你就不会往一个模块随意加入本该属于另外一个模块的代码，也就是会逼迫你去做解耦。另外有了私有npm，每个模块更“独立化”，能“专心”为其加入单元测试&amp;amp;持续集成等实践，使每个模块的质量能得到较好的保障，提高整体软件的质量。&lt;/p&gt;
</description>
        <pubDate>Tue, 22 May 2018 16:38:27 +0800</pubDate>
        <link>http://localhost:4000/2018/05/22/%E5%9B%A2%E9%98%9F%E9%9C%80%E8%A6%81%E4%B8%80%E4%B8%AA%E7%A7%81%E6%9C%89npm/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/05/22/%E5%9B%A2%E9%98%9F%E9%9C%80%E8%A6%81%E4%B8%80%E4%B8%AA%E7%A7%81%E6%9C%89npm/</guid>
        
        <category>JS</category>
        
        
      </item>
    
      <item>
        <title>开源一个npm包</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;一注册npm账号&quot;&gt;一、注册npm账号&lt;/h2&gt;
&lt;p&gt;前往&lt;a href=&quot;https://www.npmjs.com&quot;&gt;https://www.npmjs.com&lt;/a&gt;注册一个账号。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-839cdd17a84e490f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;npmjs&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;二制作npm包&quot;&gt;二、制作npm包&lt;/h2&gt;

&lt;h5 id=&quot;1建立一个仓库这里以cat-jsutils为例&quot;&gt;1.建立一个仓库，这里以cat-jsutils为例&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-9f41ef6e9827f5ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;cat-jsutils&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这里需要注意下名称&lt;/strong&gt;，因为如果被占用，无法使用npm install直接安装。
判断是否被占用，可使用npm search xxx来判断&lt;/p&gt;

&lt;p&gt;未占用&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cenghaihandeMacBook-Pro:cat-jsutils catchzeng&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm search cat-jsutils
No matches found &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cat-jsutils&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;已占用&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cenghaihandeMacBook-Pro:cat-jsutils catchzeng&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm search jsutils
NAME                      | DESCRIPTION          | AUTHOR          | DATE       | VERSION  | KEYWORDS
jsutils                   | Utilities &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;…       | &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sethyuan       | 2016-04-25 | 0.6.1    | util js javascript node.js node nodejs utils u
fwsp-jsutils              | JavaScript Utils -…  | &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;emadum &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cjus   | 2017-04-04 | 1.0.10   | flywheelsports javascript utils
@mreck/jsutils            | JavaScript…          | &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mreck          | 2018-04-14 | 2.0.0    |
sbiger-jsutil             | Javascript common…   | &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sbiger         | 2016-12-26 | 1.3.32   | javscript utilities ES6 ES5 js util
m-jsutils                 | js utils             | &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;limi58         | 2017-07-23 | 1.0.1    | utils
jsutilities               | Javascript common…   | &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;jcde           | 2016-07-08 | 1.0.6    |
jsutils2                  | &lt;span class=&quot;s2&quot;&gt;&quot;Various utility…    | =milesman34     | 2017-11-22 | 2.0.0    |
org.mineot.jsutil         | Javascript Util…     | =mineot         | 2018-01-26 | 0.0.5    | javascript js jsutil util i18next translation
h-jsutils                 | javascript utils     | =haven09        | 2018-01-11 | 1.0.0    | js javascript utils
jsutility                 | A collection of…     | =deepaksibar    | 2016-08-27 | 0.0.0    | css
jsutil                    | A utilities package… | =gm12306        | 2013-03-20 | 0.1.3    | util mixin extend
@ikyhdst/jsutils          | Utility files for…   | =ikyhdst        | 2018-01-17 | 0.0.1    |
rb-jsutils                |                      | =dhanna         | 2016-06-29 | 0.9.0    |
@moodxd/jsutil-openable   | JavaScript Utility…  | =moodxd         | 2017-03-08 | 1.0.3    |
@moodxd/jsutil-stickable  | JavaScript Utility…  | =moodxd         | 2017-03-08 | 1.0.3    |
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;2clone仓库到本地--cd到cat-jsutils执行npm-init&quot;&gt;2.Clone仓库到本地 &amp;amp; cd到cat-jsutils，执行npm init&lt;/h5&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cenghaihandeMacBook-Pro:Github catchzeng&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;cat-jsutils/
cenghaihandeMacBook-Pro:cat-jsutils catchzeng&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;help &lt;/span&gt;json&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;definitive documentation on these fields
and exactly what they &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;.

Use &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;npm install &amp;lt;pkg&amp;gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; afterwards to install a package and
save it as a dependency &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the package.json file.

Press ^C at any &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;to quit.
package name: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;cat-jsutils&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
version: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
description: js utils
entry point: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;index.js&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;test command&lt;/span&gt;:
git repository: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;https://github.com/CatchZeng/cat-jsutils&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
keywords: util utils js javascript node utility utilities
author: CatchZeng
license: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ISC&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; MIT
About to write to /Users/catchzeng/Documents/Code/Github/cat-jsutils/package.json:

&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;cat-jsutils&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;js utils&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;index.js&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;echo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Error: no test specified&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;amp;&amp;amp; exit 1&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;repository&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;git&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;git+https://github.com/CatchZeng/cat-jsutils.git&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;keywords&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;util&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;utils&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;js&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;javascript&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;utility&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;utilities&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;author&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;CatchZeng&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;license&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;MIT&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;bugs&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/CatchZeng/cat-jsutils/issues&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;homepage&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/CatchZeng/cat-jsutils#readme&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;3新建indexjs根据上一步的entry-point-indexjs指定组织代码结构这里以cat-jsutils为例&quot;&gt;3.新建index.js【根据上一步的entry point: (index.js)指定】，组织代码结构，这里以cat-jsutils为例&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-62d8a951fab55e27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;屏幕快照 2018-04-17 下午6.13.24.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//number.js&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'number'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isNaN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isFinite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;isNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//string.js&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'string'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;isString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;containsAny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;containsAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//index.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;utils&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;utils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./src/string'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;utils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./src/number'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;utils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;4在packagejson中指定版本号并提交代码到github上&quot;&gt;4.在package.json中指定版本号，并提交代码到github上&lt;/h5&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cat-jsutils&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;js utils&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;index.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;三发布npm包&quot;&gt;三、发布npm包&lt;/h2&gt;

&lt;p&gt;到项目跟目录下，执行publish命令&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cenghaihandeMacBook-Pro:cat-jsutils catchzeng&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm publish
+ cat-jsutils@1.0.1
cenghaihandeMacBook-Pro:cat-jsutils catchzeng&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;发布成功后就可以在&lt;a href=&quot;https://www.npmjs.com&quot;&gt;https://www.npmjs.com&lt;/a&gt;上看到自己的项目&lt;/p&gt;

&lt;h2 id=&quot;四更新版本&quot;&gt;四、更新版本&lt;/h2&gt;

&lt;p&gt;更新package.json中的版本号，并提交代码到github上，重新publish npm包即可&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cat-jsutils&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1.0.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;js utils&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;index.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cenghaihandeMacBook-Pro:cat-jsutils catchzeng$ npm publish
+ cat-jsutils@1.0.2
cenghaihandeMacBook-Pro:cat-jsutils catchzeng$
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;五变优雅&quot;&gt;五、变优雅&lt;/h2&gt;
&lt;p&gt;何为优雅，先看下&lt;a href=&quot;https://github.com/expressjs/express&quot;&gt;express&lt;/a&gt;这个仓库比我们自己的仓库优雅在哪里&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-8120f72e0a61b2fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;express&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1logo&quot;&gt;1.Logo&lt;/h2&gt;
&lt;p&gt;这么吗，我不是设计师，有美感的朋友自己设计一个吧，这里我随便做一个了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-b0f66c092e953a2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;logo&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2npm-version-badge&quot;&gt;2.npm version badge&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-3c47ea1f40e8cba8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;npm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;增加这个其实只要在README中增加&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;![NPM version]&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;https://img.shields.io/npm/v/仓库名.svg&lt;span class=&quot;o&quot;&gt;)](&lt;/span&gt;https://www.npmjs.com/package/仓库名&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;以cat-jsutils为例子&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;![NPM version]&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;https://img.shields.io/npm/v/cat-jsutils.svg&lt;span class=&quot;o&quot;&gt;)](&lt;/span&gt;https://www.npmjs.com/package/cat-jsutils&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;3ci状态&quot;&gt;3.CI状态&lt;/h2&gt;

&lt;p&gt;关于持续集成理论部分，可以看之前的文章&lt;a href=&quot;http://catchzeng.com/2017/02/10/持续集成-理论篇/&quot;&gt;持续集成 – 理论篇&lt;/a&gt;。一般开源项目会选用&lt;a href=&quot;https://travis-ci.org/expressjs/express&quot;&gt;travis-ci&lt;/a&gt;。
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-63489fca5a178c46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;CI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用github账号登录travis-ci，然后打开需要持续集成的项目
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-897d8acf28fd845b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;travis-ci&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在项目中增加.travis.yml文件，用于配置持续集成的构建步骤。这里以cat-jsutils为例，里面只执行了单元测试&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node_js&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;node_js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stable&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：cat-jsutils的测试使用的是mocha+chai+istanbul，详见package.json&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cat-jsutils&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;js utils&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;index.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mocha&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;coverage&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;istanbul cover _mocha -- -R spec --timeout 5000 --recursive&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;coverage:check&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;istanbul check-coverage&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;repository&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git+https://github.com/CatchZeng/cat-jsutils.git&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;keywords&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;util&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;utils&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;javascript&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;utility&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;utilities&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CatchZeng&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;MIT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;bugs&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/CatchZeng/cat-jsutils/issues&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;homepage&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/CatchZeng/cat-jsutils#readme&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;chai&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^4.1.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;istanbul&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^0.4.5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;mocha&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^5.1.0&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;提交.travis.yml后变会触发构建，可以到&lt;a href=&quot;https://travis-ci.org&quot;&gt;travis-ci&lt;/a&gt;查看构建过程。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-897d8acf28fd845b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;travis-ci&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-085417e661c59bf3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;屏幕快照 2018-04-17 下午8.12.34.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击构建成功的图标就会弹出地址
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-1354adebff4f109e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;屏幕快照 2018-04-17 下午8.15.35.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;将该地址放到README上即可。以cat-jsutils为例子&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;![travis ci]&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;https://api.travis-ci.org/CatchZeng/cat-jsutils.svg?branch&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;master&lt;span class=&quot;o&quot;&gt;)](&lt;/span&gt;https://travis-ci.org/CatchZeng/cat-jsutils&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;4测试覆盖率&quot;&gt;4.测试覆盖率&lt;/h2&gt;

&lt;p&gt;显示测试覆盖率，我们需要借助&lt;a href=&quot;https://coveralls.io&quot;&gt;coveralls&lt;/a&gt;。
同样的使用github账户登录coveralls，然后开启对应的项目
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-31e1ae29fd50d358.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;coveralls&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击details，查看repo_token并复制，后面会使用到。
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-7afdde72068ba510.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;屏幕快照 2018-04-17 下午8.23.38.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装coveralls&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i coveralls -D
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;安装travis&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install travis
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;执行encrypt，COVERALLS_TOKEN就是刚才复制的repo_token&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;travis encrypt &lt;span class=&quot;nv&quot;&gt;COVERALLS_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;JGOXXXXXXXXXXXXXqKVJ --add
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;执行之后会发现.travis.yml下多出env，这个环境变量能帮助我们将测试覆盖率安全上传到coveralls&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nHaHZZDNmW3Fx3YPvBEc2E0a0kjsVhKUssi4GpWYcFDiJe6ufHAVjukHnV4RQOlSgRgp1q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v9KJFeQbkcR9vSNQhtkjzHW&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//AbNGIOCZFyvmb3j/FH1hFxGqK129IC9tDHn1JeRSr5qSKK+TFTwINWQHCGAdA32PY+swuNT30UGrhBHtw3UaN8Hgu9xRH8g8UpqAMcGyX0rCnYCzPD2gYBEOo3zqEQvNvttu2YeSxvBXpU8doJuZLu7yvrRhvD3DGg3r/BWX7UDZtX16gZCdw3N9EnMWqgdaos7blE3eSKeHj89OHhiXeRSqHN7RKyUAp9dDmW1M63onsNvEpoho4ULCVTiVvX+Y25c+gZML3boeBlm3KOdwYKOCKhQLj/DIY5ojQd33jFBdBoouWW5ZG2cpfg8iq/Jyg2OoJFvJRjG04/T85a+l89wMnZKMDDl8zRgsnDhZho69EQmTz9WeBCvL2Bg87+n2Mg909InEw1D1PskGPkyD02zR7newOU+gJM2zK3pUYxt6O4EHUukoYL9XS14ogYIsrYFWqls0BHnTQXWKf+DQckL+H4+nZxdEPF6fEaebI8jgH9pgQiCHqMAKaQNsLApZRQ58DXLv78nZ/Sd/e/WmEgPfXZcrhTiLC8/yistVy3N5EKYHCjg6sB5RMO4BRNAsq0rnR3v1rA=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;加入cover脚本&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cover&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;istanbul cover --report lcov node_modules/mocha/bin/_mocha -- -R spec test/*.js&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;看下最后的.travis.yml文件和 package.json&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node_js&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;node_js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stable&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;after_script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cover&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;coverage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lcov&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node_modules&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;coveralls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;coveralls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nHaHZZDNmW3Fx3YPvBEc2E0a0kjsVhKUssi4GpWYcFDiJe6ufHAVjukHnV4RQOlSgRgp1q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v9KJFeQbkcR9vSNQhtkjzHW&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//AbNGIOCZFyvmb3j/FH1hFxGqK129IC9tDHn1JeRSr5qSKK+TFTwINWQHCGAdA32PY+swuNT30UGrhBHtw3UaN8Hgu9xRH8g8UpqAMcGyX0rCnYCzPD2gYBEOo3zqEQvNvttu2YeSxvBXpU8doJuZLu7yvrRhvD3DGg3r/BWX7UDZtX16gZCdw3N9EnMWqgdaos7blE3eSKeHj89OHhiXeRSqHN7RKyUAp9dDmW1M63onsNvEpoho4ULCVTiVvX+Y25c+gZML3boeBlm3KOdwYKOCKhQLj/DIY5ojQd33jFBdBoouWW5ZG2cpfg8iq/Jyg2OoJFvJRjG04/T85a+l89wMnZKMDDl8zRgsnDhZho69EQmTz9WeBCvL2Bg87+n2Mg909InEw1D1PskGPkyD02zR7newOU+gJM2zK3pUYxt6O4EHUukoYL9XS14ogYIsrYFWqls0BHnTQXWKf+DQckL+H4+nZxdEPF6fEaebI8jgH9pgQiCHqMAKaQNsLApZRQ58DXLv78nZ/Sd/e/WmEgPfXZcrhTiLC8/yistVy3N5EKYHCjg6sB5RMO4BRNAsq0rnR3v1rA=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cat-jsutils&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;js utils&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;index.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mocha&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;coverage&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;istanbul cover _mocha -- -R spec --timeout 5000 --recursive&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;coverage:check&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;istanbul check-coverage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;cover&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;istanbul cover --report lcov node_modules/mocha/bin/_mocha -- -R spec test/*.js&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;repository&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git+https://github.com/CatchZeng/cat-jsutils.git&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;keywords&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;util&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;utils&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;javascript&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;utility&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;utilities&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CatchZeng&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;MIT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;bugs&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/CatchZeng/cat-jsutils/issues&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;homepage&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/CatchZeng/cat-jsutils#readme&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;chai&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^4.1.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;coveralls&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^3.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;istanbul&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^0.4.5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;mocha&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^5.1.0&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;5小结&quot;&gt;5.小结&lt;/h2&gt;
&lt;p&gt;至此，我们完成了提交代码-》travis-》mocha单元测试-》istanbul覆盖率-》coveralls-》github显示npm版本、ci、覆盖率状态。&lt;/p&gt;

&lt;h2 id=&quot;6readme&quot;&gt;6.README&lt;/h2&gt;
&lt;p&gt;完善的README会让开源变得更加优雅。
加入Installation、Usgae、API等描述能帮助使用者更会上手，详细请参考&lt;a href=&quot;https://github.com/CatchZeng/cat-jsutils/edit/master/README.md&quot;&gt;README.md&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;六总结&quot;&gt;六、总结&lt;/h2&gt;
&lt;p&gt;本文从npm包的制作、发布到优化，讲述了如何较好地开源npm包，当然还有需要不足。欢迎感兴趣的朋友一起讨论、优化。
最后附上测试项目地址： &lt;a href=&quot;http://github.com/CatchZeng/cat-jsutils&quot;&gt;http://github.com/CatchZeng/cat-jsutils&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Apr 2018 16:38:27 +0800</pubDate>
        <link>http://localhost:4000/2018/04/17/%E5%BC%80%E6%BA%90%E4%B8%80%E4%B8%AAnpm%E5%8C%85/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/04/17/%E5%BC%80%E6%BA%90%E4%B8%80%E4%B8%AAnpm%E5%8C%85/</guid>
        
        <category>JS</category>
        
        
      </item>
    
      <item>
        <title>iOS进阶 -- 程序启动那些事</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;欢迎加QQ群讨论：157672725&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;iOS开发中，main函数是我们认为的入口，但其实从程序启动到main方法被调用之间，还发生了许多事情。比如runtime的初始化、动态库的加载链接等。想要真正了解程序启动，需要了解程序的内部结构。因此，本章将从分析程序（.ipa）的结构开始，到main函数被调用分析程序的启动。&lt;/p&gt;

&lt;h2 id=&quot;程序ipa结构&quot;&gt;程序（.ipa）结构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-6002dd38843cbb6d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;ipa&quot; /&gt;&lt;/p&gt;

&lt;p&gt;iTunesArtwork: 高分别率图标，通常为JPG图像文件&lt;/p&gt;

&lt;p&gt;iTunesMetadata.plist：属性列表文件&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App(Mach-O)：App的可执行文件&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;可执行文件mach-o&quot;&gt;可执行文件（Mach-O）&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/进程/382503?fr=aladdin&quot;&gt;进程&lt;/a&gt;是特殊文件在内存中加载得到的结果。这种文件必须使用操作系统能够理解的&lt;strong&gt;格式&lt;/strong&gt;，这样操作系统才能解析、建立依赖、初始化并开始执行。这种特殊文件就是可执行文件。
在UNIX中，我们可以使用chmod+x将文件&lt;strong&gt;标记&lt;/strong&gt;为可执行文件，但不能保证该文件可以执行，因为&lt;strong&gt;标记&lt;/strong&gt;只是告诉操作系统内核将文件读入内存，然后寻找一个头签名，这个头签名通常称为&lt;strong&gt;“魔数”&lt;/strong&gt;。当文件读入时，通过&lt;strong&gt;“魔数”&lt;/strong&gt;可帮助判断文件的二进制格式，如果是被支持的二进制格式，才会调用加载器函数。每个平台都有自己的可执行文件格式，Mach-O则是 OS X 与 iOS 系统上的可执行文件格式。
下面我们以QQ为例，借助&lt;a href=&quot;https://sourceforge.net/projects/machoview/&quot;&gt;MachOView&lt;/a&gt;来分析Mach-O文件。&lt;/p&gt;

&lt;h4 id=&quot;魔数&quot;&gt;魔数&lt;/h4&gt;

&lt;p&gt;在OS X上，可执行文件的标识有这样几个魔数：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;cafebabe&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;feedface&lt;/li&gt;
  &lt;li&gt;feadfacf&lt;/li&gt;
  &lt;li&gt;…
&lt;strong&gt;cafebabe&lt;/strong&gt;就是跨处理器架构的通用格式，feedface和feedfacf则分别是某一处理器架构下的Mach-O格式。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-cf41e5f001397df6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;QQ Mach-O&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mach-O 32位魔数是 &lt;strong&gt;0xfeedface&lt;/strong&gt;
Mach-O 64位魔数是 &lt;strong&gt;0xfeedfacf&lt;/strong&gt;
QQ支持ARM32&amp;amp;64所以可以看到两个Mach Header
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-f4d3150431b73b05.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Mach-O 32&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-65536991181a8896.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Mach-O 64&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;mach-o格式&quot;&gt;Mach-O格式&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-9f02e0e795e5d9b0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Match-O&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Header：CPU类型和子类型、文件类型、加载命令的条数和大小、动态连接器标志等&lt;/li&gt;
  &lt;li&gt;LoadCommands：加载命令。比如文件的段与进程地址映射、 调用&lt;strong&gt;dyld&lt;/strong&gt;、开启Mach线程等&lt;/li&gt;
  &lt;li&gt;Data：数据&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;加载过程&quot;&gt;加载过程&lt;/h4&gt;
&lt;p&gt;系统加载可执行文件后，通过&lt;strong&gt;Fat Header&lt;/strong&gt;，找到对应平台的地址，
然后根据相应的&lt;strong&gt;Header&lt;/strong&gt;，获取LoadCommands的信息，并加载。
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-77bfea43f634188f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;FatHeader&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-4a8a93b9fc805843.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Header&quot; /&gt;&lt;/p&gt;

&lt;p&gt;查看Load Commands可知，系统通过&lt;strong&gt;LC_SEGEMNT&lt;/strong&gt;命令将可执行文件段映射到进程地址空间后通过&lt;strong&gt;LC_LOAD_DYLINKER&lt;/strong&gt;调用&lt;strong&gt;dyld&lt;/strong&gt;(通常在/usr/lib/dyld)，当dyld的工作完成之后由&lt;strong&gt;LC_MAIN&lt;/strong&gt;（旧版本中的&lt;strong&gt;LC_UNIXTHREAD&lt;/strong&gt;）命令负责设置主线程的入口地址和栈大小。
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-b80cc628b36b5ebc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Commands&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-5d4b3d6b03f02621.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Load dyld command&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;dyld-the-dynamic-link-editor&quot;&gt;dyld (the dynamic link editor)&lt;/h4&gt;
&lt;p&gt;在讲解dyld之前我们先来看一下Load Commands中的&lt;strong&gt;LC_SYMTAB&lt;/strong&gt;、&lt;strong&gt;LC_DYSYMTAB&lt;/strong&gt;以及&lt;strong&gt;LC_LOAD_DYLB&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-3269c2d0f922bfef.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;SYMTAB&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-2e429f9560f217b4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;libSystem&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-205f4fe756f3b000.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;QQMainProject&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们可以看到Mach-O镜像中有很多&lt;strong&gt;“空洞”&lt;/strong&gt;，即由&lt;strong&gt;LC_SYMTAB&lt;/strong&gt;命令提供的符号表和&lt;strong&gt;LC_LOAD_DYLB&lt;/strong&gt;加载的额外动态库，这些空洞需要在程序启动的时填补。这项工作就需要dyld来完成，这个过程有时候也称为&lt;strong&gt;符号绑定&lt;/strong&gt;(binding)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：细心的朋友可以看到在加载libSystem的时候使用的地址是/usr/lib/而QQMainProject的地址是@rpath/。在iOS系统中，几乎所有的程序都会用到动态库，而动态库在加载的时候都需要用dyld进行链接。很多系统库几乎都是每个程序都要用到的，与其在每个程序运行的时候一个一个将这些动态库都加载进来，还不如先把它们打包好，一次加载进来来的快。这就是&lt;a href=&quot;https://www.cnblogs.com/maizi008/p/5086103.html&quot;&gt;dyld的共享库缓存&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;dyld是&lt;a href=&quot;https://github.com/opensource-apple/dyld&quot;&gt;开源&lt;/a&gt;的，下面我们就从代码的角度分析dyld。&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uintptr_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;_main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;macho_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mainExecutableMH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uintptr_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mainExecutableSlide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; 
		&lt;span class=&quot;kt&quot;&gt;uintptr_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startGlue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 1.instantiate ImageLoader for main executable
&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;sMainExecutable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instantiateFromLoadedImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainExecutableMH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mainExecutableSlide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sExecPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 2.load any inserted libraries
&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DYLD_INSERT_LIBRARIES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DYLD_INSERT_LIBRARIES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;loadInsertedDylib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;//3.link main executable
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sMainExecutable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DYLD_BIND_AT_LAUNCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImageLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RPathChain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;//4. link any inserted libraries
&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// do this after linking main executable so that any dylibs pulled in by inserted 
&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// dylibs (e.g. libSystem) will not be in front of dylibs the program uses
&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sInsertedDylibCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sInsertedDylibCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ImageLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sAllImages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DYLD_BIND_AT_LAUNCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImageLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RPathChain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//5. run all initializers
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;initializeMainExecutable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;1-instantiatefromloadedimage&quot;&gt;1. instantiateFromLoadedImage&lt;/h4&gt;
&lt;p&gt;dyld通过&lt;strong&gt;instantiateFromLoadedImage&lt;/strong&gt;方法初始化&lt;strong&gt;ImageLoader&lt;/strong&gt;并将我们&lt;strong&gt;可执行文件&lt;/strong&gt;加载进内存,生成对应的image（镜像）。每个Mach-O 文件都会对应一个ImageLoader实例。ImageLoader是一个抽象类，每一种具体的Mach-O 文件都会继承 ImageLoader。在加载时会根据Mach-O的格式不同选择生成不用的实例(如：&lt;strong&gt;ImageLoaderMachOClassic&lt;/strong&gt;、&lt;strong&gt;ImageLoaderMachOCompressed&lt;/strong&gt;)。而&lt;strong&gt;sMainExecutable&lt;/strong&gt;对应可执行文件，里面包含了我们项目中&lt;strong&gt;所有新建的类&lt;/strong&gt;。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//
// ImageLoader is an abstract base class.  To support loading a particular executable
// file format, you make a concrete subclass of ImageLoader.
//
// For each executable file (dynamic shared object) in use, an ImageLoader is instantiated.
//
// The ImageLoader base class does the work of linking together images, but it knows nothing
// about any particular file format.
//
//
class ImageLoader {
public:

	typedef uint32_t DefinitionFlags;
	static const DefinitionFlags kNoDefinitionOptions = 0;
	static const DefinitionFlags kWeakDefinition = 1;
	
	typedef uint32_t ReferenceFlags;
	static const ReferenceFlags kNoReferenceOptions = 0;
	static const ReferenceFlags kWeakReference = 1;
	static const ReferenceFlags kTentativeDefinition = 2;
	
	enum PrebindMode { kUseAllPrebinding, kUseSplitSegPrebinding, kUseAllButAppPredbinding, kUseNoPrebinding };
	enum BindingOptions { kBindingNone, kBindingLazyPointers, kBindingNeverSetLazyPointers };
	enum SharedRegionMode { kUseSharedRegion, kUsePrivateSharedRegion, kDontUseSharedRegion, kSharedRegionIsSharedCache };
	
	struct Symbol;  // abstact symbol
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-df21867ba98b660f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;ImageLoader&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-loadinserteddylib&quot;&gt;2. loadInsertedDylib&lt;/h4&gt;
&lt;p&gt;dyld通过&lt;strong&gt;loadInsertedDylib&lt;/strong&gt;方法将插入的lib加载进内存,生成对应的image。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static void loadInsertedDylib(const char* path)
{
	ImageLoader* image = NULL;
	try {
		LoadContext context;
		context.useSearchPaths		= false;
		context.useFallbackPaths	= false;
		context.useLdLibraryPath	= false;
		context.implicitRPath		= false;
		context.matchByInstallName	= false;
		context.dontLoad			= false;
		context.mustBeBundle		= false;
		context.mustBeDylib			= true;
		context.canBePIE			= false;
		context.origin				= NULL;	// can't use @loader_path with DYLD_INSERT_LIBRARIES
		context.rpath				= NULL;
		image = load(path, context);
	}
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;3-link-smainexecutable&quot;&gt;3. link sMainExecutable&lt;/h4&gt;
&lt;p&gt;链接instantiateFromLoadedImage生成的Images。&lt;/p&gt;

&lt;h4 id=&quot;4-link-image&quot;&gt;4. link image&lt;/h4&gt;
&lt;p&gt;链接loadInsertedDylib生成的Images。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Link&lt;/strong&gt;操作其实是调用Imageloader的Link方法，负责对image进行load(加载)、UpdateDepth（更新深度）、rebase(基地址复位)、bind(外部符号绑定)等。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void link(ImageLoader* image, bool forceLazysBound, bool neverUnload, const ImageLoader::RPathChain&amp;amp; loaderRPaths)
{        
    ...
	// process images
	try {
		image-&amp;gt;link(gLinkContext, forceLazysBound, false, neverUnload, loaderRPaths);
	}
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void ImageLoader::link(const LinkContext&amp;amp; context, bool forceLazysBound, bool preflightOnly, bool neverUnload, const RPathChain&amp;amp; loaderRPaths)
{
    ...
	this-&amp;gt;recursiveLoadLibraries(context, preflightOnly, loaderRPaths);
    ...
	this-&amp;gt;recursiveUpdateDepth(context.imageCount());
    ...	
 	this-&amp;gt;recursiveRebase(context);
    ...	
 	this-&amp;gt;recursiveBind(context, forceLazysBound, neverUnload);
    ...
	this-&amp;gt;recursiveGetDOFSections(context, dofs);
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;recursiveloadlibraries&quot;&gt;recursiveLoadLibraries&lt;/h5&gt;
&lt;p&gt;递归加载依赖的动态链接库。
可以使用&lt;strong&gt;otool -L 二进制文件路径&lt;/strong&gt;来列出程序的动态链接库。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cenghaihandeMacBook-Pro:QQ.app catchzeng$ otool -L QQ
QQ (architecture armv7):
	@rpath/TlibDy.framework/TlibDy (compatibility version 1.0.0, current version 1.0.0)
	@rpath/QQMainProject.framework/QQMainProject (compatibility version 1.0.0, current version 1.0.0)
	@rpath/GroupCommon.framework/GroupCommon (compatibility version 1.0.0, current version 1.0.0)
	/System/Library/Frameworks/Foundation.framework/Foundation (compatibility version 300.0.0, current version 1444.12.0)
	/usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.11)
	/System/Library/Frameworks/UIKit.framework/UIKit (compatibility version 1.0.0, current version 
	/System/Library/Frameworks/CFNetwork.framework/CFNetwork (compatibility version 1.0.0, current version 887.0.0)
	/usr/lib/libicucore.A.dylib (compatibility version 1.0.0, current version 59.1.0)
	/usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0)
	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.0.0)
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;UIKit 、Foundation、CFNetwork 等框架相信大家已经很熟悉了。而其中的libobjc.A.dylib 包含 runtime，libSystem.B.dylib 则包含像 libdispatch、libsystem_c 等系统级别的库，二者都是被默认添加到程序中的。由于动态链接库本身还可能依赖其他动态链接库，所以整个加载过程是递归进行的，以下几个操作同理都是&lt;strong&gt;递归&lt;/strong&gt;的。&lt;/p&gt;

&lt;h5 id=&quot;recursiverebase&quot;&gt;recursiveRebase&lt;/h5&gt;
&lt;p&gt;在以前，程序每次加载其在内存中的堆栈&lt;strong&gt;基地址&lt;/strong&gt;都是一样的，这意味着你的方法，变量等地址每次都一样的，这使得程序很不安全，后面就出现&lt;a href=&quot;https://baike.baidu.com/item/aslr/5779647?fr=aladdin&quot;&gt;ASLR（Address space layout randomization）&lt;/a&gt;，程序每次启动后地址都会随机变化，这样程序里所有的代码地址都是错的，需要重新对代码地址进行计算修复才能正常访问，这个操作就是Rebase。&lt;/p&gt;

&lt;h5 id=&quot;recursivebind&quot;&gt;recursiveBind&lt;/h5&gt;
&lt;p&gt;由于符号在不同的库里面，所以需要符号绑定（Bind）这个过程。
举个简单的例子，代码里面调用了 NSClassFromString. 但是NSClassFromString的代码和符号都是在 Foundation.framework 这个动态库里面。还没绑定之前就“不认识”NSClassFromString，所以需要Bind。&lt;/p&gt;

&lt;h4 id=&quot;5-initializemainexecutable&quot;&gt;5. initializeMainExecutable&lt;/h4&gt;
&lt;p&gt;调用所有image的Initalizer方法进行初始化。
这里可以利用环境变量&lt;strong&gt;DYLD_PRINT_INITIALIZERS=1&lt;/strong&gt;来打印出程序的各种依赖库的initializer方法：
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-a932419f6b8d3e9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;DYLD_PRINT_INITIALIZERS&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dyld: calling initializer function 0x103c5f9fe in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/usr/lib/libSystem.dylib
dyld: calling -init function 0x10278a3c6 in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/usr/lib/libBacktraceRecording.dylib
dyld: calling initializer function 0x1068e4d91 in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/usr/lib/libc++.1.dylib
dyld: calling -init function 0x107ba0f80 in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
dyld: calling initializer function 0x107d002c0 in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
dyld: calling initializer function 0x10a4ac8c0 in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/usr/lib/libnetwork.dylib
dyld: calling initializer function 0x10753973e in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/CFNetwork.framework/CFNetwork
dyld: calling initializer function 0x107456500 in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/CFNetwork.framework/CFNetwork
dyld: calling initializer function 0x107456529 in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/CFNetwork.framework/CFNetwork
dyld: calling initializer function 0x10745653d in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/CFNetwork.framework/CFNetwork
dyld: calling initializer function 0x107456551 in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/CFNetwork.framework/CFNetwork
dyld: calling initializer function 0x1076189b3 in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/CFNetwork.framework/CFNetwork
dyld: calling initializer function 0x102f3b5e1 in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Foundation.framework/Foundation
dyld: calling -init function 0x1027c11c3 in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/usr/lib/libMainThreadChecker.dylib
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这里最开始调用的libSystem.dylib的initializer比较特殊，因为runtime初始化就在这一阶段。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/*
 * libsyscall_initializer() initializes all of libSystem.dylib &amp;lt;rdar://problem/4892197&amp;gt;
 */
static __attribute__((constructor)) 
void libSystem_initializer(int argc, const char* argv[], const char* envp[], const char* apple[], const struct ProgramVars* vars)
{
	_libkernel_functions_t libkernel_funcs = {
		.get_reply_port = _mig_get_reply_port,
		.set_reply_port = _mig_set_reply_port,
		.get_errno = __error,
		.set_errno = cthread_set_errno_self,
		.dlsym = dlsym,
	};

	_libkernel_init(libkernel_funcs);

	bootstrap_init();
	mach_init();
	pthread_init();
	__libc_init(vars, libSystem_atfork_prepare, libSystem_atfork_parent, libSystem_atfork_child, apple);
	__keymgr_initializer();
	_dyld_initializer();
//！！！就是这里了
	libdispatch_init();
	_libxpc_initializer();

	__stack_logging_early_finished();

	/* &amp;lt;rdar://problem/11588042&amp;gt;
	 * C99 standard has the following in section 7.5(3):
	 * &quot;The value of errno is zero at program startup, but is never set
	 * to zero by any library function.&quot;
	 */
	errno = 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;libdispatch_init初始化会调用runtime的_objc_init初始化方法，这里我们利用符号断点调试可以看到程序的调用栈，也能验证以上的过程。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-f47c66ed03d820d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;符号断点&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-9d60295df1cf5405.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;调用栈&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;main&quot;&gt;Main&lt;/h2&gt;
&lt;p&gt;当所有的依赖库库的lnitializer都调用完后，dyld的main函数会返回程序的main函数地址，main函数被调用。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main(int argc, char * argv[]) {
    @autoreleasepool {
        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/1622933-uiapplicationmain?language=occ&quot;&gt;UIApplicationMain&lt;/a&gt;，它主要是创建了一个application对象和设置事件循环（autoreleasepool）。至此程序便开始运行。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;本章从ipa文件-》Mach-O-》dyld-》Main简单讲解了程序启动的一些事情，但并不代表着启动的全部，有兴趣的朋友可以继续往深挖。本章是iOS进阶的第一篇，后续会持续更新。如果大家有感兴趣的主题，也可以到Q群里联系我。&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Mar 2018 16:38:27 +0800</pubDate>
        <link>http://localhost:4000/2018/03/23/iOS%E8%BF%9B%E9%98%B6-%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E9%82%A3%E4%BA%9B%E4%BA%8B/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/23/iOS%E8%BF%9B%E9%98%B6-%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS 自定义弹出视图的正确姿势</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;欢迎加QQ群讨论：157672725&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;开发时经常会自定义一些弹出视图，比如弹框（Alert）、底部弹出框(Action Sheet)等。自定义弹出视图有许多方法，到底哪种才更正确呢？下面我列举几种方法，一起讨论。先附上我的方案&lt;a href=&quot;https://github.com/CatchZeng/SwiftPopup&quot;&gt;https://github.com/CatchZeng/SwiftPopup&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;addsubview&quot;&gt;addSubview&lt;/h2&gt;
&lt;p&gt;顾名思义，就是造出一个View，然后add到ViewController的View上显示出来，如&lt;a href=&quot;https://www.jianshu.com/p/de2ecfd770c2&quot;&gt;https://www.jianshu.com/p/de2ecfd770c2&lt;/a&gt;的做法。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;好处：够简单&lt;/li&gt;
  &lt;li&gt;坏处：视图&amp;amp;逻辑都在View上，职能不清晰，扩展性差，显示依赖于ViewController&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;addchildviewcontroller&quot;&gt;addChildViewController&lt;/h2&gt;
&lt;p&gt;使用addChildViewController方法，将视图显示出来。如&lt;a href=&quot;https://www.jianshu.com/p/6d790e6eb2ba&quot;&gt;https://www.jianshu.com/p/6d790e6eb2ba&lt;/a&gt;的做法。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;好处：简单、职能清晰…&lt;/li&gt;
  &lt;li&gt;坏处：在导航栏控制器或者标签栏控制器下弹出，会出现没完全覆盖到的情况。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;window&quot;&gt;window&lt;/h2&gt;
&lt;p&gt;新建一个window，切换成KeyWindow，将弹出视图作为rootViewController。代码如下&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;previousWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyWindow&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;keyWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIScreen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;keyWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;keyWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;windowLevel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIWindowLevelNormal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;keyWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;keyWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;makeKeyAndVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;好处：简单、职能清晰…&lt;/li&gt;
  &lt;li&gt;坏处：在横屏的时候，第二次弹出时，出现显示问题【暂时不知道为什么】&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-1211c59a06555b49.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;第二次显示问题&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;uipresentationcontroller&quot;&gt;UIPresentationController&lt;/h2&gt;
&lt;p&gt;使用UIPresentationController自定义转场动画，这也是我的实现方法。
UIPresentationController是提供高级视图切换的类。它让管理present ViewController的过程变得简单。&lt;/p&gt;

&lt;h4 id=&quot;presentation&quot;&gt;Presentation&lt;/h4&gt;
&lt;p&gt;如下图弹出一个UIViewController，可以和用户交互的Controller叫做PresentedViewController，而后面那个被部分遮挡的UIViewController叫做PresentingViewController.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-bc6b9c4ea47bd482.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Presentation&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;uipopovercontroller的使用方法&quot;&gt;UIPopoverController的使用方法&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;设置style&amp;amp;delegate&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;modalPresentationStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;custom&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;transitioningDelegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;实现delegate，此代理需要UIPresentationController，以及UIViewControllerAnimatedTransitioning来自定义转场的动画&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SwiftPopup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewControllerTransitioningDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;presentationController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forPresented&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;presented&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                       &lt;span class=&quot;nv&quot;&gt;presenting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt;
                                       &lt;span class=&quot;nv&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIPresentationController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;controller&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SwiftPopupPresentationController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;presentedViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;presented&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                       &lt;span class=&quot;nv&quot;&gt;presenting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;presenting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backViewColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;backViewColor&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animationController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forPresented&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;presented&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;nv&quot;&gt;presenting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;nv&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewControllerAnimatedTransitioning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;showAnimation&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animationController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forDismissed&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dismissed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewControllerAnimatedTransitioning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dismissAnimation&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;实现自定义的UIPresentationController&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SwiftPopupPresentationController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIPresentationController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// MARK: Override Methods &lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 将要开始转场&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;presentationTransitionWillBegin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 将要移除页面&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dismissalTransitionWillBegin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
   &lt;span class=&quot;c1&quot;&gt;// 是否要移除PresentersView，也就是转场之前的视图，这里为false，因为弹框需要看到之前的视图&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;shouldRemovePresentersView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;实现自定义的动画&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SwiftPopupShowAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewControllerAnimatedTransitioning&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TimeInterval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TimeInterval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;springWithDamping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;springVelocity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transitionDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;transitionContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewControllerContextTransitioning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TimeInterval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateTransition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;transitionContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewControllerContextTransitioning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;toViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transitionContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITransitionContextViewControllerKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;toView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transitionContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITransitionContextViewKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;containerView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transitionContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerView&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;toView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transitionContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;finalFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;containerView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;toView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGAffineTransform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;scaleX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;nv&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;nv&quot;&gt;usingSpringWithDamping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;springWithDamping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;nv&quot;&gt;initialSpringVelocity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;springVelocity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curveEaseInOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;toView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGAffineTransform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;scaleX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;transitionContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;completeTransition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Show&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;above&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;viewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                           &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mIsShowing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;viewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Dismiss&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dismiss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;dismiss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mIsShowing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;完整代码 &lt;a href=&quot;https://github.com/CatchZeng/SwiftPopup&quot;&gt;https://github.com/CatchZeng/SwiftPopup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-4b0dfb03164525fa.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Demo&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;如遇问题或者有更好的方式，&lt;strong&gt;欢迎加QQ群讨论：157672725&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Jan 2018 16:38:27 +0800</pubDate>
        <link>http://localhost:4000/2018/01/11/iOS-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%B9%E5%87%BA%E8%A7%86%E5%9B%BE%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/11/iOS-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%B9%E5%87%BA%E8%A7%86%E5%9B%BE%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>TensorFlow--Hello World</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;欢迎加QQ群讨论：157672725&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.tensorflow.org&quot;&gt;TensorFlow™&lt;/a&gt; 是一个采用&lt;strong&gt;数据流图（data flow graphs）&lt;/strong&gt;，用于数值计算的开源软件库。&lt;strong&gt;节点（Nodes）&lt;/strong&gt;在图中表示&lt;strong&gt;数学操作&lt;/strong&gt;，图中的&lt;strong&gt;线（edges）&lt;/strong&gt;则表示在节点间相互联系的&lt;strong&gt;多维数据数组&lt;/strong&gt;，即&lt;strong&gt;张量（tensor）&lt;/strong&gt;。它灵活的架构让你可以在多种平台上展开计算，例如台式计算机中的一个或多个CPU（或GPU），服务器，移动设备等等。TensorFlow 最初由Google大脑小组（隶属于Google机器智能研究机构）的研究员和工程师们开发出来，用于机器学习和深度神经网络方面的研究，但这个系统的通用性使其也可广泛用于其他计算领域。&lt;/p&gt;

&lt;h2 id=&quot;概念介绍数据流图节点线张量&quot;&gt;概念介绍（数据流图、节点、线、张量）&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;数据流图&lt;/strong&gt;用&lt;strong&gt;节点&lt;/strong&gt;和&lt;strong&gt;线&lt;/strong&gt;的有向图来描述数学计算。&lt;strong&gt;节点&lt;/strong&gt; 一般用来表示施加的&lt;strong&gt;数学操作&lt;/strong&gt;，但也可以表示数据&lt;strong&gt;输入（feed in）的起点/输出（push out）的终点&lt;/strong&gt;，或者是&lt;strong&gt;读取/写入持久变量（persistent variable）的终点&lt;/strong&gt;。&lt;strong&gt;线&lt;/strong&gt;表示&lt;strong&gt;节点&lt;/strong&gt;之间的输入/输出关系。这些数据&lt;strong&gt;线&lt;/strong&gt;可以输运“size可动态调整”的多维数据数组，即&lt;strong&gt;张量&lt;/strong&gt;（tensor）。张量从图中流过的直观图像是这个工具取名为“Tensorflow”的原因。一旦输入端的所有张量准备好，节点将被分配到各种计算设备完成异步并行地执行运算。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-55c623beb0c057ae.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;数据流图&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;hello-world&quot;&gt;Hello World&lt;/h2&gt;
&lt;p&gt;学习新语言时，我们通常都会写一个Hello World，来熟悉开发环境的搭建。TensorFlow也不例外。接下来，我将带大家一步步搭建TensorFlow的环境，向世界问好！&lt;/p&gt;

&lt;h3 id=&quot;1安装anaconda后面说明为何选择anaconda&quot;&gt;1.安装Anaconda[后面说明为何选择Anaconda]&lt;/h3&gt;
&lt;p&gt;前往&lt;a href=&quot;https://www.anaconda.com/download/#macos&quot;&gt;Anaconda&lt;/a&gt;下载安装包（这里以Mac系统为例，选择Python3.6version）
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-b3e0cc827478d1cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Anaconda&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2启动anaconda选择环境点击创建选择环境选项这里以python-v35为例&quot;&gt;2.启动Anaconda，选择环境点击创建，选择环境选项（这里以Python V3.5为例）&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-e5abcd2b36fb1edd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Anaconda&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-9e283e4c85ff495a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;创建环境&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-89380eb14ba6c11f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;环境选项&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3安装tensorflow包&quot;&gt;3.安装TensorFlow包&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-0f7a50b0c22ba245.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;选择All&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-d963ab9ed5345a26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;搜索TensorFlow并勾选&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-cfe1cdc8c164b85c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Apply&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4运行环境&quot;&gt;4.运行环境&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-cf80b1798d03c5ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Run&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;5编写hello-world&quot;&gt;5.编写Hello World&lt;/h4&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tensorflow&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tf&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Hello, TensorFlow!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-bf318f56b181702d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Hello World&quot; /&gt;&lt;/p&gt;

&lt;p&gt;自此TensorFlow的环境已搭建完成！&lt;/p&gt;

&lt;h2 id=&quot;为何选择anaconda&quot;&gt;为何选择Anaconda？&lt;/h2&gt;

&lt;p&gt;Python易用，但用好却不易，其中比较头疼的就是包管理和Python不同版本的问题，特别是当你使用Windows的时候。为了解决这些问题，就有了不少发行版的Python，比如WinPython、Anaconda等，这些发行版将python和许多常用的package打包，方便Pythoners直接使用。个人尝试了很多类似的发行版，因为Anaconda强大而方便的包管理与环境管理的功能，最终选择了它。&lt;/p&gt;

&lt;h2 id=&quot;参考链接&quot;&gt;参考链接&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.tensorflow.org/install/&quot;&gt;https://www.tensorflow.org/install/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.anaconda.com&quot;&gt;https://www.anaconda.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://python.jobbole.com/86236/&quot;&gt;http://python.jobbole.com/86236/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Jan 2018 16:38:27 +0800</pubDate>
        <link>http://localhost:4000/2018/01/04/TensorFlow-Hello-World/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/04/TensorFlow-Hello-World/</guid>
        
        <category>TensorFlow</category>
        
        
      </item>
    
      <item>
        <title>Clean Code 告诉你什么是好代码</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;欢迎加QQ群讨论：157672725&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近在团队推行Code Review，遇到一个头痛的问题。当向伙伴的代码提一个comment时，他们不解为什么需要这样改。细细想来，是他们不知道何为好代码，也不知道自己的代码有哪些 &lt;strong&gt;“坏味道”&lt;/strong&gt;。因此，分享了几期Clean Code，团队受益良多，故成此文。&lt;/p&gt;

&lt;h2 id=&quot;clean-code&quot;&gt;Clean Code&lt;/h2&gt;
&lt;p&gt;由于Clean Code篇幅较长，故先安排如下我认为较为重要的几点：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;命名&lt;/li&gt;
  &lt;li&gt;函数（方法）&lt;/li&gt;
  &lt;li&gt;注释&lt;/li&gt;
  &lt;li&gt;对象、数据结构&lt;/li&gt;
  &lt;li&gt;类&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;命名&quot;&gt;命名&lt;/h2&gt;
&lt;p&gt;命名有许多规则，但总结起来就是 &lt;strong&gt;“有意义”&lt;/strong&gt; 才是硬道理。&lt;/p&gt;

&lt;h4 id=&quot;名副其实&quot;&gt;名副其实&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Int d；//逝去的时间
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这句代码的问题在于d没有表达好逝去的时间这个概念，故需要注释。请记住&lt;strong&gt;“名副其实就不需要注释”&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Int elapsedTime;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;再来看个例子
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-84ec0aa383220ddd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;
谁都很难猜出其意义，看看小优化后的结果
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-d49086e45373066b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;
基本看清了意义，这就是命名的重要性。细心的朋友还会发现这段代码的一些瑕疵 ：这里的4是什么鬼？习惯性我们管它叫&lt;strong&gt;“魔法数字”&lt;/strong&gt;
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-c6050e2641251ccd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;
还是觉得有点问题，再优化
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-b064c4481f973106.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;
对比下最早的代码，相信你会有感觉了。&lt;/p&gt;

&lt;h4 id=&quot;避免误导&quot;&gt;避免误导&lt;/h4&gt;
&lt;p&gt;生活中的场景也常出现在Code中，看下图，你的Code是否也出现这样的尴尬呢？那就Make it clean
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-5f157c1bfc0ec8bd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-79d103ddf5765538.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;
是否傻傻分不清了呢？ 再来个&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;accountList
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;我知道你想说，这有什么问题。是的，如果你不是做Java开发，不会知道链表叫List，所以如果你不是用链表存储account，请不要用其修饰，或许这个时候你使用acountGroup会更好些。
&lt;strong&gt;该点需要在具体开发环境下因地制宜&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;有意义的区分&quot;&gt;有意义的区分&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Product
ProductInfo
ProductData
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;可以想象下，当一个项目中同时出现以上三个类的时候，你是如何区分开的，反正我是没有这个能力。类似的还有&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;game
theGame
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name
nameString
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;分享时，伙伴说nameString有什么问题。我反问说难道你的名字会是Float型的？你懂了吧。&lt;/p&gt;

&lt;h4 id=&quot;前缀&quot;&gt;前缀&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;m_desc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;有人提出加m前缀表示该变量为私有变量。
我想说：你的变量很多？需要区分私有的还是公有的？如果你的变量很多，那就要想想是不是没设计好类，没有遵循&lt;strong&gt;单一职责原则&lt;/strong&gt;，另外私有和公有变量编译器会帮忙高亮显示区分的，不需要自己来区分(若某些编译器无此特性，怪编译器去)。&lt;/p&gt;

&lt;h4 id=&quot;命名惯性&quot;&gt;命名惯性&lt;/h4&gt;
&lt;p&gt;命名需要&lt;strong&gt;注重词性&lt;/strong&gt;
类名：名词 or 名词短语
方法名:  动词 or 动词短语&lt;/p&gt;

&lt;h4 id=&quot;每个概念对应一个词&quot;&gt;每个概念对应一个词&lt;/h4&gt;
&lt;p&gt;在一个模块中不要使用两个相似的概念来表达不同的操作。我在一份代码中看到过一个类中同时出现以下三个词打头的方法&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fetch
get
retrieve
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;请问那个才是真的获取值的方法？我实在分不清。&lt;/p&gt;

&lt;h4 id=&quot;使用领域名称&quot;&gt;使用领域名称&lt;/h4&gt;
&lt;p&gt;使用领域命名能让伙伴更明白你的程序结构（关于&lt;strong&gt;领域&lt;/strong&gt;这个概念，不熟悉的可以看下一本书叫 &lt;strong&gt;《领域驱动设计》&lt;/strong&gt;,俗称DDD）
举个例子，比如你使用访问者模式来构建用户系统，那么&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AccountVisitor
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;就显得明确、易懂&lt;/p&gt;

&lt;h4 id=&quot;抵制缩写诱惑&quot;&gt;抵制缩写诱惑&lt;/h4&gt;
&lt;p&gt;缩写需要注意，适当的缩写是可以的，但是要保证缩写后的词语仍然能表达其本意。举个有意思的例子&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ABCDEFG
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这也是个缩写，但是乍看这个真不知道是什么的缩写，直接公布答案吧&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-824add860b52f5a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;小结&quot;&gt;小结&lt;/h4&gt;
&lt;p&gt;命名是永恒的难题，我提几个建议吧&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;多看开源代码，积累好的用词&lt;/li&gt;
  &lt;li&gt;不懂的词就查下词典，好过你自己想的&lt;/li&gt;
  &lt;li&gt;做个自己的开源项目，让别人给你建议&lt;/li&gt;
  &lt;li&gt;做好积累、再积累、还是积累&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-5a060e2dfc2b0a89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;一些借鉴词&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;函数方法&quot;&gt;函数（方法）&lt;/h2&gt;
&lt;p&gt;函数的第一条规则是要短小，第二条规则还是要短小。&lt;/p&gt;

&lt;h4 id=&quot;短小&quot;&gt;短小&lt;/h4&gt;
&lt;p&gt;那到底多短合适呢？历史上出现过几个标准&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;一屏&lt;/li&gt;
  &lt;li&gt;100行&lt;/li&gt;
  &lt;li&gt;50行&lt;/li&gt;
  &lt;li&gt;20行
有人问我为什么会差这么多，我的回答是：以前的屏幕分辨率那么低，一屏也就20-50行之间吧，所以以前一屏的说法也是合理的。
对于行数，行业没有一个固定的标准。我所知道的Oracle建议是50行，Bob大叔的建议是20行。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;代码短小，好处自然很多。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;单元测试覆盖率高&lt;/li&gt;
  &lt;li&gt;每个函数一目了然，只做一件事&lt;/li&gt;
  &lt;li&gt;有利于函数中的代码都在同一个抽象层级&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;只做一件事&quot;&gt;只做一件事&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;函数应该做一件事。做好这件事。只做一件事。&lt;/strong&gt;
那么如何判断只做一件事？
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-dcdab641d4e1302f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;
请问这个函数做了几件事？伙伴的答案是&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.判断是否为测试页面
2.加入测试数据
3.渲染页面
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;你的答案是多少呢？其实答案是只做了一件事，主要是没有看清
&lt;strong&gt;一件事 OR 一件事的多个步骤&lt;/strong&gt;，关于这点，大家要好好体会。&lt;/p&gt;

&lt;p&gt;另外一个判断是否只做一件事的好方法： &lt;strong&gt;是否能再次分离出新函数&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;同一个抽象层级&quot;&gt;同一个抽象层级&lt;/h4&gt;
&lt;p&gt;关于层级，比较难讲明，直接看例子吧
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-1855a83626453299.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;
再看一个版本
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-534558d3ed66a43c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;
你会发现看第二个版本的代码，明显舒服很多。因为第二的版本的三句代码都在同一个层级。而第一个版本的代码中的第一句是设置roundView的某个属性，但是最后一句却是在设置bubbleView，层级不同（roundView与bubbleView才是同层级）&lt;/p&gt;

&lt;h4 id=&quot;使用描述性名称&quot;&gt;使用描述性名称&lt;/h4&gt;
&lt;p&gt;如果长一点的名称可以更加清晰，不要犹豫，用清晰的吧（注意是要有意义的）&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;calculate
calculatePrice
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;相比起来calculatePrice就好很多。
再来看个例子&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;addComment
addCommentAndReturnCount
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;你不是说长一点更清晰吗，那addCommentAndReturnCount很好吧。
关于这点大家要注意，如果你&lt;strong&gt;需要用and、or之类的介词来修辞函数时，要考虑下你是否违背了单一职责原则&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;参数个数&quot;&gt;参数个数&lt;/h4&gt;
&lt;p&gt;0个最好，
1个次之，
2个还行，
3个以上不是太好了。
参数与函数名位于不同的抽象层级，它要求你必须了解目前并不特别重要的细节。
解决办法有许多，比如某些场景可使用&lt;a href=&quot;http://blog.csdn.net/u014618469/article/details/51112357&quot;&gt;DTO&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;嵌套层次分支过多&quot;&gt;嵌套层次、分支过多&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-e3e65b2257fbd001.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;
嵌套、分支过多会让代码变得很难理解，解决的办法有如下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;卫语句&lt;/li&gt;
  &lt;li&gt;do-while,引入break&lt;/li&gt;
  &lt;li&gt;if-else if-then&lt;/li&gt;
  &lt;li&gt;提取函数&lt;/li&gt;
  &lt;li&gt;以子类取代类型代码&lt;/li&gt;
  &lt;li&gt;以多态取代条件式&lt;/li&gt;
  &lt;li&gt;…
具体可根据项目特点选用&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;分割指令与查询&quot;&gt;分割指令与查询&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-d0b8c4a080ee6096.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;
set这个函数很不明确的是到底是设置成功了返回true，还是名字存在返回true，但真正的问题在于，它是个指令但是掺杂了查询的功能。
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-530ed1a5b0be6092.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;
将查询和命令分离后，代码便清晰很多了。&lt;/p&gt;

&lt;h4 id=&quot;小结-1&quot;&gt;小结&lt;/h4&gt;
&lt;p&gt;如何写出好的函数&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;先写对的，再写好的&lt;/li&gt;
  &lt;li&gt;对 =》 单元测试 =》识别坏味道 =》重构&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;注释&quot;&gt;注释&lt;/h2&gt;
&lt;p&gt;“别给糟糕的代码加注释 — 重新写吧。” –Brian &amp;amp; P.J.
“注释总是一种失败” –Bob&lt;/p&gt;

&lt;h4 id=&quot;用代码来阐述&quot;&gt;用代码来阐述&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-7ded99f349de2d7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-c078b0c47617e0c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;
感受两段代码会发现&lt;strong&gt;代码即注释&lt;/strong&gt;的美&lt;/p&gt;

&lt;h4 id=&quot;坏注释&quot;&gt;坏注释&lt;/h4&gt;
&lt;p&gt;先来看看什么是坏的注释&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-1f4c7f7885168329.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;喃喃自语&quot;&gt;喃喃自语&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-33d7fada2eecf05f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;
这注释绝对是给自己看的&lt;/p&gt;

&lt;h6 id=&quot;多余的注释&quot;&gt;多余的注释&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-5b6e1b6c11fa5dcc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;
解释跟没解释一样，不如代码来的简单明了&lt;/p&gt;

&lt;h6 id=&quot;误导性的注释&quot;&gt;误导性的注释&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-8420be9ee7452dc0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;
你在误导吧&lt;/p&gt;

&lt;h6 id=&quot;循规式注释&quot;&gt;循规式注释&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-9abd556dce08133e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;
这个一定要注意，循环式的注释完全多余（除了做sdk、开源）&lt;/p&gt;

&lt;h6 id=&quot;括号后的注释&quot;&gt;括号后的注释&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-2baf32c06cca4c83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;
如果括号后需要注释，只表明你这段代码太长了，需要做的不是加注释，而是将它变短。&lt;/p&gt;

&lt;h6 id=&quot;归属于署名&quot;&gt;归属于署名&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-c32581aef1508e65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;
Git、SVN知道是你提交的，不用这样刷存在感&lt;/p&gt;

&lt;h6 id=&quot;注释掉代码&quot;&gt;注释掉代码&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-80c04ff8663dc87d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;
注释掉的代码，只会让修改你代码的人蒙圈，如果你觉得这段代码有可能以后会用，也不用担心，Git、SVN会帮你找回来&lt;/p&gt;

&lt;h6 id=&quot;信息过多&quot;&gt;信息过多&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-78b971fc580ba07b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;
面向对象讲究，暴露操作，隐藏实现，如果你还要注释这些信息，表示你没有封装好。这些信息，可考虑放个链接或者其他的简短提示，太长的注释，别人懒得读、也难读懂
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-9975e7daf6d46fa5.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;好注释&quot;&gt;好注释&lt;/h4&gt;
&lt;p&gt;看了那么多坏注释，来看看什么是好的注释&lt;/p&gt;

&lt;h6 id=&quot;法律信息&quot;&gt;法律信息&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-f6c465ce5b02c212.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;提供信息&quot;&gt;提供信息&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-1e88b64df4b3545a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;对意图的注释&quot;&gt;对意图的注释&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-3514ef2a1f11e5ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;阐释&quot;&gt;阐释&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-e27063498e5fa921.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;警示&quot;&gt;警示&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-9c37a2b13b274296.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;todo注释&quot;&gt;TODO注释&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-8a3c0463568c7c91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;放大&quot;&gt;放大&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-8942084ca561d0ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;对象数据结构&quot;&gt;对象、数据结构&lt;/h2&gt;

&lt;h4 id=&quot;数据抽象&quot;&gt;数据抽象&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-da5ce334a6178165.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-760ec2a370cb8a69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;将变量设置为私有(Private)，主要是不想让其他人依赖这些变量。所以，不要随便给变量添加赋值方法和取值方法(set/get方法)，这样其实是把私有变量公之于众。
隐藏变量和实现，并不是在变量与外界之间放一个函数层那么简单。隐藏关乎抽象。
类并不简单地用赋值方法和取值方法将其变量推向外间，而是暴露抽象接口，以便用户&lt;strong&gt;无需了解数据的实现而能操作数据本体。&lt;/strong&gt;
要以什么方式呈现对象所包含的数据，需要做严肃的思考。随便加赋值方法和取值方法，是最坏的选择。&lt;/p&gt;

&lt;h4 id=&quot;数据对象的反对称性&quot;&gt;数据、对象的反对称性&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-f628b8cefc80ecd5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-8cf0f6f09ad2b332.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;前者是一种过程式代码，后者是面向对象式代码。我们会发现假如要添加一个新形状的话，后者绝对是不错的选择，因为以上代码都不需要修改，只需写一个新形状类，这符合“开放–封闭”原则。然而假如添加一个计算周长的功能的话那就杯具了，因为这样子每个形状类都得改动。但是假如是用过程式代码的话只需要添加一个新函数。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;过程式代码（使用数据结构的代码）便于在不改动既有数据结构的前提下添加新函数。
面向对象代码便于在不改动既有函数的前提下添加新类。
一切都是对象只是一个传说&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;类&quot;&gt;类&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-fd96714e9529ec6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;组织&quot;&gt;组织&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;公共静态变量&lt;/li&gt;
  &lt;li&gt;私有静态变量&lt;/li&gt;
  &lt;li&gt;私有实体变量&lt;/li&gt;
  &lt;li&gt;公共函数&lt;/li&gt;
  &lt;li&gt;私有函数
自顶向下原则
&lt;strong&gt;这里为什么没有写公有实体变量是因为，其不建议出现在代码中。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;短小-1&quot;&gt;短小&lt;/h4&gt;
&lt;p&gt;函数的短小标准是行数，那类是什么呢？答案是&lt;strong&gt;职责&lt;/strong&gt;
类需要遵循&lt;a href=&quot;http://catchzeng.com/2017/02/19/iOS聊聊设计模式原则-一-单一职责原则/&quot;&gt;单一职责原则&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;内聚&quot;&gt;内聚&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-57db1505a58e54fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;
如以上代码，内聚性高，除了size方法外，其他方法都使用了两个实例变量。
内聚：&lt;strong&gt;模块内部各个元素彼此结合的紧密程度（类中方法和变量间的结合程度）&lt;/strong&gt;
&lt;strong&gt;保持内聚会得到许多短小的类
当一个类丧失内聚性时我们应当拆分它&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;Clean Code能帮助团队构建代码质量体系，有助于开发的各个环节（静态分析、持续集成、Code Review…）。当然，对个人的能力提高也很有好处，建议大家都应该熟悉。等团队Code Review一段时间后，有其他收获的话，再给大家分享。
&lt;strong&gt;预祝大家国庆节快乐！&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 29 Sep 2017 16:38:27 +0800</pubDate>
        <link>http://localhost:4000/2017/09/29/Clean-Code-%E5%91%8A%E8%AF%89%E4%BD%A0%E4%BB%80%E4%B9%88%E6%98%AF%E5%A5%BD%E4%BB%A3%E7%A0%81/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/09/29/Clean-Code-%E5%91%8A%E8%AF%89%E4%BD%A0%E4%BB%80%E4%B9%88%E6%98%AF%E5%A5%BD%E4%BB%A3%E7%A0%81/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS开发见闻-第22期</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;欢迎加QQ群讨论：157672725&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;文章&quot;&gt;文章&lt;/h2&gt;

&lt;p&gt;1.&lt;a href=&quot;http://www.infoq.com/cn/articles/ios-arch-based-on-reswift-and-app-coordinator?utm_source=articles_about_mobile&amp;amp;utm_medium=link&amp;amp;utm_campaign=mobile&quot;&gt;基于ReSwift和App Coordinator的iOS架构&lt;/a&gt; : 本篇文章从架构漫谈到开发复杂度问题再到路由设计再到状态管理，讲述了如何使用ReSwift和App Coordinator来架构工程。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-22b6a9a5f8a39094.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;基于ReSwift和App Coordinator的iOS架构&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;https://onevcat.com/2017/07/state-based-viewcontroller/&quot;&gt;单向数据流动的函数式 View Controller&lt;/a&gt; : 喵神对单向数据流动的见解，与上篇文章中的ReSwift思想类似，但喵神以一种由浅入深的方式讲述，更易理解。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://onevcat.com/assets/images/2017/view-controller-states.svg&quot; alt=&quot;单向数据流动的函数式 View Controller&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;http://www.infoq.com/cn/articles/getting-started-with-tensorflow-on-ios?utm_source=articles_about_mobile&amp;amp;utm_medium=link&amp;amp;utm_campaign=mobile&quot;&gt;深度学习指南：在iOS平台上使用TensorFlow&lt;/a&gt; ：随着CoreML的推广，机器学习已经开始在iOS中尝试，我们可以利用TensorFlow训练自己的机器学习模型。对机器学习感兴趣的朋友可以看看。
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-1b804dc0fa8a439b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;TensorFlow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;http://limboy.me/tech/2017/06/22/the-right-way-to-ios-architecture.html&quot;&gt;The Right Way to Architect iOS App with Swift&lt;/a&gt; : 来自limboy的架构相关文章。
&lt;img src=&quot;http://ww1.sinaimg.cn/large/afe37136gy1fgtcxzpz4yj218m0mw0vs.jpg&quot; alt=&quot;The Right Way to Architect iOS App with Swift&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;工具&quot;&gt;工具&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;https://pmd.github.io&quot;&gt;PMD&lt;/a&gt;：代码分析工具，支持检测swift的重复代码。
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-10a78fa32e147c61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;PMD&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;SwiftLint&lt;/a&gt; :  是一个用于强制检查 Swift 代码风格和规定的一个工具，基本上以 &lt;a href=&quot;https://github.com/github/swift-style-guide&quot;&gt;GitHub’s Swift 代码风格指南&lt;/a&gt;为基础。带有自动更正、推荐语法等特性，值得推荐。
&lt;img src=&quot;https://github.com/realm/SwiftLint/raw/master/assets/screenshot.png&quot; alt=&quot;SwiftLint&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;https://itunes.apple.com/us/app/quiver-programmers-notebook/id866773894?mt=12&quot;&gt;Quiver&lt;/a&gt; : Quiver 是一款为程序员专门设计的笔记软件，兼顾文本（代码）编辑与管理工作，可谓是“一车多用”， 支持纯文本、全语法 Markdown、LaTeX（MathJax）、Flowchart 以及数十种编程语言的嵌入显示（自动高亮）。设立了 Inbox + Favorites + Recents + Trash 的 Library 库架构，搭配 Tag 系统方便用户调用各种笔记，另外用户可像 Ulysses（新建组）那样创建属于不同环境的 Notebook（分组），支持全文搜索笔记和全屏演示功能，方便会议交流使用。
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-56dd51293e05f3bc.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Quiver&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;开源&quot;&gt;开源&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;https://github.com/olucurious/awesome-arkit&quot;&gt;awesome-arkit&lt;/a&gt; : 整理了ARKit的项目与资源，研究ARKit的不要错过。
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-31e115c8b3b57a36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;awesome-arkit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;https://github.com/duzexu/ARuler&quot;&gt;ARuler&lt;/a&gt; : 使用ARkit来量距离，作者的想法也是屌屌的。
&lt;img src=&quot;https://github.com/duzexu/ARuler/raw/master/Design/logo.png&quot; alt=&quot;ARuler&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;https://github.com/raulriera/Cacher&quot;&gt;Cacher&lt;/a&gt; : 一款简单的Cache实现。
&lt;img src=&quot;https://github.com/raulriera/Cacher/raw/master/Resources/Icon.png&quot; alt=&quot;Cacher&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;https://github.com/fahidattique55/FAPanels&quot;&gt;FAPanels&lt;/a&gt; : 直接看效果吧。
&lt;img src=&quot;https://camo.githubusercontent.com/ed45512fcdaee74a65976a07b7498de10300b7a9/687474703a2f2f692e696d6775722e636f6d2f5a4e31336561662e676966&quot; alt=&quot;FAPanels&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;a href=&quot;https://github.com/Moya/Moya&quot;&gt;Moya&lt;/a&gt; : Swift写的网络抽象层，设计得很不错。
&lt;img src=&quot;https://github.com/Moya/Moya/raw/master/web/diagram.png&quot; alt=&quot;Moya&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Jul 2017 17:38:27 +0800</pubDate>
        <link>http://localhost:4000/2017/07/20/iOS%E5%BC%80%E5%8F%91%E8%A7%81%E9%97%BB-%E7%AC%AC22%E6%9C%9F/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/07/20/iOS%E5%BC%80%E5%8F%91%E8%A7%81%E9%97%BB-%E7%AC%AC22%E6%9C%9F/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>ARKit浅析篇</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;在上一篇&lt;a href=&quot;http://catchzeng.com/2017/06/13/ARKit体验篇/&quot;&gt;ARKit体验篇&lt;/a&gt;中我们体验了ARKit，这一篇主要从类出发分析下ARKit的流程。&lt;/p&gt;

&lt;h2 id=&quot;arkit浅析&quot;&gt;ARKit浅析&lt;/h2&gt;
&lt;p&gt;我们知道，iOS的视图显示层级为UIWindow -》UIViewController -》UIView。UIView的作用是将视图显示在UIWindow中,AR呈现的东西也属于视图，所以我们可以大胆假设AR的呈现也是基于UIView的。由此假设，我们看下上一篇的Demo源码&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  //在界面上创建ARSCNView，用于展示AR
 @IBOutlet var sceneView: ARSCNView!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;可以看到，AR由ARSCNView呈现出来，查看文档可以看到&lt;a href=&quot;https://developer.apple.com/documentation/arkit/arscnview&quot;&gt;ARSCNView&lt;/a&gt;继承于&lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scnview&quot;&gt;SCNView&lt;/a&gt;。而SCNView则是&lt;a href=&quot;https://developer.apple.com/documentation/scenekit&quot;&gt;SceneKit&lt;/a&gt;中一个继承于UIView的类。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@available(iOS 11.0, *)
open class ARSCNView : SCNView {
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scnview&quot;&gt;SCNView&lt;/a&gt;负责显示一个3D场景，ARSCNView在SCNView的基础上，加入了&lt;a href=&quot;https://developer.apple.com/documentation/arkit/arsession&quot;&gt;ARSession&lt;/a&gt;使得其可以用摄像头(&lt;a href=&quot;https://developer.apple.com/documentation/arkit/arcamera&quot;&gt;ARCamera&lt;/a&gt;)捕捉到的现实世界图像构成3D场景，也就是AR。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-ecf16187b749b8a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;ARKit&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;arsession&quot;&gt;ARSession&lt;/h2&gt;
&lt;p&gt;查看&lt;a href=&quot;https://developer.apple.com/documentation/arkit/arsession&quot;&gt;文档&lt;/a&gt;，不难看出ARSession是沟通摄像头(ARCamera)和运动处理的桥梁。ARCamera负责捕捉摄像头画面，ARSession负责搭建3D场景。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-90c48ba66b8751ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;ARSession&quot; /&gt;&lt;/p&gt;

&lt;p&gt;运行ARSession需要指定一个&lt;a href=&quot;https://developer.apple.com/documentation/arkit/arsessionconfiguration&quot;&gt;ARSessionConfiguration&lt;/a&gt;来负责追踪相机在3D世界中的位置以及场景的捕捉（例如平面）。
ARSessionConfiguration是一个父类，为了更好的看到增强现实的效果，苹果为我们提供了它的子类&lt;a href=&quot;https://developer.apple.com/documentation/arkit/arworldtrackingsessionconfiguration&quot;&gt;ARWorldTrackingSessionConfiguration&lt;/a&gt;来便于使用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-0176e0636dd1fdf9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;ARSessionConfiguration&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-aa2f01e187dedee3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;ARWorldTrackingSessionConfiguration&quot; /&gt;&lt;/p&gt;

&lt;p&gt;细心的朋友可以看到文档中有个isSupported方法应该就是为什么ARKit要求A9芯片以上的原因了（猜的，不准勿喷），所以，&lt;strong&gt;&lt;em&gt;使用ARKit时别忘了做这个判断&lt;/em&gt;&lt;/strong&gt;。
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-635dfadf320ca5fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;isSupported&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ARWorldTrackingSessionConfiguration计算出相机在3D世界中的位置&lt;a href=&quot;https://developer.apple.com/documentation/arkit/ARFrame&quot;&gt;ARFrame&lt;/a&gt;后，将其交给ARSession去管理&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-9f5327bc022e762d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;ARFrame&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们理清了如何从相机捕捉图像到手机上显示3D场景，而虚拟的物体部分是由节点&lt;a href=&quot;https://developer.apple.com/documentation/scenekit/scnnode&quot;&gt;SCNNode&lt;/a&gt;构成的（节点构成了场景SCNScene,无数个场景构成了3D世界)&lt;/p&gt;

&lt;h2 id=&quot;arkit流程&quot;&gt;ARKit流程&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;ARSCNView加载SCNScene&lt;/li&gt;
  &lt;li&gt;SCNScene启动ARCamera捕捉图像&lt;/li&gt;
  &lt;li&gt;ARSCNView将SCNScene的数据交给Session&lt;/li&gt;
  &lt;li&gt;Session通过管理ARSessionConfiguration实现场景追踪并且返回一个ARFrame（添加3D物体模型的时候计算出3D物体模型相对于相机的真实的矩阵位置需要使用到）&lt;/li&gt;
  &lt;li&gt;往SCNScene中添加一个3D物体（SCNNode）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-990530b6eba9202a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;ARKit&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;本篇主要分析了ARKit的流程，让大家对ARKit的几个主要类以及职责先有一个初步了解。下一篇开始将以实例来一步步探索ARKit。&lt;/p&gt;
</description>
        <pubDate>Wed, 14 Jun 2017 17:38:27 +0800</pubDate>
        <link>http://localhost:4000/2017/06/14/ARKit%E6%B5%85%E6%9E%90%E7%AF%87/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/06/14/ARKit%E6%B5%85%E6%9E%90%E7%AF%87/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
  </channel>
</rss>
