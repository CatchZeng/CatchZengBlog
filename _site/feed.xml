<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CatchZeng Blog</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 24 Aug 2018 12:09:03 +0800</pubDate>
    <lastBuildDate>Fri, 24 Aug 2018 12:09:03 +0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>Learning OpenCV with iOS：图像模糊--非线性滤波</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;一前言&quot;&gt;一、前言&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://catchzeng.com/2018/08/08/Learning-OpenCV-with-iOS-图像模糊-线性滤波/&quot;&gt;上一篇&lt;/a&gt;我们讲解了OpenCV图像模糊中的线性滤波。本篇主要向大家介绍下非线性滤波。按惯例，先来看下效果图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-726907844b4bbb83.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;给铠祛痘&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-675364f9303d8c0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;阿珂美颜&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;二线性与非线性&quot;&gt;二、线性与非线性&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://catchzeng.com/2018/08/08/Learning-OpenCV-with-iOS-图像模糊-线性滤波/&quot;&gt;上一篇&lt;/a&gt;中使用“卷积算子计算都是线性操作，所以又叫线性滤波”简单描述了线性滤波概念。下面我们详细了解下&lt;strong&gt;线性滤波&lt;/strong&gt;与&lt;strong&gt;非线性滤波&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;数学角度&quot;&gt;数学角度&lt;/h3&gt;

&lt;p&gt;数学里，一般说的&lt;strong&gt;线性&lt;/strong&gt;，是说的线性映射：
线性 = &lt;strong&gt;齐次性&lt;/strong&gt; + &lt;strong&gt;可加性&lt;/strong&gt;
齐次性: f(ax)=af(x)
可加性: f(x+y)=f(x)+f(y)
&lt;strong&gt;非线性&lt;/strong&gt;就是这两条至少之一不成立.&lt;/p&gt;

&lt;h3 id=&quot;图像角度&quot;&gt;图像角度&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;线性滤波&lt;/strong&gt;：两个信号之和的响应和他们各自响应之和相等（&lt;strong&gt;可加性&lt;/strong&gt;）。换句话说，每个像素的输出值是一些输入像素的&lt;strong&gt;加权和&lt;/strong&gt;。
&lt;strong&gt;非线性滤波&lt;/strong&gt;：原始数据与滤波结果是一种&lt;strong&gt;逻辑关系&lt;/strong&gt;，即通过比较一定邻域内的灰度值大小来实现的。&lt;/p&gt;

&lt;p&gt;线性滤波器易于构造，并且易于从频率响应角度来进行分析。但是，线性滤波在处理&lt;strong&gt;散粒噪声&lt;/strong&gt;（即图像偶尔会出现很大的值）的时候，无法将噪声像素去除，只能转换为更为柔和但仍然可见的散粒。&lt;/p&gt;

&lt;p&gt;这时非线性滤波就该登场了。&lt;/p&gt;

&lt;h2 id=&quot;三非线性滤波&quot;&gt;三、非线性滤波&lt;/h2&gt;

&lt;h3 id=&quot;1中值滤波median-filter&quot;&gt;1、中值滤波（Median filter）&lt;/h3&gt;

&lt;p&gt;中值滤波是一种典型的非线性滤波技术，原理是用邻域像素灰度值的&lt;strong&gt;中值&lt;/strong&gt;来代替该像素点的灰度值。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-306a532247d4b325.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/309&quot; alt=&quot;滤波过程&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-23b6de3e1a30d3ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;中值滤波&quot; /&gt;&lt;/p&gt;

&lt;p&gt;滤波操作：在9 x 9上面有3 x 3的窗口，从左到右，从上到下移动。将3 x 3窗口内的灰度值按顺序排列，然后取中值代替中心的灰度值。&lt;/p&gt;

&lt;p&gt;中值滤波在一定的条件下可以克服常见线性滤波器，如均值滤波带来的图像细节模糊。而且对去除椒盐噪声非常有效，也常用于保护边缘信息, 保存边缘的特性使它在不希望出现边缘模糊的场合也很有用，是非常经典的平滑噪声处理方法。&lt;/p&gt;

&lt;h4 id=&quot;中值滤波与均值滤波比较&quot;&gt;中值滤波与均值滤波比较&lt;/h4&gt;

&lt;h5 id=&quot;中值滤波优势&quot;&gt;中值滤波优势&lt;/h5&gt;

&lt;p&gt;在均值滤波中，将&lt;strong&gt;噪声像素&lt;/strong&gt;与非噪声像素&lt;strong&gt;一并放入&lt;/strong&gt;平均计算中，影响了输出。在中值滤波中，噪声像素&lt;strong&gt;很难被选成中值&lt;/strong&gt;，所以几乎不会影响到输出。因此，中值滤波消除噪声和边缘保护方便都更胜一筹。&lt;/p&gt;

&lt;h5 id=&quot;中值滤波劣势&quot;&gt;中值滤波劣势&lt;/h5&gt;

&lt;p&gt;因为中值滤波要进行排序操作，所以处理的时间长，是均值滤波的5倍以上。&lt;/p&gt;

&lt;h4 id=&quot;给铠祛痘&quot;&gt;给铠祛痘&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-726907844b4bbb83.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;给铠祛痘&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OpenCV提供了中值滤波的API&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/** 
@param ksize aperture linear size; it must be odd and greater than 1, for example: 3, 5, 7 ...
 */
void medianBlur( InputArray src, OutputArray dst, int ksize );
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意：ksize必须是奇数&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ (UIImage *)medianBlur:(UIImage *)image size:(int)size {
    Mat src;
    UIImageToMat(image, src);
    
    int finalSize = size;
    if (size%2 == 0) {
        finalSize = size + 1;
    }
    Mat dst;
    medianBlur(src, dst, finalSize);
    
    UIImage* result = MatToUIImage(dst);
    
    return result;
}

class NolinearBlurViewController: UIViewController {

    @IBOutlet weak var resultImageView: UIImageView!
    let image = #imageLiteral(resourceName: &quot;ddkai&quot;)
    
    @IBAction func onSliderValueChanged(_ sender: UISlider) {
        resultImageView.image = OpenCV.medianBlur(self.image, size: Int32(Int(sender.value)))
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;一些思考&quot;&gt;一些思考&lt;/h4&gt;

&lt;h5 id=&quot;为何ksize必须是奇数&quot;&gt;为何ksize必须是奇数？&lt;/h5&gt;

&lt;p&gt;因为如果ksize是偶数，那么将像素灰度值从小到大排列后，必然就没有&lt;strong&gt;唯一的中值&lt;/strong&gt;。即使得出中值，那么又将那个作为中心像素呢？因此，中值滤波要求ksize必须是奇数。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-436b6cb8f29b527c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;ksize&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;中值滤波有什么不适合的场景&quot;&gt;中值滤波有什么不适合的场景？&lt;/h4&gt;

&lt;p&gt;对一些&lt;strong&gt;细节多&lt;/strong&gt;，特别是&lt;strong&gt;线、尖顶&lt;/strong&gt;等细节多的图像不宜采用中值滤波。因为中值滤波会将这些细节也模糊掉。&lt;/p&gt;

&lt;h3 id=&quot;2双边滤波bilateral-filter&quot;&gt;2、双边滤波（Bilateral filter）&lt;/h3&gt;

&lt;h4 id=&quot;空间域像素值域&quot;&gt;空间域&amp;amp;像素值域&lt;/h4&gt;

&lt;p&gt;对于图像滤波来说，图像在&lt;strong&gt;空间中&lt;/strong&gt;变化缓慢，因此&lt;strong&gt;相邻的像素点会更相近&lt;/strong&gt;。但是这个假设在图像的&lt;strong&gt;边缘处&lt;/strong&gt;变得不成立。如果在边缘处也用这种思路来进行滤波的话，即认为相邻相近，则得到的结果必然会&lt;strong&gt;模糊掉边缘&lt;/strong&gt;。因为边缘两侧的点的像素值差别很大，所以权重还需考虑像素值。&lt;/p&gt;

&lt;p&gt;因此，滤波不但要考虑&lt;strong&gt;空间域&lt;/strong&gt;（以下简称空域），还需要考虑&lt;strong&gt;像素值域&lt;/strong&gt;（以下简称值域）。&lt;/p&gt;

&lt;h4 id=&quot;滤波分析&quot;&gt;滤波分析&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;均值滤波无法克服&lt;strong&gt;边缘像素信息丢失&lt;/strong&gt;。原因是均值滤波是基于&lt;strong&gt;平均权重&lt;/strong&gt;，没有考虑&lt;strong&gt;空域&lt;/strong&gt;和&lt;strong&gt;值域&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;高斯模糊部分克服了该缺陷（考虑了&lt;strong&gt;空域&lt;/strong&gt;），但是无法完全避免，因为&lt;strong&gt;没有考虑像素值的不同&lt;/strong&gt;，即没有考虑&lt;strong&gt;值域&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;双边滤波&quot;&gt;双边滤波&lt;/h4&gt;

&lt;p&gt;双边滤波是一种非线性的滤波方法，具有&lt;strong&gt;保边去噪&lt;/strong&gt;的效果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-2efa467fe7d31a4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;双边滤波&quot; /&gt;&lt;/p&gt;

&lt;p&gt;双边滤波的基本思路是同时考虑像素点的&lt;strong&gt;空域&lt;/strong&gt;和&lt;strong&gt;值域&lt;/strong&gt;。
双边滤波在考虑&lt;strong&gt;值域&lt;/strong&gt;时，利用像素点的值的大小进行补充，因为边缘两侧的点的像素值差别很大，因此会使得其加权的时候权重具有很大的差别，从而使得只考虑自己所属的一边的邻域。可以理解成先根据像素值对要用来进行滤波的邻域做一个&lt;strong&gt;分割或分类&lt;/strong&gt;，再给该点所属的类别相对较高的权重，然后进行&lt;strong&gt;邻域加权求和&lt;/strong&gt;，得到最终结果。&lt;/p&gt;

&lt;p&gt;在双边滤波器中，输出像素的值依赖于邻域像素值的加权值组合：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-073bcd78d1de5de6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;双边滤波&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;w(i,j,k,l): 加权系数, 取决于空域核和值域核的乘积。&lt;/li&gt;
  &lt;li&gt;(i,j)，(k,l): 指两个像素点的坐标。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;空域核：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-1b1b874780ab2317.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;空域核&quot; /&gt;&lt;/p&gt;

&lt;p&gt;值域核：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-175f62622c5d4770.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;值域核&quot; /&gt;&lt;/p&gt;

&lt;p&gt;双边滤波权重函数：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-0339aafde3fc3167.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;双边滤波权重函数&quot; /&gt;&lt;/p&gt;

&lt;p&gt;空域核（d）函数是根据&lt;strong&gt;像素距离&lt;/strong&gt;选择权重，距离越近权重越大。
值域核（r）函数则是根据&lt;strong&gt;像素的差异&lt;/strong&gt;来分配权值。如果两个像素值越接近，即使相距较远，也比差异大而距离近的像素点权重大。这点使得边缘（即相距近但差异大的像素点）的特性得以保留。&lt;/p&gt;

&lt;h4 id=&quot;阿珂美颜&quot;&gt;阿珂美颜&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-7326e1aa4b39d860.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;阿珂美颜&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-675364f9303d8c0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;阿珂美颜&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OpenCV提供了双边滤波的API&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/** 
_Sigma values_: 为了简单起见，可以将2 Sigma值设置为相同。
如果它们很小（&amp;lt;10）滤波器不会有太大的效果。
如果它们很大（＞150），它们将具有非常强烈的效果，使图像看起来“卡通化”。

_Filter size_: 大的滤波器（D&amp;gt; 5）非常慢，因此建议在进行实时处理应用程序时使用d＝5。对于需要重噪声过滤的离线应用程序可以试下d＝9。

@param src : 即源图像，需要为8位或者浮点型单通道、三通道的图像。
@param d：过滤过程中每个像素邻域的直径。如果这个值我们设其为非正数，那么OpenCV会从第五个参数sigmaSpace来计算出它来。
@param sigmaColor ：颜色空间滤波器的sigma值。这个参数的值越大，就表明该像素邻域内有更宽广的颜色会被混合到一起，产生较大的半相等颜色区域。
@param sigmaSpace：坐标空间中滤波器的sigma值，坐标空间的标注方差。
他的数值越大，意味着越远的像素会相互影响，从而使更大的区域足够相似的颜色获取相同的颜色。
当d&amp;gt;0，d指定了邻域大小且与sigmaSpace无关。否则，d正比于sigmaSpace。
 */ 
void bilateralFilter( InputArray src, OutputArray dst, int d,
                                   double sigmaColor, double sigmaSpace,
                                   int borderType = BORDER_DEFAULT );
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ (UIImage *)bilateralFilter:(UIImage *)image
                           d:(int)d
                  sigmaColor:(double)sigmaColor
                  sigmaSpace:(double)sigmaSpace {
    Mat src;
    UIImageToMat(image, src);
    
    if (src.channels() == 4) {
        cvtColor(src, src, CV_BGRA2BGR);
    }
    
    Mat dst;
    bilateralFilter(src, dst, d, sigmaColor, sigmaSpace);
    
    UIImage* result = MatToUIImage(dst);
    
    return result;
}


class BilateralFilterViewController: UIViewController {

    @IBOutlet weak var imageView: UIImageView!
    @IBOutlet weak var blurImageView: UIImageView!
    @IBOutlet weak var gBlurImageView: UIImageView!
    @IBOutlet weak var resultImageView: UIImageView!
    
    private var d: Int32 = 1
    private var color: Double = 1.0
    private var space: Double = 1.0
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        blurImageView.image = OpenCV.blur(imageView.image, sizeX: 3, sizeY: 3)
        gBlurImageView.image = OpenCV.gaussianblur(imageView.image, sizeX: 3, sizeY: 3)
    }

    @IBAction func onSliderValueChanged(_ sender: UISlider) {
        d = Int32(sender.value)
        transform()
    }
    
    @IBAction func onSlider2ValueChanged(_ sender: UISlider) {
        color = Double(sender.value)
        transform()
    }
    
    @IBAction func onSlider3ValueChanged(_ sender: UISlider) {
        space = Double(sender.value)
        transform()
    }
    
    private func transform() {
        resultImageView.image = OpenCV.bilateralFilter(imageView.image, d: d, sigmaColor: color, sigmaSpace: space)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;小小经验&quot;&gt;小小经验&lt;/h4&gt;

&lt;h5 id=&quot;如何选取合适的参数&quot;&gt;如何选取合适的参数？&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;使用OpenCV API时可以先看下&lt;strong&gt;API的注释文档&lt;/strong&gt;，比如在双边滤波的注释文档中对Sigma的取值做了说明。这些值一般都是&lt;strong&gt;经验值&lt;/strong&gt;。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_Sigma values_: 为了简单起见，可以将2 Sigma值设置为相同。
如果它们很小（&amp;lt;10）滤波器不会有太大的效果。
如果它们很大（＞150），它们将具有非常强烈的效果，使图像看起来“卡通化”。
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用&lt;strong&gt;滑竿&lt;/strong&gt;帮助快速调节参数，观察效果。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;从&lt;strong&gt;原理公式&lt;/strong&gt;出发，假定一些参数，观察其趋势，掌握规律。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;四小结&quot;&gt;四、小结&lt;/h2&gt;

&lt;p&gt;本篇主要介绍了非线性滤波的概念，并通过例子讲解了中值滤波和双边滤波。 非线性滤波的应用广泛，不但要掌握API的调用，更要明白各种滤波的原理，这样才能创造个性化的滤波，也许有一天你就创造出自己的美颜滤镜了。 今天就到这了，有疑问的朋友可以给我留言，咱们下篇见！&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Aug 2018 17:38:27 +0800</pubDate>
        <link>http://localhost:4000/2018/08/22/Learning-OpenCV-with-iOS-%E5%9B%BE%E5%83%8F%E6%A8%A1%E7%B3%8A-%E9%9D%9E%E7%BA%BF%E6%80%A7%E6%BB%A4%E6%B3%A2/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/08/22/Learning-OpenCV-with-iOS-%E5%9B%BE%E5%83%8F%E6%A8%A1%E7%B3%8A-%E9%9D%9E%E7%BA%BF%E6%80%A7%E6%BB%A4%E6%B3%A2/</guid>
        
        <category>OpenCV</category>
        
        
      </item>
    
      <item>
        <title>Learning OpenCV with iOS：图像模糊--线性滤波</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;一前言&quot;&gt;一、前言&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://catchzeng.com/2018/07/02/Learning-OpenCV-with-iOS-图像亮度和对比度/&quot;&gt;上一篇&lt;/a&gt;我们讲解了OpenCV的图像亮度和对比度调整。本篇主要向大家介绍下图像模糊。按惯例，先来一张效果图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-9f839b59fc174f06.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;铠玩模糊&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;二模糊&quot;&gt;二、模糊&lt;/h2&gt;

&lt;p&gt;所谓&lt;strong&gt;模糊&lt;/strong&gt;，可以先简单理解为每一个像素都取周边像素的平均值。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-421e3e62d8da7f52.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;模糊&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图中，2是中间点像素值，周边像素都是1。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-6f0f0a5da441812d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;模糊&quot; /&gt;&lt;/p&gt;

&lt;p&gt;中间点取周围点的平均值，就会变成1。在数值上叫&lt;strong&gt;平滑&lt;/strong&gt;。在图形上，就产生了&lt;strong&gt;模糊&lt;/strong&gt;效果，也就是中间点失去了细节。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-bc2ce865b85b330b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;模糊&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;三图像模糊&quot;&gt;三、图像模糊&lt;/h2&gt;

&lt;p&gt;图像模糊是opencv常见的操作，使用模糊操作的原因是为了给图像&lt;strong&gt;预处理&lt;/strong&gt;时降低噪声影响。
Smooth和Blur是opencv图像模糊的API，其背后的原理其实是数学的卷积操作&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-10def553303932ed.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;卷积&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中权重核h(k,l) 为“滤波系数”。上面的式子可以简记为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-d3247f1ba60ce51f.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;卷积&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通常这些&lt;strong&gt;卷积算子&lt;/strong&gt;计算都是线性操作，所以又叫&lt;strong&gt;线性滤波&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;四线性滤波&quot;&gt;四、线性滤波&lt;/h2&gt;

&lt;h3 id=&quot;1均值滤波&quot;&gt;1、均值滤波&lt;/h3&gt;

&lt;p&gt;均值滤波是典型的线性滤波算法，它是指在图像上对目标像素给一个&lt;strong&gt;模板&lt;/strong&gt;，该模板包括了其周围的临近像素，再用模板中的全体像素的平均值来代替原来像素值。&lt;/p&gt;

&lt;p&gt;还记得&lt;a href=&quot;http://catchzeng.com/2018/06/14/Learning-OpenCV-with-iOS-掩膜操作/&quot;&gt;第二篇&lt;/a&gt;里所讲&lt;strong&gt;掩膜操作&lt;/strong&gt;吧，均值滤波的过程跟掩膜操作极其相似。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-306a532247d4b325.gif&quot; alt=&quot;均值滤波&quot; /&gt;&lt;/p&gt;

&lt;p&gt;滤波操作：在9x9上面有3x3的窗口，从左到右，从上到下移动，白色的每个像素点值之和取平均值赋给中心红色像素作为它处理之后的像素值。其中，&lt;strong&gt;模板&lt;/strong&gt;就是3x3的窗口，红色格子为&lt;strong&gt;目标像素&lt;/strong&gt;，白色格子为周围的&lt;strong&gt;临近像素&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;此类操作被称为&lt;strong&gt;卷积计算&lt;/strong&gt;，而模板和kernel就是卷积计算中的&lt;strong&gt;卷积算子&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;opencv提供了均值滤波（模糊）的API&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/** 
@param src 输入图像
@param dst 输出图像
@param ksize 模糊kernel大小
@param anchor 锚点; 默认值为Point(-1,-1) ，表示在锚点在kernel的中心
@param borderType 查看#BorderTypes
 */
blur( InputArray src, OutputArray dst,
                        Size ksize, Point anchor = Point(-1,-1),
                        int borderType = BORDER_DEFAULT );
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;铠玩模糊&quot;&gt;铠玩模糊&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-9f839b59fc174f06.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;铠玩模糊&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ (UIImage *)blur:(UIImage *)image sizeX:(int)sizeX sizeY:(int)sizeY {
    Mat src;
    UIImageToMat(image, src);
    
    Mat dst;
    blur(src, dst, cv::Size(sizeX, sizeY));
    
    UIImage* result = MatToUIImage(dst);
    
    return result;
}

class BlurViewController: UIViewController {

    @IBOutlet weak var imageView: UIImageView!
    @IBOutlet weak var resultImageView: UIImageView!
    
    private var sizeX: Int32 = 3
    private var sizeY: Int32 = 3
    
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    @IBAction func onSliderValueChanged(_ sender: UISlider) {
        sizeX = Int32(sender.value)
        transform()
    }
    
    @IBAction func onSlider2ValueChanged(_ sender: UISlider) {
        sizeY = Int32(sender.value)
        transform()
    }
    
    private func transform() {
        let image = OpenCV.blur(imageView.image, sizeX: sizeX, sizeY: sizeY)
        resultImageView.image = image
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;一些思考&quot;&gt;一些思考&lt;/h4&gt;

&lt;h5 id=&quot;滤波操作为何能将图像模糊&quot;&gt;滤波操作为何能将图像模糊？&lt;/h5&gt;

&lt;p&gt;滤波操作其实是用周围的像素平均值作为目标像素的值，经过这样的处理后其实就是整个图像像素值差距缩小。差距缩小了自然就比较没有辨识度了，也就是模糊了。&lt;/p&gt;

&lt;h5 id=&quot;为何在铠玩模糊中只改变size的x大小会让铠在x轴方向模糊&quot;&gt;为何在铠玩模糊中，只改变Size的x大小会让铠在x轴方向模糊？&lt;/h5&gt;

&lt;p&gt;这题就当讨论题吧，有兴趣的朋友可以在文章的评论处讨论。
提示：改变x的值其实就是改变kernel的形态，单独将x增加，就相当于kernel的形态变成宽度大于高度的长方形。&lt;/p&gt;

&lt;h5 id=&quot;均值模糊有没有什么问题&quot;&gt;均值模糊有没有什么问题？&lt;/h5&gt;

&lt;p&gt;我们知道图像都是&lt;strong&gt;连续的&lt;/strong&gt;，&lt;strong&gt;越靠近的点关系越密切，越远离的点关系越疏远&lt;/strong&gt;，均值模糊只是简单的取平均，没有分配&lt;strong&gt;权重&lt;/strong&gt;，肯定存在不合理之处。相比之下，加权平均更合理，距离越近的点权重越大，距离越远的点权重越小。
下面我们就来看下带权重的高斯滤波。&lt;/p&gt;

&lt;h3 id=&quot;2高斯滤波&quot;&gt;2、高斯滤波&lt;/h3&gt;

&lt;h4 id=&quot;正态分布&quot;&gt;正态分布&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-a883c94a4950b72e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;正态分布&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图，正态分布是一种钟摆形曲线，越接近中心，取值越大，越远离中心，取值越小。
计算平均值的时候，我们只需要将中心点作为原点，其他点按照其在正态曲线上的位置，分配权重，就可以得到一个加权平均值。&lt;/p&gt;

&lt;h4 id=&quot;高斯函数&quot;&gt;高斯函数&lt;/h4&gt;

&lt;h5 id=&quot;一维函数&quot;&gt;一维函数&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-e3a63c466aaf2b73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;一维高斯函数&quot; /&gt;
σ：标准差，在这里又叫做高斯半径。
σ2：方差。
f(x)：概率
μ：均值，即期望。&lt;/p&gt;

&lt;p&gt;在计算平均值的时候，中心点就是原点，所以μ等于0。可得简化后的函数：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-327146860c1bcafa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;简化后的函数&quot; /&gt;&lt;/p&gt;

&lt;p&gt;根据一维函数，可以推导得到二维函数：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-4428118897919429.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;二维高斯函数&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图像是二维的，所以通常处理图像时，我们使用二维高斯函数。&lt;/p&gt;

&lt;h5 id=&quot;计算例子&quot;&gt;计算例子&lt;/h5&gt;

&lt;p&gt;假定中心点的坐标是（0,0），那么距离它最近的8个点的坐标如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-0f621d9ee8289b44.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;坐标&quot; /&gt;&lt;/p&gt;

&lt;p&gt;假设σ=1.5，则权重矩阵如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-df79b4cfe9e67eaf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;权重矩阵&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这9个点的权重总和等于0.4787147，归一化后得到最终的权重矩阵：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-b10892137ebdd773.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;归一化&quot; /&gt;&lt;/p&gt;

&lt;p&gt;假设现有图像矩阵如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-fe3faf6c3a2429a1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图像矩阵.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;与权重相乘后得到的矩阵如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-40e93558114e798a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;矩阵&quot; /&gt;&lt;/p&gt;

&lt;p&gt;将这9个值相加就是中心点的最终值：13.9401236。而通过均值滤波得到的结果是13.5。&lt;/p&gt;

&lt;h4 id=&quot;均值与高斯哪家强&quot;&gt;均值与高斯哪家强&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@param sigmaX Gaussian kernel standard deviation in X direction.
@param sigmaY Gaussian kernel standard deviation in Y direction; if sigmaY is zero, it is set to be
equal to sigmaX, if both sigmas are zeros, they are computed from ksize.width and ksize.height,
respectively (see #getGaussianKernel for details); to fully control the result regardless of
possible future modifications of all this semantics, it is recommended to specify all of ksize,
sigmaX, and sigmaY.
@param borderType pixel extrapolation method, see #BorderTypes

@sa  sepFilter2D, filter2D, blur, boxFilter, bilateralFilter, medianBlur
 */
CV_EXPORTS_W void GaussianBlur( InputArray src, OutputArray dst, Size ksize,
                                double sigmaX, double sigmaY = 0,
                                int borderType = BORDER_DEFAULT );
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ (UIImage *)gaussianblur:(UIImage *)image sizeX:(int)sizeX sizeY:(int)sizeY {
    Mat src;
    UIImageToMat(image, src);
    
    Mat dst;
    GaussianBlur(src, dst, cv::Size(sizeX, sizeY), 11);
    
    UIImage* result = MatToUIImage(dst);
    
    return result;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-fe8d7a23f71b0c53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;均值&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-702ca4a10ec28fed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;高斯&quot; /&gt;&lt;/p&gt;

&lt;p&gt;仔细观看可以看到，高斯模糊图像的轮廓较均值的清晰些，没有那么“模糊”。&lt;/p&gt;

&lt;h2 id=&quot;五小结&quot;&gt;五、小结&lt;/h2&gt;

&lt;p&gt;本篇主要介绍了图像模糊的概念，并通过例子讲解了均值模糊和高斯模糊。模糊经常在图像预处理降时使用到，需要好好掌握其原理，以便于应对不同情况。今天就到这了，有疑问的朋友可以给我留言，咱们下篇见！&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Aug 2018 17:38:27 +0800</pubDate>
        <link>http://localhost:4000/2018/08/08/Learning-OpenCV-with-iOS-%E5%9B%BE%E5%83%8F%E6%A8%A1%E7%B3%8A-%E7%BA%BF%E6%80%A7%E6%BB%A4%E6%B3%A2/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/08/08/Learning-OpenCV-with-iOS-%E5%9B%BE%E5%83%8F%E6%A8%A1%E7%B3%8A-%E7%BA%BF%E6%80%A7%E6%BB%A4%E6%B3%A2/</guid>
        
        <category>OpenCV</category>
        
        
      </item>
    
      <item>
        <title>Learning OpenCV with iOS：图像亮度和对比度</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;一前言&quot;&gt;一、前言&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://catchzeng.com/2018/06/24/Learning-OpenCV-with-iOS-图像混合与ROI/&quot;&gt;上一篇&lt;/a&gt;我们讲解了OpenCV的图像混合与ROI。本篇主要向大家介绍下图像变换的调整亮度和对比度。按惯例，先来一张效果图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-0e4ab78c269f66e4.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;魔铠变身&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;二图像变换&quot;&gt;二、图像变换&lt;/h2&gt;

&lt;h4 id=&quot;算子&quot;&gt;算子&lt;/h4&gt;
&lt;p&gt;一般的图像处理算子都是一个函数，它接受一个或多个输入图像，并产生输出图像。&lt;/p&gt;
&lt;h6 id=&quot;单输入&quot;&gt;单输入&lt;/h6&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;g(x) = h(f(x))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;多输入&quot;&gt;多输入&lt;/h6&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;g(x) = h(f0(x)......fn(x))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;根据算子的不同，图像变换分为两大类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;像素变换 - 点操作&lt;/li&gt;
  &lt;li&gt;邻域操作 - 区域&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;像素变换&quot;&gt;像素变换&lt;/h4&gt;

&lt;p&gt;这类变换操作的是点。根据输入像素值（有时可加上某些全局信息或参数）计算相应的输出像素值。
这类算子包括亮度和对比度调整 ，以及颜色校正和变换。&lt;/p&gt;

&lt;h4 id=&quot;邻域操作&quot;&gt;邻域操作&lt;/h4&gt;

&lt;p&gt;这类变换操作的是区域（大块的，非点操作）。
这类算子包括卷积、特征提取、梯度计算、模糊等。
后续文章中我们将一一讲解，这里不再赘述。&lt;/p&gt;

&lt;h2 id=&quot;三调整图像亮度和对比度&quot;&gt;三、调整图像亮度和对比度&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;g(i, j) = αf(i,j) + β  其中α&amp;gt;0，β是增益变量
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;f(i,j) 表示源图像像素&lt;/li&gt;
  &lt;li&gt;g(i,j) 表示输出图像像素&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;一些理解&quot;&gt;一些理解&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;亮度越亮其实看起来越“白”，在图像处理中就是像素值越靠近255。β变量是个增益变量，β越大，像素值就越靠近255，自然就提高了亮度。所以，&lt;strong&gt;β常常被用来控制图像的亮度&lt;/strong&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;α对像素的操作是乘法，乘法会”扩大差距“，打个比方：1x10 = 10, 2x10 = 20。改变α会将像素值的差距扩大，也就是改变了对比度。所以，&lt;strong&gt;α常常被用来控制图像的对比度&lt;/strong&gt;。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;魔铠变身&quot;&gt;魔铠变身&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-0e4ab78c269f66e4.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;魔铠变身&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+(UIImage *)transform:(UIImage *)image alpha:(double)alpha beta:(double)beta {
    Mat src;
    UIImageToMat(image, src);
    
    Mat dst = Mat(src.size(), src.type());
    
    int rows = src.rows;
    int cols = src.cols;
    Mat m;
    src.convertTo(m, CV_32F);
    for (int row = 0; row &amp;lt; rows; row++) {
        for (int col = 0; col &amp;lt; cols; col++) {
            if(src.channels() == 1) {//单通道
                float v = m.at&amp;lt;Vec3f&amp;gt;(row, col)[0];
                dst.at&amp;lt;uchar&amp;gt;(row, col) = saturate_cast&amp;lt;uchar&amp;gt;(v*alpha + beta);
            } else if (src.channels() == 3) { //3通道
                for (int i=0; i&amp;lt; src.channels(); i++) {
                    float v = m.at&amp;lt;Vec3f&amp;gt;(row, col)[i];
                    dst.at&amp;lt;Vec3b&amp;gt;(row, col)[i] = saturate_cast&amp;lt;uchar&amp;gt;(v*alpha + beta);
                }
            }  else if (src.channels() == 4) { //4通道
                for (int i=0; i&amp;lt; src.channels(); i++) {
                    float v = m.at&amp;lt;Vec4f&amp;gt;(row, col)[i];
                    dst.at&amp;lt;Vec4b&amp;gt;(row, col)[i] = saturate_cast&amp;lt;uchar&amp;gt;(v*alpha + beta);
                }
            }
        }
    }
    UIImage* result = MatToUIImage(dst);
    return result;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h6 id=&quot;注&quot;&gt;注：&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;做像素点操作时应当注意数据类型的转换&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    src.convertTo(m, CV_32F);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;图像的通道多样，处理图片时需要做多通道的处理&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(src.channels() == 1) {//单通道
    ...
} else if (src.channels() == 3) { //3通道
    ...
}  else if (src.channels() == 4) { //4通道
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;四小结&quot;&gt;四、小结&lt;/h2&gt;

&lt;p&gt;本篇主要介绍了图像变换的概念，并通过例子讲解了亮度和对比度的调整。本篇的内容相对简单，但是对像素点的操作是基本功，特别是在实现自定义算法时，需要好好掌握。在今后的学习中亮度和对比度的调整是很多图像处理的前期工作，也需要理解透彻。今天就到这了，有疑问的朋友可以给我留言，see you later!&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Jul 2018 17:38:27 +0800</pubDate>
        <link>http://localhost:4000/2018/07/02/Learning-OpenCV-with-iOS-%E5%9B%BE%E5%83%8F%E4%BA%AE%E5%BA%A6%E5%92%8C%E5%AF%B9%E6%AF%94%E5%BA%A6/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/07/02/Learning-OpenCV-with-iOS-%E5%9B%BE%E5%83%8F%E4%BA%AE%E5%BA%A6%E5%92%8C%E5%AF%B9%E6%AF%94%E5%BA%A6/</guid>
        
        <category>OpenCV</category>
        
        
      </item>
    
      <item>
        <title>Learning OpenCV with iOS：图像混合与ROI</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;一前言&quot;&gt;一、前言&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://catchzeng.com/2018/06/14/Learning-OpenCV-with-iOS-掩膜操作/&quot;&gt;上一篇&lt;/a&gt;我们讲解了OpenCV的掩膜操作。本篇主要向大家介绍下图像处理中的图像混合。按惯例，先来一张效果图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-7fa4159088937474.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;铠与Logo&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;二图片相加&quot;&gt;二、图片相加&lt;/h2&gt;

&lt;p&gt;要叠加两张图片，可以将Mat直接相加，相加两幅图片的形状（高度/宽度/通道数）必须相同。但这样的效果不一定是你想要的。我们来看一个例子。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    Mat src;
    Mat src2;
    UIImageToMat(image, src);
    UIImageToMat(image2, src2);
    
    Mat dst;
    dst = src + src2;
    
    UIImage* result = MatToUIImage(dst);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-b142c05656998fc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图片相加&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;三线性混合&quot;&gt;三、线性混合&lt;/h2&gt;
&lt;p&gt;图像混合其实也是一种图片相加的操作，只不过两幅图片的&lt;strong&gt;权重&lt;/strong&gt;不一样。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;g(x) = α*f0(x) + β*f1(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;OpenCV处理图像混合主要是根据线性混合函数，通过在0到1范围内改变α的值，使两幅图像或者视频产生在时间上的画面叠化得效果。实际上α和β的和不一定为1，只是为了防止图像出现过饱和的现象。&lt;/p&gt;

&lt;p&gt;OpenCV的&lt;strong&gt;addWeighted&lt;/strong&gt;函数便是对应线性混合操作。这个函数的作用是，计算两个图像的&lt;strong&gt;加权和&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void addWeighted(InputArray src1, double alpha, InputArray src2, double beta, double gamma, OutputArray dst, int dtype=-1);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;src1：需要加权的第一个数组，常常填一个Mat对象。&lt;/li&gt;
  &lt;li&gt;alpha：第一个数组的权重值，0~1之间。&lt;/li&gt;
  &lt;li&gt;src2：第二个数组，它需要和第一个数组拥有相同的尺寸和通道数。&lt;/li&gt;
  &lt;li&gt;beta：第二个数组的权重值，一般为1-alpha。&lt;/li&gt;
  &lt;li&gt;gamma：一个加到权重总和上的标量值。&lt;/li&gt;
  &lt;li&gt;dst：输出的数组，它和输入的两个数组拥有相同的尺寸和通道数。&lt;/li&gt;
  &lt;li&gt;dtype：输出阵列的可选深度，有默认值-1；当两个输入数组具有相同的深度时，这个参数设置为-1（默认值），即等同于src1.depth()。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;当后羿遇到阿珂&quot;&gt;当后羿遇到阿珂&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-bc97e432a0639f99.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;图像混合&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ (UIImage *)addWeighted:(UIImage *)image image2:(UIImage *)image2 alpha:(double)alpha gamma:(double)gamma {
    Mat src;
    Mat src2;
    UIImageToMat(image, src);
    UIImageToMat(image2, src2);
    
    Mat dst;
    addWeighted(src, alpha, src2, gamma, 0, dst);
    
    UIImage* result = MatToUIImage(dst);
    
    return result;
}

class MixViewController: UIViewController {

    @IBOutlet weak var resultImageView: UIImageView!
    private let ake = UIImage(named: &quot;ake&quot;)
    private let houyi = UIImage(named: &quot;houyi&quot;)
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        resultImageView.image = OpenCV.addWeighted(ake, image2: houyi, alpha: 0.5, gamma: 0.5)
    }
    
    @IBAction func onSliderValueChanged(_ sender: UISlider) {
        let alpha = Double(sender.value)
        resultImageView.image = OpenCV.addWeighted(ake, image2: houyi, alpha: alpha, gamma: (1.0 - alpha))
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;一些思考&quot;&gt;一些思考&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;为何直接的图像相加效果较差，而线性混合后的效果较好？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以这样简单理解：像素值范围为0~255，两张图的Mat直接相加，就是每个像素点的值相加，这样容易出现像素值较大的像素，像素“越大越白”，这样就出现了图像过曝的现象。而线性混合则是加上了权重，保证了像素值不至于过大，这样就不会出现过曝现象。以公式来说明就是&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//相加
g(x) = 1*f0(x) + 1*f1(x)

//线性混合
g(x) = α*f0(x) + β*f1(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;即&lt;strong&gt;相加操作相当于α和β都等于1的线性混合&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
class MixViewController: UIViewController {

    @IBOutlet weak var resultImageView: UIImageView!
    private let ake = UIImage(named: &quot;ake&quot;)
    private let houyi = UIImage(named: &quot;houyi&quot;)
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        resultImageView.image = OpenCV.addWeighted(ake, image2: houyi, alpha: 1, gamma: 1)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-793aa9ae64bd9820.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;α和β都等于1&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;addWeighted方法要求src1和src2的尺寸和通道数相同，若是不同如何混合？
实现这个需要先熟悉图像处理另一个重要的概念–ROI。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;四感兴趣区域roiregion-of-interest&quot;&gt;四、感兴趣区域ROI(Region Of Interest)&lt;/h2&gt;

&lt;p&gt;在图像处理领域，我们常常需要设置ROI，来专注或者简化我们的工作过程 。也就是从图像中选择的一个图像区域，这个区域是我们图像分析所关注的重点。我们圈定这个区域，以便进行进一步处理。而且，使用ROI指定我们想读入的目标，可以减少处理时间，增加精度，给图像处理来带不小的便利。&lt;/p&gt;

&lt;p&gt;定义ROI区域有两种方法，第一种是使用cv:Rect指定矩形区域&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Mat imageROI=image(Rect(500,250,logo.cols,logo.rows));  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;另一种定义ROI的方式是指定感兴趣行或列的范围（Range）&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Mat imageROI=srcImage3(Range(250,250+logoImage.rows),Range(200,200+logoImage.cols));  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下面我们来看一个实例，展示如何利用ROI将一幅图加到另一幅图的指定位置。&lt;/p&gt;

&lt;h4 id=&quot;铠与logo&quot;&gt;铠与Logo&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-7fa4159088937474.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;铠与Logo&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ (UIImage *)add:(UIImage *)image alphaExist:(BOOL)alphaExist on:(UIImage *)anotherImage atPosition:(CGPoint)position alpha:(CGFloat)alpha beta:(CGFloat)beta gamma:(CGFloat)gamma {
    Mat src;
    Mat dst;
    UIImageToMat(anotherImage, src);
    UIImageToMat(image, dst, alphaExist);
    
    //ROI
    short x = position.x;
    short y = position.y;
    Mat imageRoi;
    imageRoi = src(cv::Rect(x, y, dst.cols, dst.rows));
    
    //add image
    addWeighted(imageRoi, alpha, dst, beta, gamma, imageRoi);
    
    UIImage* result = MatToUIImage(src);
    
    return result;
}

class ROIViewController: UIViewController {

    @IBOutlet weak var resultImageView: UIImageView!
    private let logo = #imageLiteral(resourceName: &quot;logo&quot;)
    private let sayHello = #imageLiteral(resourceName: &quot;sayHello&quot;)
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        resultImageView.image = OpenCV.add(#imageLiteral(resourceName: &quot;logo&quot;), alphaExist: true, on: #imageLiteral(resourceName: &quot;sayHello&quot;), atPosition: CGPoint(x: 330, y: 0), alpha: 1.0, beta: 1.0, gamma: 0)
    }
    
    @IBAction func onSliderValueChanged(_ sender: UISlider) {
        resultImageView.image = OpenCV.add(#imageLiteral(resourceName: &quot;logo&quot;), alphaExist: true, on: #imageLiteral(resourceName: &quot;sayHello&quot;), atPosition: CGPoint(x: 330, y: 0), alpha: 1.0, beta: CGFloat(sender.value), gamma: 0)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在UIImage转换成Mat的时候，若有透明度记得将最后一个参数alphaExist设置为true&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; UIImageToMat(image, dst, alphaExist);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;在addWeighted的时候alpha表示第一个Mat的权重，beta表示第二个Mat的权重。在实例中，Logo图片其实是第二个Mat，所以对应的参数是beta。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    Mat imageRoi;
    imageRoi = src(cv::Rect(x, y, dst.cols, dst.rows));
    
    //add image
    addWeighted(imageRoi, alpha, dst, beta, gamma, imageRoi);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;五小结&quot;&gt;五、小结&lt;/h2&gt;

&lt;p&gt;本篇主要介绍了图像混合的概念，并通过例子讲解了线性混合的实现和ROI的应用。在今后的学习中ROI的使用度较高，需要好好掌握。ROI其实是“分而治之”思想在图像处理中的应用。好了，今天就到这了。有疑问的朋友可以给我留言，see you later!&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Jun 2018 17:38:27 +0800</pubDate>
        <link>http://localhost:4000/2018/06/24/Learning-OpenCV-with-iOS-%E5%9B%BE%E5%83%8F%E6%B7%B7%E5%90%88%E4%B8%8EROI/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/24/Learning-OpenCV-with-iOS-%E5%9B%BE%E5%83%8F%E6%B7%B7%E5%90%88%E4%B8%8EROI/</guid>
        
        <category>OpenCV</category>
        
        
      </item>
    
      <item>
        <title>Learning OpenCV with iOS：掩膜操作</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;一前言&quot;&gt;一、前言&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://catchzeng.com/2018/06/12/Learning-OpenCV-with-iOS-Hello-OpenCV/&quot;&gt;上一篇&lt;/a&gt;我们简单讲解了OpenCV的概念和基础架构。本篇主要向大家介绍下图像处理中一个比较重要的概念 –  掩膜操作。开始前我们先看下利用矩阵掩膜操作来加强图像对比度的效果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-74296305be0931e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;增强对比度&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;二开胃菜-mat对象&quot;&gt;二、开胃菜-Mat对象&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-1bda24a84044ede2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Mat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们用眼睛看到的是图像，而计算机却不认识。于是，人们使用数值的形式来记录图像，比如用RGB值记录图像的每个点，以此来表示图像。就如上图，我们看到的是一辆车，而计算机“看到”的是一个包含图像值的矩阵。OpenCV的Mat对象对应的就是矩阵。Mat提供了许多便捷的API来创建、操作矩阵。&lt;/p&gt;

&lt;h4 id=&quot;mat基础操作&quot;&gt;Mat基础操作&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Mat image = Mat(240, 320, CV_8UC3);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;第一个参数是rows，该矩阵的行数；第二个参数是cols，该矩阵的列数；第三个参数是该矩阵元素的类型。这句话表示创建一个大小为240×320的矩阵，里面的元素为8位unsigned型，通道数(channel)有3个。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;image.create(480, 640, CV_8UC3);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;分配（或重新分配）image矩阵，把大小设为480×640，类型设为CV8UC3。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Mat image = Mat(3, 3, CV_32F, Scalar(5));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;定义并初始化一个3×3的32bit浮点数矩阵，每个元素都设为5。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;uchar* ptr = image.ptr(row);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;指针操作，表示拿到image第row行的指针&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;uchar* output = image.ptr(row);
output[1] = value;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;利用指针修改图像，表示修改image第row行的第2个数据为value。&lt;/p&gt;

&lt;h4 id=&quot;mat常用成员介绍&quot;&gt;Mat常用成员介绍&lt;/h4&gt;
&lt;p&gt;1、data&lt;/p&gt;

&lt;p&gt;Mat对象中的一个指针，指向存放矩阵数据的内存(uchar* data)&lt;/p&gt;

&lt;p&gt;2、dims&lt;/p&gt;

&lt;p&gt;矩阵的维度，3&lt;em&gt;4的矩阵维度为2维，3&lt;/em&gt;4*5的矩阵维度为3维&lt;/p&gt;

&lt;p&gt;3、channels&lt;/p&gt;

&lt;p&gt;矩阵通道，矩阵中的每一个矩阵元素拥有的值的个数，比如说 3 * 4 矩阵中一共 12 个元素，如果每个元素有三个值，那么就说这个矩阵是 3 通道的，即 channels = 3。常见的是一张彩色图片有红、绿、蓝三个通道。&lt;/p&gt;

&lt;p&gt;4、rows&lt;/p&gt;

&lt;p&gt;矩阵的行数&lt;/p&gt;

&lt;p&gt;5、cols&lt;/p&gt;

&lt;p&gt;矩阵的列数&lt;/p&gt;

&lt;h4 id=&quot;mat与iplimage&quot;&gt;Mat与IplImage&lt;/h4&gt;

&lt;p&gt;OpenCV1使用基于C接口定义的图像存储格式IplImage存储图像。IplImage直接暴露内存，如果忘记释放内存，就会造成内存泄漏。&lt;/p&gt;

&lt;p&gt;从OpenCV2开始，开始使用Mat类存储图像，具有以下优势：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;图像的内存分配和释放由Mat类自动管理&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Mat类由两部分数据组成：矩阵头(包含矩阵尺寸、存储方法、存储地址等)和一个指向存储所有像素值的矩阵(根据所选存储方法的不同，矩阵可以是不同的维数)的指针。Mat在进行赋值和拷贝时，只复制矩阵头，而不复制矩阵，提高效率。如果矩阵属于多个Mat对象，则通过引用计数来判断，当最后一个使用它的对象，则负责释放矩阵。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可以使用clone和copyTo函数，不仅复制矩阵头还复制矩阵。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;三掩膜操作&quot;&gt;三、掩膜操作&lt;/h2&gt;

&lt;p&gt;数字图像处理中的掩膜的概念是借鉴于PCB制版的过程，在半导体制造中，许多芯片工艺步骤采用光刻技术，用于这些步骤的图形“底片”称为掩膜（也称作“掩模”），其作用是：在硅片上选定的区域中对一个不透明的图形模板遮盖，继而下面的腐蚀或扩散将只影响选定的区域以外的区域。 
图像掩膜与其类似，用选定的图像、图形或物体，对处理的图像（全部或局部）进行遮挡，来控制图像处理的区域或处理过程。 
光学图像处理中,掩模可以是胶片、滤光片等。数字图像处理中,掩模为二维矩阵数组,有时也用多值图像。&lt;/p&gt;

&lt;p&gt;是不是概念看得一头雾水，没事的，我第一次看概念的也是一样样的。下面我以例子来辅助大家了解掩膜。&lt;/p&gt;

&lt;h4 id=&quot;抠下铠的头&quot;&gt;抠下铠的头&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-b7718fa0c6ef972f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;铠&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来我们以代码角度分析下究竟什么是掩膜。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    // image为铠的图片
    Mat src;
    UIImageToMat(image, src);
    
    Mat mask = Mat::zeros(src.size(), CV_8UC1);
    Rect2i r = Rect2i(120, 80, 100, 100);
    mask(r).setTo(255);
    
    Mat dst;
    src.copyTo(dst, mask);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第一步建立与原图一样大小的mask图像，并将所有像素初始化为0，因此全图成了一张全黑色图。
第二步将mask图中的r区域的所有像素值设置为255,也就是整个r区域变成了白色。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Mat mask = Mat::zeros(src.size(), CV_8UC1);
 mask(r).setTo(255);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-9c82240d29373e2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;mask图片&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用mask将原始图src拷贝到目的图dst上。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;src.copyTo(dst, mask);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个拷贝的动作完整版本是这样的：&lt;/p&gt;

&lt;p&gt;原图(src)与掩膜(mask)进行与运算后得到了结果图（dst）。&lt;/p&gt;

&lt;p&gt;其实就是原图中的每个像素和掩膜中的每个对应像素进行与运算。比如1 &amp;amp; 1 = 1；1 &amp;amp; 0 = 0；&lt;/p&gt;

&lt;p&gt;比如一个3 * 3的图像与3 * 3的掩膜进行运算，得到的结果图像就是：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-d1f9d8c3d7b09c66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;mask.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以，mask就是位图，来过滤像素。如果mask像素的值是非0的，我就保留，否则就丢弃。&lt;/p&gt;

&lt;p&gt;因为我们上面得到的mask中，感兴趣的区域是白色的，表明感兴趣区域的像素都是非0，而非感兴趣区域都是黑色，表明那些区域的像素都是0。一旦原图与mask图进行与运算后，得到的结果图只留下原始图感兴趣区域的图像了。也正剩下铠的头部了。&lt;/p&gt;

&lt;h4 id=&quot;增强对比度&quot;&gt;增强对比度&lt;/h4&gt;

&lt;p&gt;矩阵的掩膜操作就是根据掩膜来重新计算每个像素的像素值，掩膜(mask)也被称为kernel。
通过掩膜操作实现图像对比度提高的公式如下。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I(i,j) = 5*I(i,j) - [I(i-1,j) + I(i+1,j) + I(i,j-1) + I(i,j+1)]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;注：这里看不懂不要紧，先看具体的实现，回头我们再一起回顾这里。&lt;/p&gt;

&lt;p&gt;上面的公式，转换成矩阵就如下图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-2a0575afcffcc610.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;kernel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;红色是中心像素，从上到下，从左到右对每个像素做同样的处理操作，具体过程如下图，深灰色底表示原图像，每次移动kernel便根据公司计算新值并更新矩阵。最终得到的结果就是对比度提高之后的输出图像。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-a5ba14b90afb4f08.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;kernel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;具体的代码如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    // image为铠的图片
    Mat src;
    UIImageToMat(image, src);
    
    int cols = (src.cols-1) * src.channels();
    int offset = src.channels();
    int rows = src.rows;
    
    Mat dst = Mat(src.size(), src.type());
    for (int row = 1; row &amp;lt; rows-1; row++) {
        uchar* previous = src.ptr(row-1);
        uchar* current = src.ptr(row);
        uchar* next = src.ptr(row+1);
        uchar* output = dst.ptr(row);
        for (int col = offset; col &amp;lt; cols; col++) {
            output[col] = saturate_cast&amp;lt;uchar&amp;gt;(5*current[col] - (current[col-offset] + current[col +offset] + previous[col] + next[col]));
        }
    }

/*
注：
saturate_cast&amp;lt;uchar&amp;gt;(-100)，返回0
saturate_cast&amp;lt;uchar&amp;gt;(288)，返回255
saturate_cast&amp;lt;uchar&amp;gt;(100)，返回100
这个函数的功能是确保RGB值范围在0~255之间。
*/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;效果
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-74296305be0931e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;增强对比度&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来我们来回顾下上面的那个公式&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I(i,j) = 5*I(i,j) - [I(i-1,j) + I(i+1,j) + I(i,j-1) + I(i,j+1)]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;其实这个公式就是5倍的中心像素减去周边的四个像素之和。
我们举两个例子来看下这个公式的结果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-bb4a09b443016d77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;demo1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-a2f4113946251462.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;demo2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们可以&lt;strong&gt;大致&lt;/strong&gt;看到若是中心点的值大于周围，则计算后的结果会将中心点与周围的值差距拉得更大；
若是中心点的值小于周围，则计算后的结果也会将中心点与周围的值差距拉大。这样“大的大，小的小”结果不就是对比明显了吗，也就是提高了对比度。&lt;/p&gt;

&lt;p&gt;大家会发现这样做掩膜操作也太麻烦了。这个时候我们就找OpenCV来帮个忙，看看它是怎么实现的。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    Mat src;
    UIImageToMat(image, src);
    
    Mat dst;
    Mat kernel = (Mat_&amp;lt;char&amp;gt;(3, 3) &amp;lt;&amp;lt; 0, -1, 0, -1, 5, -1, 0, -1, 0);
    filter2D(src, dst, src.depth(), kernel);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;一个filter2D搞定！定义如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void filter2D( InputArray src, OutputArray dst, int ddepth,
                            InputArray kernel, Point anchor=Point(-1,-1),
                            double delta=0, int borderType=BORDER_DEFAULT );
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;其中src与dst是Mat类型变量、depth表示位图深度，有32、24、8等。&lt;/p&gt;

&lt;h2 id=&quot;四小结&quot;&gt;四、小结&lt;/h2&gt;

&lt;p&gt;本篇主要介绍了Mat对象的基本用法，并通过两个例子讲解了掩膜操作的原理和实现。下一篇还是会以这样的形式讲解OpenCV的其他知识，有更好建议的朋友可以给我留言，see you later!&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Jun 2018 17:38:27 +0800</pubDate>
        <link>http://localhost:4000/2018/06/14/Learning-OpenCV-with-iOS-%E6%8E%A9%E8%86%9C%E6%93%8D%E4%BD%9C/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/14/Learning-OpenCV-with-iOS-%E6%8E%A9%E8%86%9C%E6%93%8D%E4%BD%9C/</guid>
        
        <category>OpenCV</category>
        
        
      </item>
    
      <item>
        <title>Learning OpenCV with iOS：Hello OpenCV</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;一概念介绍&quot;&gt;一、概念介绍&lt;/h2&gt;
&lt;h4 id=&quot;图像处理计算机视觉&quot;&gt;图像处理、计算机视觉&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86&quot;&gt;图像处理&lt;/a&gt;，用计算机对图像进行分析，以达到所需结果的技术。又称影像处理。图像处理一般指&lt;strong&gt;数字图像处理&lt;/strong&gt;。数字图像是指用工业相机、摄像机、扫描仪等设备经过拍摄得到的一个大的二维数组，该数组的元素称为&lt;strong&gt;像素&lt;/strong&gt;，其值称为&lt;strong&gt;灰度值&lt;/strong&gt;。图像处理技术一般包括图像压缩，增强和复原，匹配、描述和识别3个部分。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/计算机视觉&quot;&gt;计算机视觉&lt;/a&gt;是一门研究如何使&lt;a href=&quot;https://baike.baidu.com/item/%E6%9C%BA%E5%99%A8&quot;&gt;机器&lt;/a&gt;“看”的科学，更进一步的说，就是是指用摄影机和电脑代替人眼对目标进行识别、跟踪和测量等&lt;a href=&quot;https://baike.baidu.com/item/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89&quot;&gt;机器视觉&lt;/a&gt;，并进一步做图形处理，使电脑处理成为更适合人眼观察或传送给仪器检测的图像。作为一个科学学科，计算机视觉研究相关的理论和技术，试图建立能够从图像或者多维数据中获取‘信息’的&lt;a href=&quot;https://baike.baidu.com/item/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD&quot;&gt;人工智能&lt;/a&gt;系统。因为感知可以看作是从感官信号中提 取信息，所以计算机视觉也可以看作是研究如何使人工系统从图像或多维数据中“感知”的科学。&lt;/p&gt;

&lt;p&gt;图像处理与计算机视觉区别：
图像处理侧重于对图像的“处理”（如：增强，还原，去燥，分割等）。
计算机视觉则重在使用计算机来模拟人的视觉，&lt;strong&gt;模拟&lt;/strong&gt;才是计算机视觉的目的。&lt;/p&gt;

&lt;h4 id=&quot;opencv&quot;&gt;OpenCV&lt;/h4&gt;

&lt;p&gt;OpenCV（Open Source Computer Vision Library）于1999年由&lt;a href=&quot;https://baike.baidu.com/item/Intel&quot;&gt;Intel&lt;/a&gt;建立，如今由Willow Garage提供支持。
OpenCV是一个基于BSD许可（开源）发行的跨平台计算机视觉库，可以运行在&lt;a href=&quot;https://baike.baidu.com/item/Linux&quot;&gt;Linux&lt;/a&gt;、&lt;a href=&quot;https://baike.baidu.com/item/Windows&quot;&gt;Windows&lt;/a&gt;和&lt;a href=&quot;https://baike.baidu.com/item/Mac%20OS&quot;&gt;Mac OS&lt;/a&gt;操作系统上。它轻量级而且高效——由一系列 C 函数和少量 C++ 类构成，同时提供了Python、Ruby、MATLAB等语言的接口，实现了图像处理和计算机视觉方面的很多通用算法。OpenCV覆盖了计算机视觉的许多领域，如产品检测、信息安全、立体视觉和机器人、医学成像等。因为计算机视觉和机器学习关系密切，所以OpenCV还提供了MLL（Machine Learning Library）机器学习库。&lt;/p&gt;

&lt;p&gt;常用链接：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://opencv.org&quot;&gt;OpenCV官方主页&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/opencv/opencv&quot;&gt;OpenCV github主页&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.opencv.org/3.1.0/d3/dc9/tutorial_table_of_content_ios.html&quot;&gt;OpenCV iOS tutorials&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;二环境搭建&quot;&gt;二、环境搭建&lt;/h2&gt;

&lt;p&gt;“工欲善其事必先利其器”，接下来我们先搭建一下开发环境，借此了解下OpenCV的基本架构。&lt;/p&gt;

&lt;h6 id=&quot;1创建项目&quot;&gt;1.创建项目&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-d42b8064456f791a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;创建项目&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注:这里以Objective-C作为语言是因为OpenCV接口为C++，使用Objective-C较好与其交互。&lt;/p&gt;

&lt;h5 id=&quot;2加入opencv2framework&quot;&gt;2.加入opencv2.framework&lt;/h5&gt;

&lt;p&gt;前往https://opencv.org/releases.html下载iOS pack。
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-101047bd286e5e0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;iOS pack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;将opencv2.framework加入项目
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-e0cbecf02e7fe2d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;加入项目&quot; /&gt;&lt;/p&gt;

&lt;p&gt;将OpenCV所需的依赖库添加到项目中&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CoreGraphics.framework&lt;/li&gt;
  &lt;li&gt;Foundation.framework&lt;/li&gt;
  &lt;li&gt;UIKit.framework&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果要使用摄像头做视频处理，还需要添加以下依赖库：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CoreVideo.framework&lt;/li&gt;
  &lt;li&gt;CoreMedia.framework&lt;/li&gt;
  &lt;li&gt;AssetsLibrary.framework&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-086ef4bf0182bf81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;framework&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;3say-hello&quot;&gt;3.Say Hello&lt;/h5&gt;

&lt;p&gt;新建OpenCV.h &amp;amp; OpenCV.mm，并添加以下代码&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;注：因为OpenCV是C++写的，所以引入项目中的文件需要使用Object-C++的兼容方式来写，具体的做法就是将需要导入OpenCV头文件的m文件改成mm文件&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//
//  OpenCV.h
//  LearningOpenCV
//
//  Created by CatchZeng on 2018/6/12.
//  Copyright © 2018年 catch. All rights reserved.
//
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
#import &amp;lt;UIKit/UIKit.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OpenCV&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSObject&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//
//  OpenCV.m
//  LearningOpenCV
//
//  Created by CatchZeng on 2018/6/12.
//  Copyright © 2018年 catch. All rights reserved.
//
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//!!!opencv的头文件引入必须在其他头文件之前
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;opencv2/opencv.hpp&amp;gt;
#import &amp;lt;opencv2/imgproc/types_c.h&amp;gt;
#import &amp;lt;opencv2/imgcodecs/ios.h&amp;gt;
#import &amp;lt;opencv2/core/core_c.h&amp;gt;
#import &quot;OpenCV.h&quot;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OpenCV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OpenCV&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UIImageToMat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grayMat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cvtColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grayMat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CV_BGR2GRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MatToUIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grayMat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;新建视图控制器SayHelloViewController&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class SayHelloViewController: UIViewController {
    
    @IBOutlet weak var imageView: UIImageView!
    @IBOutlet weak var grayImageView: UIImageView!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        grayImageView.image = OpenCV.gray(#imageLiteral(resourceName: &quot;sayHello&quot;))
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;效果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-afb139a09ec5365d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;效果&quot; /&gt;&lt;/p&gt;

&lt;p&gt;源码地址: https://github.com/CatchZeng/LearningOpenCV&lt;/p&gt;

&lt;h2 id=&quot;三opencv基础架构&quot;&gt;三、OpenCV基础架构&lt;/h2&gt;

&lt;p&gt;OpenCV包含的内容较多，在学习之前先了解下它的整体模块架构，再选择自己感兴趣的部分重点学习，这样学起来比较得心应手。&lt;/p&gt;

&lt;p&gt;鉴于此，下面我们一起来看下OpenCV的整体模块架构。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-18342122cfdc0d61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;OpenCV&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从上图可看到OpenCV的所有模块：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;【calib3d】Calibration(校准)和3D这两个词的组合缩写。这个模块主要是相机校准和三维重建相关的内容，包括基本的多视角几何算法、单个立体摄像头标定，物体姿态估计，立体相似性算法，3D信息的重建等。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;【core】核心功能模块，包含如下内容：
    &lt;ul&gt;
      &lt;li&gt;OpenCV基本数据结构&lt;/li&gt;
      &lt;li&gt;动态数据结构&lt;/li&gt;
      &lt;li&gt;绘图函数&lt;/li&gt;
      &lt;li&gt;数组操作相关函数&lt;/li&gt;
      &lt;li&gt;辅助功能与系统函数和宏&lt;/li&gt;
      &lt;li&gt;与OpenGL的互操作&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;【feature2d】2D功能框架。包含如下内容：
    &lt;ul&gt;
      &lt;li&gt;特征检测和描述&lt;/li&gt;
      &lt;li&gt;特征检测器(Fearure Detectors) 通用接口&lt;/li&gt;
      &lt;li&gt;描述符提取器(Description Extractors) 通用接口&lt;/li&gt;
      &lt;li&gt;描述符匹配器(Description Eatchers) 通用接口&lt;/li&gt;
      &lt;li&gt;通用描述符(Generic Description)匹配器通用接口&lt;/li&gt;
      &lt;li&gt;关键点绘制函数和匹配功能绘制函数&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;【imgproc】Image 和Process 这两个单词的缩写组合，图像处理模块。包含如下内容：
    &lt;ul&gt;
      &lt;li&gt;线性和非线性的图像滤波&lt;/li&gt;
      &lt;li&gt;图像的几何变换&lt;/li&gt;
      &lt;li&gt;其他的图像变换&lt;/li&gt;
      &lt;li&gt;直方图相关&lt;/li&gt;
      &lt;li&gt;结构分析和形状描述&lt;/li&gt;
      &lt;li&gt;运动分析和对象跟踪&lt;/li&gt;
      &lt;li&gt;特征检测&lt;/li&gt;
      &lt;li&gt;目标检测等内容&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;【flann】Fast Library For Approximate Nearest Neighbors，高维的近似近邻快速搜索算法库，包含以下两个部分：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;快速近似最近邻搜索&lt;/li&gt;
      &lt;li&gt;聚类&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;【highgui】高层GUI图形用户界面，包含媒体的输入输出、视频捕捉、图像和视频的解码编码、图形交互界面的接口等内容。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;【ml】Machine Learning，机器学习模块， 基本上是统计模型和分类算法，包含如下内容：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;统计模型 （Statistical Models）&lt;/li&gt;
      &lt;li&gt;一般贝叶斯分类器 （Normal Bayes Classifier）&lt;/li&gt;
      &lt;li&gt;K-近邻 （K-NearestNeighbors）&lt;/li&gt;
      &lt;li&gt;支持向量机 （Support Vector Machines）&lt;/li&gt;
      &lt;li&gt;决策树 （Decision Trees）&lt;/li&gt;
      &lt;li&gt;提升（Boosting）&lt;/li&gt;
      &lt;li&gt;梯度提高树（Gradient Boosted Trees）&lt;/li&gt;
      &lt;li&gt;随机树 （Random Trees）&lt;/li&gt;
      &lt;li&gt;超随机树 （Extremely randomized trees）&lt;/li&gt;
      &lt;li&gt;期望最大化 （Expectation Maximization）&lt;/li&gt;
      &lt;li&gt;神经网络 （Neural Networks）&lt;/li&gt;
      &lt;li&gt;MLData&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;【objdetect】目标检测模块，包含Cascade Classification（级联分类）和Latent SVM这两个部分。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;【photo】Computational Photography，包含图像修复和图像去噪两部分。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;【stitching】images stitching，图像拼接模块，包含如下部分：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;拼接流水线&lt;/li&gt;
      &lt;li&gt;特点寻找和匹配图像&lt;/li&gt;
      &lt;li&gt;估计旋转&lt;/li&gt;
      &lt;li&gt;自动校准&lt;/li&gt;
      &lt;li&gt;图片歪斜&lt;/li&gt;
      &lt;li&gt;接缝估测&lt;/li&gt;
      &lt;li&gt;曝光补偿&lt;/li&gt;
      &lt;li&gt;图片混合&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;【video】视频分析组件，该模块包括运动估计，背景分离，对象跟踪等视频处理相关内容。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;【Videostab】Video stabilization，视频稳定相关的组件，官方文档中没有多作介绍，不管它了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;看到到这里，相信大家已经对OpenCV的模块架构设计有了一定的认识，OpenCV其实就是这么多模块作为代码容器组合起来的一个SDK，了解这些可以更快的学习OpenCV了！&lt;/p&gt;

&lt;h2 id=&quot;四小结&quot;&gt;四、小结&lt;/h2&gt;

&lt;p&gt;本篇从概念到环境搭建再到基本架构的角度介绍了OpenCV，让读者有一个宏观的认识。&lt;a href=&quot;http://catchzeng.com/2018/06/14/Learning-OpenCV-with-iOS-(二)-掩膜操作/&quot;&gt;下一篇&lt;/a&gt;开始，我将以原理+例子的形式一步步介绍OpenCV的各个模块。&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Jun 2018 17:38:27 +0800</pubDate>
        <link>http://localhost:4000/2018/06/12/Learning-OpenCV-with-iOS-Hello-OpenCV/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/12/Learning-OpenCV-with-iOS-Hello-OpenCV/</guid>
        
        <category>OpenCV</category>
        
        
      </item>
    
      <item>
        <title>聊聊设计模式原则（三） -- 依赖倒置原则</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;目录&quot;&gt;目录&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://catchzeng.com/2017/02/19/%E8%81%8A%E8%81%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99-%E4%B8%80-%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/&quot;&gt;聊聊设计模式原则（一） – 单一职责原则&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://catchzeng.com/2017/05/04/%E8%81%8A%E8%81%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99-%E4%BA%8C-%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/&quot;&gt;聊聊设计模式原则（二） – 接口隔离原则&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://catchzeng.com/2018/06/01/%E8%81%8A%E8%81%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99-%E4%B8%89-%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/&quot;&gt;聊聊设计模式原则（三） – 依赖倒置原则&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;依赖倒置原则dip-dependence-inversion-principle&quot;&gt;依赖倒置原则（DIP ：Dependence Inversion Principle）&lt;/h1&gt;

&lt;h2 id=&quot;定义&quot;&gt;定义&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;高层模块不应该依赖低层模块，二者都应该依赖其抽象；&lt;/li&gt;
  &lt;li&gt;抽象不应该依赖细节；&lt;/li&gt;
  &lt;li&gt;细节应该依赖抽象。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;也就是说高层模块低层模块细节都应该依赖抽象&quot;&gt;也就是说高层模块，低层模块，细节都应该依赖抽象&lt;/h5&gt;

&lt;h2 id=&quot;由来&quot;&gt;由来&lt;/h2&gt;

&lt;p&gt;类A直接依赖类B，假如要将类B改为类C，则必须通过修改类A的代码来达成。
类A一般是高层模块，负责复杂的业务逻辑。
类B和类C是低层模块，负责基本的原子操作。
修改类A，会给程序带来不必要的风险。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-10ce9ac0558a6d77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;由来&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;解决方案&quot;&gt;解决方案&lt;/h2&gt;
&lt;p&gt;将类A修改为依赖接口I，类B和类C各自实现接口I，类A通过接口I间接与类B或者类C发生联系，则会大大降低修改类A的几率。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-9826ba438ef18ed9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;解决方案&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;优点&quot;&gt;优点&lt;/h2&gt;
&lt;p&gt;依赖倒置原则可以减少类间的耦合性，提高系统的稳定，降低并行开发引起的风险，提高代码的可读性和可维护性。&lt;/p&gt;

&lt;h2 id=&quot;思考&quot;&gt;思考&lt;/h2&gt;

&lt;h4 id=&quot;1依赖倒置原则跟面向接口编程是什么关系&quot;&gt;1.依赖倒置原则跟面向接口编程是什么关系？&lt;/h4&gt;
&lt;p&gt;依赖倒置原则的核心思想就是面向接口编程&lt;/p&gt;

&lt;h4 id=&quot;2什么是细节什么是抽象他们有什么区别&quot;&gt;2.什么是细节？什么是抽象？他们有什么区别？&lt;/h4&gt;

&lt;p&gt;所谓细节就是较为具体的东西，比如具体的类，就如上面的类B与类C，有具体的实现。&lt;/p&gt;

&lt;p&gt;所谓抽象就是具有&lt;strong&gt;契约性、共同性、规范性的表达&lt;/strong&gt;，比如上面的接口I。它表达了一种契约–你需要实现funcA和funcB才能被当成I来对待。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;相对于细节的多变性，抽象的东西要稳定的多。&lt;/strong&gt;
以上面的类ABC作为例子，B、C类都属于细节，如果A直接依赖B或者C，那么B或C的改动有可能就会影响到A的稳定性。同样的，A对B或者C的操作也有可能影响到B或C的稳定性。这些互相影响，其实来源于直接的依赖，导致B或C的细节暴露过多。而面对抽象的接口I，A只能操作funA和funcB，从而避免了不必要的暴露和风险。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;以抽象为基础搭建起来的架构比以细节为基础搭建起来的架构要稳定的多。&lt;/strong&gt;
稳定性表现在规范性、契约性、易修改性、扩展性、可维护性等。&lt;/p&gt;

&lt;h2 id=&quot;来个栗子&quot;&gt;来个栗子&lt;/h2&gt;
&lt;p&gt;小明（程序员）接到小李（产品经理）的需求：
客户端开始的时候打个“开始”的log。
小明心想简单，一下子完成了代码&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Logger {
    func log(_ text: String) {
        print(text)
    }
}

public class Client {
    public var logger: Logger?

    func start() {
        logger?.log(&quot;开始&quot;)
    }
}

let client = Client()
let logger = Logger()
client.logger = logger

client.start()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这个时候，小李突然说，要把log变成存到文件的形式。
小明想了下，有点不情愿地改了代码（因为要改好几个地方）&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class FileLogger { //修改1
    func log(_ text: String) {
        writeTofile(text) //修改2
    }
    
    func start() {
        print(&quot;开始&quot;)
    }
}

public class Client {
    public var logger: FileLogger? //修改3

    func start() {
        logger.start()
        logger?.log(&quot;开始&quot;)
    }
}

let client = Client()
let logger = FileLogger() //修改4
client.logger = logger

client.start()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;小李想了想现在是互联网时代，还是直接将log信息传到网络上吧。
这个时候，小明非常不情愿地说了声“你不早说”，但还是改了代码(又是好几处改动)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class WebLogger { //修改1
    func log(_ text: String) {
        writeToWeb(text) //修改2
    }
}

public class Client {
    public var logger: WebLogger? //修改3

    func start() {
        logger?.log(&quot;开始&quot;)
    }
}

let client = Client()
let logger = WebLogger() //修改4
client.logger = logger

client.start()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这时，小明的老大小华看到小明不开心，便过来帮忙，改了下代码&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;protocol Logger {
    func log(_ text: String)
}

public class WebLogger: Logger {
    func log(_ text: String) {
        writeToWeb(text) 
    }
}

public class FileLogger: Logger {
    func log(_ text: String) {
        writeTofile(text) 
    }
}

public class PrintLogger: Logger {
    func log(_ text: String) {
        print(text)
    }
}

public class Client {
    public var logger: Logger? 

    func start() {
        logger?.log(&quot;开始&quot;)
    }
}

let client = Client()
let logger = WebLogger()
client.logger = logger

client.start()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;小华对小明说，现在不用怕了，小李想什么样的log你改一下实现类就行了&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let logger = WebLogger() // PrintLogger()  FileLogger()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;小华的改动其实就是利用了依赖倒置原则，增强了易修改性、扩展性、可维护性等。
细心的朋友其实还发现了，在改成FileLogger的时候，Client多余地调用了FileLogger的start方法。这就是依赖细节，暴露细节，引起的问题。而使用抽象的接口就能较好地避免这类问题。&lt;/p&gt;

&lt;h2 id=&quot;注意点&quot;&gt;注意点&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;分清细节与抽象&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;虽然依赖倒置原则有很大的好处，但也不是所有的类都需要有抽象一个接口去对应，要视情况而定。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;变量的声明类型尽量是抽象类或接口&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意是尽量，而不是全部。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;尽量不要覆写基类的方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果基类是一个抽象类，而这个方法已经实现了，子类尽量不要覆写。类间依赖的是抽象，覆写了抽象方法，对依赖的稳定性会有一定的影响。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;继承要遵循里氏替换原则&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 01 Jun 2018 17:38:27 +0800</pubDate>
        <link>http://localhost:4000/2018/06/01/%E8%81%8A%E8%81%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99-%E4%B8%89-%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/01/%E8%81%8A%E8%81%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99-%E4%B8%89-%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/</guid>
        
        <category>设计模式</category>
        
        
      </item>
    
      <item>
        <title>团队需要一个私有npm</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;一前言&quot;&gt;一、前言&lt;/h2&gt;

&lt;p&gt;随着Team人员越来越多，项目间的代码复用显得越来越重要。比如：常用的框架/库、工具方法等。另外团队内部的代码模块化，也需要有一个机制来管理。目前npm是前端代码的包管理(类似iOS 的cocoapods、android的gradle)首选。于是，我尝试使用私有npm搭建一套前端仓库，用以在公司内部托管公共代码以及将代码模块化。&lt;/p&gt;

&lt;h2 id=&quot;二选型&quot;&gt;二、选型&lt;/h2&gt;

&lt;h3 id=&quot;npm私有git仓库&quot;&gt;npm+私有git仓库&lt;/h3&gt;

&lt;h5 id=&quot;制作使用&quot;&gt;制作&amp;amp;使用&lt;/h5&gt;

&lt;p&gt;1.新建私有git仓库（如：https://gitlab.com/mygroup/myproject.git)，用group建立项目较方便代码的管理，也能作为npm的scope。&lt;/p&gt;

&lt;p&gt;2.clone仓库&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://gitlab.com/mygroup/myproject.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3.npm  init&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm init --scope=mygroup
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;4.push到仓库即可&lt;/p&gt;

&lt;p&gt;5.安装&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;@mygroup/myproject&quot;: &quot;https://gitlab.com/mygroup/myproject.git&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;6.使用&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var myproject = require('@mygroup/myproject');
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;优缺点&quot;&gt;优缺点&lt;/h5&gt;

&lt;p&gt;缺点：不能使用npm直接update&lt;/p&gt;

&lt;p&gt;优点：简单直接&lt;/p&gt;

&lt;h3 id=&quot;npmjs官方托管&quot;&gt;npmjs官方托管&lt;/h3&gt;

&lt;h5 id=&quot;制作使用-1&quot;&gt;制作&amp;amp;使用&lt;/h5&gt;

&lt;p&gt;参考官方教程&lt;a href=&quot;https://docs.npmjs.com/private-modules/intro&quot;&gt;https://docs.npmjs.com/private-modules/intro&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;优缺点-1&quot;&gt;优缺点&lt;/h5&gt;

&lt;p&gt;缺点：需要支付每个月7刀； 不能使用npm直接update;&lt;/p&gt;

&lt;p&gt;优点：简单直接；开源&amp;amp;闭源项目同一托管&lt;/p&gt;

&lt;h3 id=&quot;使用verdaccio自己托管&quot;&gt;使用verdaccio自己托管&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-95672e464e73e902.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;verdaccio&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;制作使用-2&quot;&gt;制作&amp;amp;使用&lt;/h5&gt;

&lt;p&gt;1.安装&lt;a href=&quot;https://www.verdaccio.org&quot;&gt;verdaccio&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install --global verdaccio 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.启动服务&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;verdaccio
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3.团队人员都绑定registry&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm set registry http://verdaccio托管的ip地址:4873
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;4.增加用户&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm adduser --registry http://verdaccio托管的ip地址:4873
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;5.发布私有库&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm publish --registry http://verdaccio托管的ip地址:4873
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;6.安装私有库&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i 私有库名称
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;7.使用私有库&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var 私有库名称 = require('私有库名称');
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;优缺点-2&quot;&gt;优缺点&lt;/h5&gt;

&lt;p&gt;优点：免费；本地速度快&amp;amp;带公有库缓存；支持yarn&lt;/p&gt;

&lt;p&gt;缺点：需要自己托管维护&lt;/p&gt;

&lt;h5 id=&quot;注为了切换源方便可以使用nrm&quot;&gt;注：为了切换源方便，可以使用nrm&lt;/h5&gt;

&lt;p&gt;安装&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install -g nrm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;增加私有源&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nrm add 私有源名称 http://verdaccio托管的ip地址:4873
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;列出所有源（*表示现在正在使用的源）&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ nrm ls

* npm ---- https://registry.npmjs.org/
  cnpm --- http://r.cnpmjs.org/
  eu ----- http://registry.npmjs.eu/
  au ----- http://registry.npmjs.org.au/
  sl ----- http://npm.strongloop.com/
  nj ----- https://registry.nodejitsu.com/
私有源名称  http://verdaccio托管的ip地址:4873
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;切换源&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ nrm use 自定义私有库名称
   Registry has been set to: http://verdaccio托管的ip地址:4873
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;三总结&quot;&gt;三、总结&lt;/h2&gt;

&lt;p&gt;基于上面选型中的分析，我最终选择了verdaccio。私有npm的作用，不单单是作为包管理器，更是项目模块化的一种“约束”。这样一来，你就不会往一个模块随意加入本该属于另外一个模块的代码，也就是会逼迫你去做解耦。另外有了私有npm，每个模块更“独立化”，能“专心”为其加入单元测试&amp;amp;持续集成等实践，使每个模块的质量能得到较好的保障，提高整体软件的质量。&lt;/p&gt;
</description>
        <pubDate>Tue, 22 May 2018 16:38:27 +0800</pubDate>
        <link>http://localhost:4000/2018/05/22/%E5%9B%A2%E9%98%9F%E9%9C%80%E8%A6%81%E4%B8%80%E4%B8%AA%E7%A7%81%E6%9C%89npm/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/05/22/%E5%9B%A2%E9%98%9F%E9%9C%80%E8%A6%81%E4%B8%80%E4%B8%AA%E7%A7%81%E6%9C%89npm/</guid>
        
        <category>JS</category>
        
        
      </item>
    
      <item>
        <title>开源一个npm包</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;一注册npm账号&quot;&gt;一、注册npm账号&lt;/h2&gt;
&lt;p&gt;前往&lt;a href=&quot;https://www.npmjs.com&quot;&gt;https://www.npmjs.com&lt;/a&gt;注册一个账号。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-839cdd17a84e490f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;npmjs&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;二制作npm包&quot;&gt;二、制作npm包&lt;/h2&gt;

&lt;h5 id=&quot;1建立一个仓库这里以cat-jsutils为例&quot;&gt;1.建立一个仓库，这里以cat-jsutils为例&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-9f41ef6e9827f5ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;cat-jsutils&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这里需要注意下名称&lt;/strong&gt;，因为如果被占用，无法使用npm install直接安装。
判断是否被占用，可使用npm search xxx来判断&lt;/p&gt;

&lt;p&gt;未占用&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cenghaihandeMacBook-Pro:cat-jsutils catchzeng&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm search cat-jsutils
No matches found &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cat-jsutils&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;已占用&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cenghaihandeMacBook-Pro:cat-jsutils catchzeng&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm search jsutils
NAME                      | DESCRIPTION          | AUTHOR          | DATE       | VERSION  | KEYWORDS
jsutils                   | Utilities &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;…       | &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sethyuan       | 2016-04-25 | 0.6.1    | util js javascript node.js node nodejs utils u
fwsp-jsutils              | JavaScript Utils -…  | &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;emadum &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cjus   | 2017-04-04 | 1.0.10   | flywheelsports javascript utils
@mreck/jsutils            | JavaScript…          | &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mreck          | 2018-04-14 | 2.0.0    |
sbiger-jsutil             | Javascript common…   | &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sbiger         | 2016-12-26 | 1.3.32   | javscript utilities ES6 ES5 js util
m-jsutils                 | js utils             | &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;limi58         | 2017-07-23 | 1.0.1    | utils
jsutilities               | Javascript common…   | &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;jcde           | 2016-07-08 | 1.0.6    |
jsutils2                  | &lt;span class=&quot;s2&quot;&gt;&quot;Various utility…    | =milesman34     | 2017-11-22 | 2.0.0    |
org.mineot.jsutil         | Javascript Util…     | =mineot         | 2018-01-26 | 0.0.5    | javascript js jsutil util i18next translation
h-jsutils                 | javascript utils     | =haven09        | 2018-01-11 | 1.0.0    | js javascript utils
jsutility                 | A collection of…     | =deepaksibar    | 2016-08-27 | 0.0.0    | css
jsutil                    | A utilities package… | =gm12306        | 2013-03-20 | 0.1.3    | util mixin extend
@ikyhdst/jsutils          | Utility files for…   | =ikyhdst        | 2018-01-17 | 0.0.1    |
rb-jsutils                |                      | =dhanna         | 2016-06-29 | 0.9.0    |
@moodxd/jsutil-openable   | JavaScript Utility…  | =moodxd         | 2017-03-08 | 1.0.3    |
@moodxd/jsutil-stickable  | JavaScript Utility…  | =moodxd         | 2017-03-08 | 1.0.3    |
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;2clone仓库到本地--cd到cat-jsutils执行npm-init&quot;&gt;2.Clone仓库到本地 &amp;amp; cd到cat-jsutils，执行npm init&lt;/h5&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cenghaihandeMacBook-Pro:Github catchzeng&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;cat-jsutils/
cenghaihandeMacBook-Pro:cat-jsutils catchzeng&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;help &lt;/span&gt;json&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;definitive documentation on these fields
and exactly what they &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;.

Use &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;npm install &amp;lt;pkg&amp;gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; afterwards to install a package and
save it as a dependency &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the package.json file.

Press ^C at any &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;to quit.
package name: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;cat-jsutils&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
version: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
description: js utils
entry point: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;index.js&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;test command&lt;/span&gt;:
git repository: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;https://github.com/CatchZeng/cat-jsutils&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
keywords: util utils js javascript node utility utilities
author: CatchZeng
license: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ISC&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; MIT
About to write to /Users/catchzeng/Documents/Code/Github/cat-jsutils/package.json:

&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;cat-jsutils&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;js utils&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;index.js&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;echo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Error: no test specified&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;amp;&amp;amp; exit 1&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;repository&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;git&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;git+https://github.com/CatchZeng/cat-jsutils.git&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;keywords&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;util&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;utils&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;js&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;javascript&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;utility&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;utilities&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;author&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;CatchZeng&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;license&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;MIT&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;bugs&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/CatchZeng/cat-jsutils/issues&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;homepage&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/CatchZeng/cat-jsutils#readme&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;3新建indexjs根据上一步的entry-point-indexjs指定组织代码结构这里以cat-jsutils为例&quot;&gt;3.新建index.js【根据上一步的entry point: (index.js)指定】，组织代码结构，这里以cat-jsutils为例&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-62d8a951fab55e27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;屏幕快照 2018-04-17 下午6.13.24.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//number.js&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'number'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isNaN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isFinite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;isNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//string.js&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'string'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;isString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;containsAny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;containsAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//index.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;utils&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;utils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./src/string'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;utils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./src/number'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;utils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;4在packagejson中指定版本号并提交代码到github上&quot;&gt;4.在package.json中指定版本号，并提交代码到github上&lt;/h5&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cat-jsutils&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;js utils&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;index.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;三发布npm包&quot;&gt;三、发布npm包&lt;/h2&gt;

&lt;p&gt;到项目跟目录下，执行publish命令&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cenghaihandeMacBook-Pro:cat-jsutils catchzeng&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm publish
+ cat-jsutils@1.0.1
cenghaihandeMacBook-Pro:cat-jsutils catchzeng&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;发布成功后就可以在&lt;a href=&quot;https://www.npmjs.com&quot;&gt;https://www.npmjs.com&lt;/a&gt;上看到自己的项目&lt;/p&gt;

&lt;h2 id=&quot;四更新版本&quot;&gt;四、更新版本&lt;/h2&gt;

&lt;p&gt;更新package.json中的版本号，并提交代码到github上，重新publish npm包即可&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cat-jsutils&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1.0.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;js utils&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;index.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cenghaihandeMacBook-Pro:cat-jsutils catchzeng$ npm publish
+ cat-jsutils@1.0.2
cenghaihandeMacBook-Pro:cat-jsutils catchzeng$
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;五变优雅&quot;&gt;五、变优雅&lt;/h2&gt;
&lt;p&gt;何为优雅，先看下&lt;a href=&quot;https://github.com/expressjs/express&quot;&gt;express&lt;/a&gt;这个仓库比我们自己的仓库优雅在哪里&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-8120f72e0a61b2fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;express&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1logo&quot;&gt;1.Logo&lt;/h2&gt;
&lt;p&gt;这么吗，我不是设计师，有美感的朋友自己设计一个吧，这里我随便做一个了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-b0f66c092e953a2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;logo&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2npm-version-badge&quot;&gt;2.npm version badge&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-3c47ea1f40e8cba8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;npm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;增加这个其实只要在README中增加&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;![NPM version]&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;https://img.shields.io/npm/v/仓库名.svg&lt;span class=&quot;o&quot;&gt;)](&lt;/span&gt;https://www.npmjs.com/package/仓库名&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;以cat-jsutils为例子&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;![NPM version]&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;https://img.shields.io/npm/v/cat-jsutils.svg&lt;span class=&quot;o&quot;&gt;)](&lt;/span&gt;https://www.npmjs.com/package/cat-jsutils&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;3ci状态&quot;&gt;3.CI状态&lt;/h2&gt;

&lt;p&gt;关于持续集成理论部分，可以看之前的文章&lt;a href=&quot;http://catchzeng.com/2017/02/10/持续集成-理论篇/&quot;&gt;持续集成 – 理论篇&lt;/a&gt;。一般开源项目会选用&lt;a href=&quot;https://travis-ci.org/expressjs/express&quot;&gt;travis-ci&lt;/a&gt;。
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-63489fca5a178c46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;CI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用github账号登录travis-ci，然后打开需要持续集成的项目
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-897d8acf28fd845b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;travis-ci&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在项目中增加.travis.yml文件，用于配置持续集成的构建步骤。这里以cat-jsutils为例，里面只执行了单元测试&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node_js&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;node_js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stable&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：cat-jsutils的测试使用的是mocha+chai+istanbul，详见package.json&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cat-jsutils&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;js utils&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;index.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mocha&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;coverage&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;istanbul cover _mocha -- -R spec --timeout 5000 --recursive&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;coverage:check&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;istanbul check-coverage&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;repository&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git+https://github.com/CatchZeng/cat-jsutils.git&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;keywords&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;util&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;utils&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;javascript&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;utility&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;utilities&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CatchZeng&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;MIT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;bugs&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/CatchZeng/cat-jsutils/issues&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;homepage&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/CatchZeng/cat-jsutils#readme&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;chai&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^4.1.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;istanbul&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^0.4.5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;mocha&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^5.1.0&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;提交.travis.yml后变会触发构建，可以到&lt;a href=&quot;https://travis-ci.org&quot;&gt;travis-ci&lt;/a&gt;查看构建过程。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-897d8acf28fd845b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;travis-ci&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-085417e661c59bf3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;屏幕快照 2018-04-17 下午8.12.34.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击构建成功的图标就会弹出地址
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-1354adebff4f109e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;屏幕快照 2018-04-17 下午8.15.35.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;将该地址放到README上即可。以cat-jsutils为例子&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;![travis ci]&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;https://api.travis-ci.org/CatchZeng/cat-jsutils.svg?branch&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;master&lt;span class=&quot;o&quot;&gt;)](&lt;/span&gt;https://travis-ci.org/CatchZeng/cat-jsutils&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;4测试覆盖率&quot;&gt;4.测试覆盖率&lt;/h2&gt;

&lt;p&gt;显示测试覆盖率，我们需要借助&lt;a href=&quot;https://coveralls.io&quot;&gt;coveralls&lt;/a&gt;。
同样的使用github账户登录coveralls，然后开启对应的项目
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-31e1ae29fd50d358.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;coveralls&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击details，查看repo_token并复制，后面会使用到。
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-7afdde72068ba510.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;屏幕快照 2018-04-17 下午8.23.38.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装coveralls&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i coveralls -D
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;安装travis&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install travis
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;执行encrypt，COVERALLS_TOKEN就是刚才复制的repo_token&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;travis encrypt &lt;span class=&quot;nv&quot;&gt;COVERALLS_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;JGOXXXXXXXXXXXXXqKVJ --add
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;执行之后会发现.travis.yml下多出env，这个环境变量能帮助我们将测试覆盖率安全上传到coveralls&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nHaHZZDNmW3Fx3YPvBEc2E0a0kjsVhKUssi4GpWYcFDiJe6ufHAVjukHnV4RQOlSgRgp1q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v9KJFeQbkcR9vSNQhtkjzHW&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//AbNGIOCZFyvmb3j/FH1hFxGqK129IC9tDHn1JeRSr5qSKK+TFTwINWQHCGAdA32PY+swuNT30UGrhBHtw3UaN8Hgu9xRH8g8UpqAMcGyX0rCnYCzPD2gYBEOo3zqEQvNvttu2YeSxvBXpU8doJuZLu7yvrRhvD3DGg3r/BWX7UDZtX16gZCdw3N9EnMWqgdaos7blE3eSKeHj89OHhiXeRSqHN7RKyUAp9dDmW1M63onsNvEpoho4ULCVTiVvX+Y25c+gZML3boeBlm3KOdwYKOCKhQLj/DIY5ojQd33jFBdBoouWW5ZG2cpfg8iq/Jyg2OoJFvJRjG04/T85a+l89wMnZKMDDl8zRgsnDhZho69EQmTz9WeBCvL2Bg87+n2Mg909InEw1D1PskGPkyD02zR7newOU+gJM2zK3pUYxt6O4EHUukoYL9XS14ogYIsrYFWqls0BHnTQXWKf+DQckL+H4+nZxdEPF6fEaebI8jgH9pgQiCHqMAKaQNsLApZRQ58DXLv78nZ/Sd/e/WmEgPfXZcrhTiLC8/yistVy3N5EKYHCjg6sB5RMO4BRNAsq0rnR3v1rA=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;加入cover脚本&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cover&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;istanbul cover --report lcov node_modules/mocha/bin/_mocha -- -R spec test/*.js&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;看下最后的.travis.yml文件和 package.json&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node_js&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;node_js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stable&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;after_script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cover&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;coverage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lcov&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node_modules&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;coveralls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;coveralls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nHaHZZDNmW3Fx3YPvBEc2E0a0kjsVhKUssi4GpWYcFDiJe6ufHAVjukHnV4RQOlSgRgp1q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v9KJFeQbkcR9vSNQhtkjzHW&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//AbNGIOCZFyvmb3j/FH1hFxGqK129IC9tDHn1JeRSr5qSKK+TFTwINWQHCGAdA32PY+swuNT30UGrhBHtw3UaN8Hgu9xRH8g8UpqAMcGyX0rCnYCzPD2gYBEOo3zqEQvNvttu2YeSxvBXpU8doJuZLu7yvrRhvD3DGg3r/BWX7UDZtX16gZCdw3N9EnMWqgdaos7blE3eSKeHj89OHhiXeRSqHN7RKyUAp9dDmW1M63onsNvEpoho4ULCVTiVvX+Y25c+gZML3boeBlm3KOdwYKOCKhQLj/DIY5ojQd33jFBdBoouWW5ZG2cpfg8iq/Jyg2OoJFvJRjG04/T85a+l89wMnZKMDDl8zRgsnDhZho69EQmTz9WeBCvL2Bg87+n2Mg909InEw1D1PskGPkyD02zR7newOU+gJM2zK3pUYxt6O4EHUukoYL9XS14ogYIsrYFWqls0BHnTQXWKf+DQckL+H4+nZxdEPF6fEaebI8jgH9pgQiCHqMAKaQNsLApZRQ58DXLv78nZ/Sd/e/WmEgPfXZcrhTiLC8/yistVy3N5EKYHCjg6sB5RMO4BRNAsq0rnR3v1rA=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cat-jsutils&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;js utils&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;index.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mocha&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;coverage&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;istanbul cover _mocha -- -R spec --timeout 5000 --recursive&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;coverage:check&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;istanbul check-coverage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;cover&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;istanbul cover --report lcov node_modules/mocha/bin/_mocha -- -R spec test/*.js&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;repository&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git+https://github.com/CatchZeng/cat-jsutils.git&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;keywords&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;util&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;utils&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;javascript&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;utility&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;utilities&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CatchZeng&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;MIT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;bugs&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/CatchZeng/cat-jsutils/issues&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;homepage&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/CatchZeng/cat-jsutils#readme&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;chai&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^4.1.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;coveralls&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^3.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;istanbul&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^0.4.5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;mocha&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^5.1.0&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;5小结&quot;&gt;5.小结&lt;/h2&gt;
&lt;p&gt;至此，我们完成了提交代码-》travis-》mocha单元测试-》istanbul覆盖率-》coveralls-》github显示npm版本、ci、覆盖率状态。&lt;/p&gt;

&lt;h2 id=&quot;6readme&quot;&gt;6.README&lt;/h2&gt;
&lt;p&gt;完善的README会让开源变得更加优雅。
加入Installation、Usgae、API等描述能帮助使用者更会上手，详细请参考&lt;a href=&quot;https://github.com/CatchZeng/cat-jsutils/edit/master/README.md&quot;&gt;README.md&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;六总结&quot;&gt;六、总结&lt;/h2&gt;
&lt;p&gt;本文从npm包的制作、发布到优化，讲述了如何较好地开源npm包，当然还有需要不足。欢迎感兴趣的朋友一起讨论、优化。
最后附上测试项目地址： &lt;a href=&quot;http://github.com/CatchZeng/cat-jsutils&quot;&gt;http://github.com/CatchZeng/cat-jsutils&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Apr 2018 16:38:27 +0800</pubDate>
        <link>http://localhost:4000/2018/04/17/%E5%BC%80%E6%BA%90%E4%B8%80%E4%B8%AAnpm%E5%8C%85/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/04/17/%E5%BC%80%E6%BA%90%E4%B8%80%E4%B8%AAnpm%E5%8C%85/</guid>
        
        <category>JS</category>
        
        
      </item>
    
      <item>
        <title>iOS进阶 -- 程序启动那些事</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;欢迎加QQ群讨论：157672725&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;iOS开发中，main函数是我们认为的入口，但其实从程序启动到main方法被调用之间，还发生了许多事情。比如runtime的初始化、动态库的加载链接等。想要真正了解程序启动，需要了解程序的内部结构。因此，本章将从分析程序（.ipa）的结构开始，到main函数被调用分析程序的启动。&lt;/p&gt;

&lt;h2 id=&quot;程序ipa结构&quot;&gt;程序（.ipa）结构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-6002dd38843cbb6d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;ipa&quot; /&gt;&lt;/p&gt;

&lt;p&gt;iTunesArtwork: 高分别率图标，通常为JPG图像文件&lt;/p&gt;

&lt;p&gt;iTunesMetadata.plist：属性列表文件&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App(Mach-O)：App的可执行文件&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;可执行文件mach-o&quot;&gt;可执行文件（Mach-O）&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/进程/382503?fr=aladdin&quot;&gt;进程&lt;/a&gt;是特殊文件在内存中加载得到的结果。这种文件必须使用操作系统能够理解的&lt;strong&gt;格式&lt;/strong&gt;，这样操作系统才能解析、建立依赖、初始化并开始执行。这种特殊文件就是可执行文件。
在UNIX中，我们可以使用chmod+x将文件&lt;strong&gt;标记&lt;/strong&gt;为可执行文件，但不能保证该文件可以执行，因为&lt;strong&gt;标记&lt;/strong&gt;只是告诉操作系统内核将文件读入内存，然后寻找一个头签名，这个头签名通常称为&lt;strong&gt;“魔数”&lt;/strong&gt;。当文件读入时，通过&lt;strong&gt;“魔数”&lt;/strong&gt;可帮助判断文件的二进制格式，如果是被支持的二进制格式，才会调用加载器函数。每个平台都有自己的可执行文件格式，Mach-O则是 OS X 与 iOS 系统上的可执行文件格式。
下面我们以QQ为例，借助&lt;a href=&quot;https://sourceforge.net/projects/machoview/&quot;&gt;MachOView&lt;/a&gt;来分析Mach-O文件。&lt;/p&gt;

&lt;h4 id=&quot;魔数&quot;&gt;魔数&lt;/h4&gt;

&lt;p&gt;在OS X上，可执行文件的标识有这样几个魔数：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;cafebabe&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;feedface&lt;/li&gt;
  &lt;li&gt;feadfacf&lt;/li&gt;
  &lt;li&gt;…
&lt;strong&gt;cafebabe&lt;/strong&gt;就是跨处理器架构的通用格式，feedface和feedfacf则分别是某一处理器架构下的Mach-O格式。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-cf41e5f001397df6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;QQ Mach-O&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mach-O 32位魔数是 &lt;strong&gt;0xfeedface&lt;/strong&gt;
Mach-O 64位魔数是 &lt;strong&gt;0xfeedfacf&lt;/strong&gt;
QQ支持ARM32&amp;amp;64所以可以看到两个Mach Header
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-f4d3150431b73b05.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Mach-O 32&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-65536991181a8896.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Mach-O 64&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;mach-o格式&quot;&gt;Mach-O格式&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-9f02e0e795e5d9b0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Match-O&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Header：CPU类型和子类型、文件类型、加载命令的条数和大小、动态连接器标志等&lt;/li&gt;
  &lt;li&gt;LoadCommands：加载命令。比如文件的段与进程地址映射、 调用&lt;strong&gt;dyld&lt;/strong&gt;、开启Mach线程等&lt;/li&gt;
  &lt;li&gt;Data：数据&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;加载过程&quot;&gt;加载过程&lt;/h4&gt;
&lt;p&gt;系统加载可执行文件后，通过&lt;strong&gt;Fat Header&lt;/strong&gt;，找到对应平台的地址，
然后根据相应的&lt;strong&gt;Header&lt;/strong&gt;，获取LoadCommands的信息，并加载。
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-77bfea43f634188f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;FatHeader&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-4a8a93b9fc805843.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Header&quot; /&gt;&lt;/p&gt;

&lt;p&gt;查看Load Commands可知，系统通过&lt;strong&gt;LC_SEGEMNT&lt;/strong&gt;命令将可执行文件段映射到进程地址空间后通过&lt;strong&gt;LC_LOAD_DYLINKER&lt;/strong&gt;调用&lt;strong&gt;dyld&lt;/strong&gt;(通常在/usr/lib/dyld)，当dyld的工作完成之后由&lt;strong&gt;LC_MAIN&lt;/strong&gt;（旧版本中的&lt;strong&gt;LC_UNIXTHREAD&lt;/strong&gt;）命令负责设置主线程的入口地址和栈大小。
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-b80cc628b36b5ebc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Commands&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-5d4b3d6b03f02621.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Load dyld command&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;dyld-the-dynamic-link-editor&quot;&gt;dyld (the dynamic link editor)&lt;/h4&gt;
&lt;p&gt;在讲解dyld之前我们先来看一下Load Commands中的&lt;strong&gt;LC_SYMTAB&lt;/strong&gt;、&lt;strong&gt;LC_DYSYMTAB&lt;/strong&gt;以及&lt;strong&gt;LC_LOAD_DYLB&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-3269c2d0f922bfef.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;SYMTAB&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-2e429f9560f217b4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;libSystem&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-205f4fe756f3b000.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;QQMainProject&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们可以看到Mach-O镜像中有很多&lt;strong&gt;“空洞”&lt;/strong&gt;，即由&lt;strong&gt;LC_SYMTAB&lt;/strong&gt;命令提供的符号表和&lt;strong&gt;LC_LOAD_DYLB&lt;/strong&gt;加载的额外动态库，这些空洞需要在程序启动的时填补。这项工作就需要dyld来完成，这个过程有时候也称为&lt;strong&gt;符号绑定&lt;/strong&gt;(binding)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：细心的朋友可以看到在加载libSystem的时候使用的地址是/usr/lib/而QQMainProject的地址是@rpath/。在iOS系统中，几乎所有的程序都会用到动态库，而动态库在加载的时候都需要用dyld进行链接。很多系统库几乎都是每个程序都要用到的，与其在每个程序运行的时候一个一个将这些动态库都加载进来，还不如先把它们打包好，一次加载进来来的快。这就是&lt;a href=&quot;https://www.cnblogs.com/maizi008/p/5086103.html&quot;&gt;dyld的共享库缓存&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;dyld是&lt;a href=&quot;https://github.com/opensource-apple/dyld&quot;&gt;开源&lt;/a&gt;的，下面我们就从代码的角度分析dyld。&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uintptr_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;_main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;macho_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mainExecutableMH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uintptr_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mainExecutableSlide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; 
		&lt;span class=&quot;kt&quot;&gt;uintptr_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startGlue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 1.instantiate ImageLoader for main executable
&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;sMainExecutable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instantiateFromLoadedImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainExecutableMH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mainExecutableSlide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sExecPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 2.load any inserted libraries
&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DYLD_INSERT_LIBRARIES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DYLD_INSERT_LIBRARIES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;loadInsertedDylib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;//3.link main executable
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sMainExecutable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DYLD_BIND_AT_LAUNCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImageLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RPathChain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;//4. link any inserted libraries
&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// do this after linking main executable so that any dylibs pulled in by inserted 
&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// dylibs (e.g. libSystem) will not be in front of dylibs the program uses
&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sInsertedDylibCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sInsertedDylibCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ImageLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sAllImages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DYLD_BIND_AT_LAUNCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImageLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RPathChain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//5. run all initializers
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;initializeMainExecutable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;1-instantiatefromloadedimage&quot;&gt;1. instantiateFromLoadedImage&lt;/h4&gt;
&lt;p&gt;dyld通过&lt;strong&gt;instantiateFromLoadedImage&lt;/strong&gt;方法初始化&lt;strong&gt;ImageLoader&lt;/strong&gt;并将我们&lt;strong&gt;可执行文件&lt;/strong&gt;加载进内存,生成对应的image（镜像）。每个Mach-O 文件都会对应一个ImageLoader实例。ImageLoader是一个抽象类，每一种具体的Mach-O 文件都会继承 ImageLoader。在加载时会根据Mach-O的格式不同选择生成不用的实例(如：&lt;strong&gt;ImageLoaderMachOClassic&lt;/strong&gt;、&lt;strong&gt;ImageLoaderMachOCompressed&lt;/strong&gt;)。而&lt;strong&gt;sMainExecutable&lt;/strong&gt;对应可执行文件，里面包含了我们项目中&lt;strong&gt;所有新建的类&lt;/strong&gt;。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//
// ImageLoader is an abstract base class.  To support loading a particular executable
// file format, you make a concrete subclass of ImageLoader.
//
// For each executable file (dynamic shared object) in use, an ImageLoader is instantiated.
//
// The ImageLoader base class does the work of linking together images, but it knows nothing
// about any particular file format.
//
//
class ImageLoader {
public:

	typedef uint32_t DefinitionFlags;
	static const DefinitionFlags kNoDefinitionOptions = 0;
	static const DefinitionFlags kWeakDefinition = 1;
	
	typedef uint32_t ReferenceFlags;
	static const ReferenceFlags kNoReferenceOptions = 0;
	static const ReferenceFlags kWeakReference = 1;
	static const ReferenceFlags kTentativeDefinition = 2;
	
	enum PrebindMode { kUseAllPrebinding, kUseSplitSegPrebinding, kUseAllButAppPredbinding, kUseNoPrebinding };
	enum BindingOptions { kBindingNone, kBindingLazyPointers, kBindingNeverSetLazyPointers };
	enum SharedRegionMode { kUseSharedRegion, kUsePrivateSharedRegion, kDontUseSharedRegion, kSharedRegionIsSharedCache };
	
	struct Symbol;  // abstact symbol
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-df21867ba98b660f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;ImageLoader&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-loadinserteddylib&quot;&gt;2. loadInsertedDylib&lt;/h4&gt;
&lt;p&gt;dyld通过&lt;strong&gt;loadInsertedDylib&lt;/strong&gt;方法将插入的lib加载进内存,生成对应的image。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static void loadInsertedDylib(const char* path)
{
	ImageLoader* image = NULL;
	try {
		LoadContext context;
		context.useSearchPaths		= false;
		context.useFallbackPaths	= false;
		context.useLdLibraryPath	= false;
		context.implicitRPath		= false;
		context.matchByInstallName	= false;
		context.dontLoad			= false;
		context.mustBeBundle		= false;
		context.mustBeDylib			= true;
		context.canBePIE			= false;
		context.origin				= NULL;	// can't use @loader_path with DYLD_INSERT_LIBRARIES
		context.rpath				= NULL;
		image = load(path, context);
	}
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;3-link-smainexecutable&quot;&gt;3. link sMainExecutable&lt;/h4&gt;
&lt;p&gt;链接instantiateFromLoadedImage生成的Images。&lt;/p&gt;

&lt;h4 id=&quot;4-link-image&quot;&gt;4. link image&lt;/h4&gt;
&lt;p&gt;链接loadInsertedDylib生成的Images。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Link&lt;/strong&gt;操作其实是调用Imageloader的Link方法，负责对image进行load(加载)、UpdateDepth（更新深度）、rebase(基地址复位)、bind(外部符号绑定)等。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void link(ImageLoader* image, bool forceLazysBound, bool neverUnload, const ImageLoader::RPathChain&amp;amp; loaderRPaths)
{        
    ...
	// process images
	try {
		image-&amp;gt;link(gLinkContext, forceLazysBound, false, neverUnload, loaderRPaths);
	}
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void ImageLoader::link(const LinkContext&amp;amp; context, bool forceLazysBound, bool preflightOnly, bool neverUnload, const RPathChain&amp;amp; loaderRPaths)
{
    ...
	this-&amp;gt;recursiveLoadLibraries(context, preflightOnly, loaderRPaths);
    ...
	this-&amp;gt;recursiveUpdateDepth(context.imageCount());
    ...	
 	this-&amp;gt;recursiveRebase(context);
    ...	
 	this-&amp;gt;recursiveBind(context, forceLazysBound, neverUnload);
    ...
	this-&amp;gt;recursiveGetDOFSections(context, dofs);
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;recursiveloadlibraries&quot;&gt;recursiveLoadLibraries&lt;/h5&gt;
&lt;p&gt;递归加载依赖的动态链接库。
可以使用&lt;strong&gt;otool -L 二进制文件路径&lt;/strong&gt;来列出程序的动态链接库。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cenghaihandeMacBook-Pro:QQ.app catchzeng$ otool -L QQ
QQ (architecture armv7):
	@rpath/TlibDy.framework/TlibDy (compatibility version 1.0.0, current version 1.0.0)
	@rpath/QQMainProject.framework/QQMainProject (compatibility version 1.0.0, current version 1.0.0)
	@rpath/GroupCommon.framework/GroupCommon (compatibility version 1.0.0, current version 1.0.0)
	/System/Library/Frameworks/Foundation.framework/Foundation (compatibility version 300.0.0, current version 1444.12.0)
	/usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.11)
	/System/Library/Frameworks/UIKit.framework/UIKit (compatibility version 1.0.0, current version 
	/System/Library/Frameworks/CFNetwork.framework/CFNetwork (compatibility version 1.0.0, current version 887.0.0)
	/usr/lib/libicucore.A.dylib (compatibility version 1.0.0, current version 59.1.0)
	/usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0)
	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.0.0)
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;UIKit 、Foundation、CFNetwork 等框架相信大家已经很熟悉了。而其中的libobjc.A.dylib 包含 runtime，libSystem.B.dylib 则包含像 libdispatch、libsystem_c 等系统级别的库，二者都是被默认添加到程序中的。由于动态链接库本身还可能依赖其他动态链接库，所以整个加载过程是递归进行的，以下几个操作同理都是&lt;strong&gt;递归&lt;/strong&gt;的。&lt;/p&gt;

&lt;h5 id=&quot;recursiverebase&quot;&gt;recursiveRebase&lt;/h5&gt;
&lt;p&gt;在以前，程序每次加载其在内存中的堆栈&lt;strong&gt;基地址&lt;/strong&gt;都是一样的，这意味着你的方法，变量等地址每次都一样的，这使得程序很不安全，后面就出现&lt;a href=&quot;https://baike.baidu.com/item/aslr/5779647?fr=aladdin&quot;&gt;ASLR（Address space layout randomization）&lt;/a&gt;，程序每次启动后地址都会随机变化，这样程序里所有的代码地址都是错的，需要重新对代码地址进行计算修复才能正常访问，这个操作就是Rebase。&lt;/p&gt;

&lt;h5 id=&quot;recursivebind&quot;&gt;recursiveBind&lt;/h5&gt;
&lt;p&gt;由于符号在不同的库里面，所以需要符号绑定（Bind）这个过程。
举个简单的例子，代码里面调用了 NSClassFromString. 但是NSClassFromString的代码和符号都是在 Foundation.framework 这个动态库里面。还没绑定之前就“不认识”NSClassFromString，所以需要Bind。&lt;/p&gt;

&lt;h4 id=&quot;5-initializemainexecutable&quot;&gt;5. initializeMainExecutable&lt;/h4&gt;
&lt;p&gt;调用所有image的Initalizer方法进行初始化。
这里可以利用环境变量&lt;strong&gt;DYLD_PRINT_INITIALIZERS=1&lt;/strong&gt;来打印出程序的各种依赖库的initializer方法：
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-a932419f6b8d3e9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;DYLD_PRINT_INITIALIZERS&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dyld: calling initializer function 0x103c5f9fe in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/usr/lib/libSystem.dylib
dyld: calling -init function 0x10278a3c6 in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/usr/lib/libBacktraceRecording.dylib
dyld: calling initializer function 0x1068e4d91 in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/usr/lib/libc++.1.dylib
dyld: calling -init function 0x107ba0f80 in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
dyld: calling initializer function 0x107d002c0 in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
dyld: calling initializer function 0x10a4ac8c0 in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/usr/lib/libnetwork.dylib
dyld: calling initializer function 0x10753973e in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/CFNetwork.framework/CFNetwork
dyld: calling initializer function 0x107456500 in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/CFNetwork.framework/CFNetwork
dyld: calling initializer function 0x107456529 in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/CFNetwork.framework/CFNetwork
dyld: calling initializer function 0x10745653d in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/CFNetwork.framework/CFNetwork
dyld: calling initializer function 0x107456551 in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/CFNetwork.framework/CFNetwork
dyld: calling initializer function 0x1076189b3 in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/CFNetwork.framework/CFNetwork
dyld: calling initializer function 0x102f3b5e1 in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Foundation.framework/Foundation
dyld: calling -init function 0x1027c11c3 in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/usr/lib/libMainThreadChecker.dylib
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这里最开始调用的libSystem.dylib的initializer比较特殊，因为runtime初始化就在这一阶段。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/*
 * libsyscall_initializer() initializes all of libSystem.dylib &amp;lt;rdar://problem/4892197&amp;gt;
 */
static __attribute__((constructor)) 
void libSystem_initializer(int argc, const char* argv[], const char* envp[], const char* apple[], const struct ProgramVars* vars)
{
	_libkernel_functions_t libkernel_funcs = {
		.get_reply_port = _mig_get_reply_port,
		.set_reply_port = _mig_set_reply_port,
		.get_errno = __error,
		.set_errno = cthread_set_errno_self,
		.dlsym = dlsym,
	};

	_libkernel_init(libkernel_funcs);

	bootstrap_init();
	mach_init();
	pthread_init();
	__libc_init(vars, libSystem_atfork_prepare, libSystem_atfork_parent, libSystem_atfork_child, apple);
	__keymgr_initializer();
	_dyld_initializer();
//！！！就是这里了
	libdispatch_init();
	_libxpc_initializer();

	__stack_logging_early_finished();

	/* &amp;lt;rdar://problem/11588042&amp;gt;
	 * C99 standard has the following in section 7.5(3):
	 * &quot;The value of errno is zero at program startup, but is never set
	 * to zero by any library function.&quot;
	 */
	errno = 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;libdispatch_init初始化会调用runtime的_objc_init初始化方法，这里我们利用符号断点调试可以看到程序的调用栈，也能验证以上的过程。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-f47c66ed03d820d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;符号断点&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/943491-9d60295df1cf5405.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;调用栈&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;main&quot;&gt;Main&lt;/h2&gt;
&lt;p&gt;当所有的依赖库库的lnitializer都调用完后，dyld的main函数会返回程序的main函数地址，main函数被调用。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main(int argc, char * argv[]) {
    @autoreleasepool {
        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/1622933-uiapplicationmain?language=occ&quot;&gt;UIApplicationMain&lt;/a&gt;，它主要是创建了一个application对象和设置事件循环（autoreleasepool）。至此程序便开始运行。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;本章从ipa文件-》Mach-O-》dyld-》Main简单讲解了程序启动的一些事情，但并不代表着启动的全部，有兴趣的朋友可以继续往深挖。本章是iOS进阶的第一篇，后续会持续更新。如果大家有感兴趣的主题，也可以到Q群里联系我。&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Mar 2018 16:38:27 +0800</pubDate>
        <link>http://localhost:4000/2018/03/23/iOS%E8%BF%9B%E9%98%B6-%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E9%82%A3%E4%BA%9B%E4%BA%8B/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/23/iOS%E8%BF%9B%E9%98%B6-%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
  </channel>
</rss>
