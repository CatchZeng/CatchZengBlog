<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CatchZeng Blog</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 05 May 2017 16:26:03 +0800</pubDate>
    <lastBuildDate>Fri, 05 May 2017 16:26:03 +0800</lastBuildDate>
    <generator>Jekyll v3.4.2</generator>
    
      <item>
        <title>iOS聊聊设计模式原则（二） -- 接口隔离原则</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;接口隔离原则isp-interface-segregation-principle&quot;&gt;接口隔离原则（ISP ：Interface Segregation Principle）&lt;/h1&gt;

&lt;h2 id=&quot;定义&quot;&gt;定义&lt;/h2&gt;
&lt;p&gt;客户端不应该依赖它不需要的接口。
一个类对另一个类的依赖应该建立在最小的接口上。&lt;/p&gt;

&lt;h2 id=&quot;由来&quot;&gt;由来&lt;/h2&gt;
&lt;p&gt;类A通过接口I依赖类B，类C通过接口I依赖类D，如果接口I对于类A和类B来说不是最小接口，则类B和类D必须去实现他们不需要的方法。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-60ee2892793d217f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;ISP&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;code&quot;&gt;Code&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//实现的多余方法
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//实现的多余方法
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSObject&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;D&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//实现的多余方法
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//实现的多余方法
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSObject&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;解决方案&quot;&gt;解决方案&lt;/h2&gt;
&lt;p&gt;将臃肿的接口I拆分为独立的几个接口，类A和类C分别与他们需要的接口建立依赖关系。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-bc4fe38b16b450de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;ISP&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;code-1&quot;&gt;Code&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;I2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;I3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSObject&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;



&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;D&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSObject&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;优点&quot;&gt;优点&lt;/h2&gt;
&lt;p&gt;建立单一接口，不要建立庞大臃肿的接口，尽量细化接口，接口中的方法尽量少。也就是说，我们要为各个类建立专用的接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。在程序设计中，依赖几个专用的接口要比依赖一个综合的接口更灵活。接口是设计时对外部设定的“契约”，通过分散定义多个接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。&lt;/p&gt;

&lt;h2 id=&quot;思考&quot;&gt;思考&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;你是否觉得ISP跟之前的单一职责原则很相似？
其实不然。其一，单一职责原则原注重的是职责；而接口隔离原则注重对接口依赖的隔离。其二，单一职责原则主要是约束类，其次才是接口和方法，它针对的是程序中的实现和细节；而接口隔离原则主要约束接口接口，主要针对抽象，针对程序整体框架的构建。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;你是否觉得在iOS 中开发可以用协议的可选实现（@optional）来解决ISP问题？
其实不然，@optional关注的是可有可无，但这种可有可无不是完全没有作用的。而ISP关注的是完全不需要实现的方法，对于实现类来说完全没有作用的。
举个例子来说明吧。
网络请求协议&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NetworkProtocol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loadSuccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loadFailed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@optional&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loadCancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;对于loadCancel方法，它跟网络请求是相关的，但是它不希望每个实现者都必须处理它，所以使用@optional。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NetworkProtocol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loadSuccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loadFailed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@optional&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helloWorld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;另外一种情况类似于helloWorld方法，这个方法跟网络请求协议完全没有相关，只是有个依赖需要他实现这个方法，这个时候用@optional就不是很合适，应该将helloWorld放到一个单独的协议中，让需要实现它的类实现helloWorld这个协议。&lt;/p&gt;

&lt;h2 id=&quot;注意点&quot;&gt;注意点&lt;/h2&gt;

&lt;p&gt;接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不挣的事实，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度。
为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。
提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。
运用接口隔离原则，一定要适度，接口设计的过大或过小都不好。设计接口的时候，只有多花些时间去思考和筹划，才能准确地实践这一原则。&lt;/p&gt;
</description>
        <pubDate>Thu, 04 May 2017 17:38:27 +0800</pubDate>
        <link>http://localhost:4000/2017/05/04/iOS%E8%81%8A%E8%81%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99-%E4%BA%8C-%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/04/iOS%E8%81%8A%E8%81%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99-%E4%BA%8C-%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS开发见闻-第21期</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;欢迎加QQ群讨论：157672725&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;文章&quot;&gt;文章&lt;/h2&gt;

&lt;p&gt;1.&lt;a href=&quot;http://www.jianshu.com/p/69ce01e15042?from=jiantop.com&quot;&gt;iOS无埋点数据SDK实践之路&lt;/a&gt; : 本篇文章是基于 网易乐得无埋点数据SDK 总结而成。SDK 已经具备不需要代码埋点就能自动的、动态可配的、全面且正确 的收集用户在使用 App 时的所有事件数据。
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1446357-c10801dd65c3526d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;iOS无埋点数据SDK实践之路&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;http://www.cocoachina.com/ios/20161220/18400.html&quot;&gt;滴滴 iOS 动态化方案 DynamicCocoa 的诞生与起航&lt;/a&gt; : 滴滴出行客户端App架构团队在对ReactNative、Weex进行调研尝试后发现并不适用于滴滴现有业务，由此自研了iOS动态化方案——DynamicCocoa，在这篇文章中，作者详细分享了它的背景以及具体功能实现。&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;https://casatwy.com/communication_patterns.html&quot;&gt;对象间交互模式&lt;/a&gt; ：来之casa大神的好文章，不解释，看吧。&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;http://blog.cnbang.net/tech/3386/&quot;&gt;iOS App 签名的原理&lt;/a&gt; : iOS 签名机制挺复杂，各种证书，Provisioning Profile，entitlements，CertificateSigningRequest，p12，AppID，概念一堆，也很容易出错，本文尝试从原理出发，一步步推出为什么会有这么多概念。&lt;/p&gt;

&lt;h2 id=&quot;工具&quot;&gt;工具&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;http://www.mikecrm.com/?ref=form&quot;&gt;麦客CRM&lt;/a&gt;：一款在线表单制作工具，同时也是强大的客户信息处理和关系管理系统。它可以帮助你轻松完成信息收集与整理，实现客户挖掘与消息推送，并开展持续营销。
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-927fd66ec150eba6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;麦客CRM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;http://www.bazhuayu.com&quot;&gt;八爪鱼采集器&lt;/a&gt; : 喜欢采集网页数据的朋友可以试试。
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-9ed85c888eb984d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;八爪鱼采集器&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;https://paw.cloud&quot;&gt;paw&lt;/a&gt; : Mac上先进的API工具。
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-1209f8c0c9019ed6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;paw&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;https://mixpanel.com&quot;&gt;mixpanel&lt;/a&gt;:  mixpanel推出实时视觉化用户数据监测功能Streams帮助网站主监测用户在该网站的活动。
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-436c26a02a3ce863.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;mixpanel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;a href=&quot;https://simpholders.com/&quot;&gt;simpholders&lt;/a&gt;：SimPholders 是一款Mac上实用的iPhone模拟器辅助开发工具，SimPholders可以帮助开发者快速访问iPhone模拟器应用，能够在菜单栏上快速的访问iPhone Simulator中的应用的文件夹，从而帮助我们进行应用或游戏的开发，还可以直接在模拟器中运行应用、删除缓存、删除应用等，能够节省开发者的很多时间!
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-ba831bccf281e41d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;simpholders&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;开源&quot;&gt;开源&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;https://github.com/audiokit/AudioKit&quot;&gt;AudioKit&lt;/a&gt; : 一个高级音频框架，由声学设计师、程序员和音乐家为 iOS 专门打造。在底层，AudioKit 混合了 Swift、O-C、C++ 和 C，负责和苹果的声频部件 API 打交道。所有神奇的（同时十分复杂的）技术都封装成为极其友好的 Swift API，你甚至可以直接在 Xcode 的 Playground 中使用它。
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-7d00f9cee4a88116.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;AudioKit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;https://github.com/alibaba/BeeHive/blob/master/README-CN.md&quot;&gt;BeeHive&lt;/a&gt; : 用于iOS的App模块化编程的框架实现方案，吸收了Spring框架Service的理念来实现模块间的API耦合。
&lt;img src=&quot;https://camo.githubusercontent.com/686d58ea786e73b5a7562267e25720c922605db6/687474703a2f2f67746d7330322e616c6963646e2e636f6d2f7470732f69322f54423164687946494658585858617661585858376a6a62534658582d3531352d3233332e6a70675f343030783430302e6a7067&quot; alt=&quot;BeeHive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;https://github.com/philackm/Scrollable-GraphView&quot;&gt;Scrollable-GraphView&lt;/a&gt; : 一款可滚动的图标，效果相当不错。
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-5cda4da48330e7de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Scrollable-GraphView&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;https://github.com/SwiftyBeaver/SwiftyBeaver&quot;&gt;SwiftyBeaver&lt;/a&gt; : Swift版的log框架，另外配有查看工具，点个赞。
&lt;img src=&quot;https://cloud.githubusercontent.com/assets/564725/19889302/73b1ee84-a034-11e6-8753-2d060502397c.jpg&quot; alt=&quot;SwiftyBeaver&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Mar 2017 17:38:27 +0800</pubDate>
        <link>http://localhost:4000/2017/03/14/iOS%E5%BC%80%E5%8F%91%E8%A7%81%E9%97%BB-%E7%AC%AC21%E6%9C%9F/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/14/iOS%E5%BC%80%E5%8F%91%E8%A7%81%E9%97%BB-%E7%AC%AC21%E6%9C%9F/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS聊聊设计模式原则（一） -- 单一职责原则</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;单一职责原则srpsingle-responsibility-principle&quot;&gt;单一职责原则（SRP：Single responsibility principle）&lt;/h1&gt;

&lt;h2 id=&quot;定义&quot;&gt;定义&lt;/h2&gt;
&lt;p&gt;一个类应该只有一个发生变化的原因，即一个类只负责一项职责。
如果一个类有多个职责，这些职责就耦合在了一起。当一个职责发生变化时，可能会影响其它的职责。另外，多个职责耦合在一起会影响复用性。
此原则的核心是解耦和增强内聚性。&lt;/p&gt;

&lt;h2 id=&quot;由来&quot;&gt;由来&lt;/h2&gt;
&lt;p&gt;类A负责两个职责：职责P1，职责P2。当由于职责P1需求发生改变而需要修改类A时，有可能会导致原本运行正常的职责P2功能发生故障。&lt;/p&gt;

&lt;h2 id=&quot;解决方案&quot;&gt;解决方案&lt;/h2&gt;
&lt;p&gt;遵循SRP。分别建立两个类A1、A2，使A1完成职责P1，A2完成职责P2。这样，当修改类A1时，不会影响到职责A2；同理，当修改A2时，也不会影响到职责P1。&lt;/p&gt;

&lt;h2 id=&quot;优点&quot;&gt;优点&lt;/h2&gt;
&lt;p&gt;降低类的复杂度，一个类只负责一项职责，其逻辑肯定要比负责多项职责简单的多。
提高类的可读性，提高系统的可维护性。
变更引起的风险降低，变更是必然的，如果SRP遵守的好，当修改一个功能时，可以显著降低对其他功能的影响。&lt;/p&gt;

&lt;h2 id=&quot;eg&quot;&gt;e.g.&lt;/h2&gt;
&lt;p&gt;iOS开发中，SRP最好的反例的应该就是 &lt;a href=&quot;http://khanlou.com/2015/12/massive-view-controller/?hmsr=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&quot;&gt;Massive View Controller&lt;/a&gt;。比如随便写一个简单的应用程序，一般都会生成一个ViewController类，于是我们将各种各样的代码，算法、网络请求、数据库访问等等都放在这个类里面，这就意味着，无论任何需求变化，都要来修改ViewController这个类，这其实是很糟糕的，维护麻烦、复用不可能、缺乏灵活性等。关于这点网上也有很多解决方法：&lt;a href=&quot;https://toutiao.io/posts/xxr604/preview&quot;&gt;8 种模式帮你告别 Massive View Controller&lt;/a&gt;，但无论什么方法，都是在提倡优化职责划分，也就是SRP的思想。&lt;/p&gt;

&lt;p&gt;曾几何时我们很自然地将Model传给Cell，然后让Cell解析Model去渲染视图，并且感觉没有什么不妥，美其曰“Cell的封装”。代码如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TestCell *cell = [tableView dequeueReusableCellWithIdentifier:@&quot;TestCell&quot;];
if (!cell) {
        cell = (TestCell *)[[[NSBundle mainBundle] loadNibNamed:@&quot;TestCell&quot; owner:self options:nil] lastObject];
}
TestModel *model = self.dataList[indexPath.row];
[cell configWithModel:model];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;殊不知这已经违背了SRP，Cell的职责是描述与渲染自身,解析Model这个职责不属于Cell，并且在Cell中引入Model会增加不必要的依赖，Cell需要根据Model的改变而做出相应的修改，不利于Cell的复用。做过Android开发的同学知道，其实如何让Model的数据呈现在Cell上是&lt;a href=&quot;http://blog.csdn.net/fznpcy/article/details/8658155/&quot;&gt;Adapter&lt;/a&gt;需要做的事情。&lt;/p&gt;

&lt;h2 id=&quot;一些看法&quot;&gt;一些看法&lt;/h2&gt;
&lt;p&gt;用一个场景来描绘下。
用一个类描述程序员写代码&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Programmer&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;%@写OC代码&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Client
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Programmer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;programmer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Programmer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;programmer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;iOS工程师&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Result
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iOS&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;工程师写&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OC&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;代码”&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;殊不知，iOS只是代码界的一部分&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[programmer program:@&quot;前端工程师&quot;];

//Result
“前端工程师写OC代码”
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;发现不对劲了，这个时候想到了SRP，要不这样改改&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOSProgrammer&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;%@写OC代码&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebProgrammer&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;%@写JS代码&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Client
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOSProgrammer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iOSprogrammer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOSProgrammer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iOSprogrammer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;iOS工程师&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;WebProgrammer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webProgrammer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebProgrammer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webProgrammer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;前端工程师&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Result
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iOS&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;工程师写&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OC&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;代码”&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;“前端工程师写&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JS&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;代码”&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;我们会发现如果这样修改花销是很大的，除了将原来的类分解之外，还需要修改客户端。而直接修改类Programmer来达成目的虽然违背了SRP但花销却小的多，代码如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Programmer&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;iOS工程师&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;%@写OC代码&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;前端工程师&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;%@写JS代码&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;可以看到，这种修改方式要简单的多。但是却存在着隐患：有一天需要后台程序员写PHP，则又需要修改Programmer类的program方法，而对原有代码的修改会对调用iOS工程师、前端工程师带来风险。这种修改方式直接在&lt;strong&gt;&lt;em&gt;代码级别上&lt;/em&gt;&lt;/strong&gt;违背了SRP，虽然修改起来最简单，但隐患却是最大。
那么还有别的方式吗？答案是肯定的，代码如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Programmer&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;%@写OC代码&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;%@写JS代码&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Client
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Programmer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;programmer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Programmer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;programmer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;iOS工程师&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Programmer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;programmer2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Programmer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;programmer2&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;program2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;前端工程师&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Result
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iOS&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;工程师写&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OC&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;代码”&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;“前端工程师写&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JS&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;代码”&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这种在类中新加一个方法的修改方式，虽然也违背了SRP，但在方法级别上却是符合SRP的，因为它并没有动原来方法的代码。
这三种方式各有优缺点，在开发中，需要根据实际情况来确定。需要注意的是：只有逻辑足够简单，才可以在&lt;strong&gt;&lt;em&gt;代码级别上&lt;/em&gt;&lt;/strong&gt;违反SRP；只有类中方法数量足够少，才可以在&lt;strong&gt;&lt;em&gt;方法级别上&lt;/em&gt;&lt;/strong&gt;违反SRP；&lt;/p&gt;

&lt;p&gt;很多人对SRP不屑一顾，因为它太简单了。但即便是经验丰富的程序员写出的程序，也会有违背这一原则的代码存在。其原因是因为有职责扩散。所谓职责扩散，就是因为某种原因，职责P被分化为粒度更细的职责P1和P2。需要注意的是：在职责扩散到我们无法控制的程度之前，要立刻对代码进行重构。&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Feb 2017 17:38:27 +0800</pubDate>
        <link>http://localhost:4000/2017/02/19/iOS%E8%81%8A%E8%81%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99-%E4%B8%80-%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/19/iOS%E8%81%8A%E8%81%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99-%E4%B8%80-%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>持续集成 -- 理论篇</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;一软件开发面临的问题&quot;&gt;一、软件开发面临的问题&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;确定软件需求&lt;/li&gt;
  &lt;li&gt;确定项目进度（可见性）&lt;/li&gt;
  &lt;li&gt;如何以最快速度将软件交付给用户？&lt;/li&gt;
  &lt;li&gt;如何让开发、测试、产品经理、运维人员高效工作？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;软件需要满足于业务目的，质量不等于完美，“追求完美是把事情做好的大敌”。&lt;/p&gt;

&lt;h2 id=&quot;二持续集成&quot;&gt;二、持续集成&lt;/h2&gt;
&lt;p&gt;持续集成是一种软件开发实践【&lt;strong&gt;不是工具&lt;/strong&gt;】，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次。每次集成都通过自动化的构建（包括编译，发布，自动化测试)来验证，从而尽快地发现集成错误。 — Martin Fowler&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-3070048477120ab3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;持续集成&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;三持续集成的价值&quot;&gt;三、持续集成的价值&lt;/h2&gt;

&lt;h4 id=&quot;1协作&quot;&gt;1.协作&lt;/h4&gt;
&lt;p&gt;让开发的软件一直处于可工作状态&lt;/p&gt;

&lt;h4 id=&quot;2开发人员&quot;&gt;2.开发人员&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;尽快发现问题
解决问题的关键是尽快发现问题
减少引入缺陷与修复缺陷之间的时间&lt;/li&gt;
  &lt;li&gt;防止分支大幅偏离主干&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;减少重复过程&amp;amp;人为错误：
以自动化编译、发布、测试…，代替手工操作
避免了一些人为的错误(build号忘加1、Debug开关忘关)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;建立团队对开发产品的信心&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3测试人员&quot;&gt;3.测试人员&lt;/h4&gt;
&lt;p&gt;小步增量，易于发现问题，并快速反馈给开发人员&lt;/p&gt;

&lt;h3 id=&quot;四小结&quot;&gt;四、小结&lt;/h3&gt;
&lt;p&gt;集成的目的其实是沟通：集成可以让开发者告诉其他人他们都改了什么东西，频繁的沟通可以让开发者更快地了解变化。&lt;/p&gt;

&lt;h3 id=&quot;五持续集成的前提条件&quot;&gt;五、持续集成的前提条件&lt;/h3&gt;
&lt;h4 id=&quot;1团队共识&quot;&gt;1.团队共识&lt;/h4&gt;
&lt;p&gt;持续集成不是工具，是一种实践，需要投入并遵守一些规则，才能提高质量&lt;/p&gt;

&lt;h4 id=&quot;2频繁提交&quot;&gt;2.频繁提交&lt;/h4&gt;
&lt;p&gt;“如果你遇到一件很痛苦的事情，似乎比较好的建议就是更频繁地做这件事情”                                                                                                   &lt;br /&gt;
— Martin Fowler
哲学：一件事情很难，又必须去做，不妨经常去做，每次做一点，分而治之，滴水穿石、跬步千里 —— 早集成、常集成
解决问题的关键是尽早发现问题
每过几个小时就提交一次，冲突也会在几个小时之内被发现
两次提交之间只有几个小时的修改，产生这些问题只可能在很有限的几个地方
提交的越多，需要查找冲突错误的地方就越少，改起来也越快
用差异调试比较当前版本和之前没有 bug 的版本
客观上会鼓励开发者将工作分解成以小时计的小块&lt;/p&gt;

&lt;h4 id=&quot;3保证每次提交的质量&quot;&gt;3.保证每次提交的质量&lt;/h4&gt;
&lt;p&gt;每次提交的版本都有可能产生一个可发布的版本
每次提交的质量不好，不但会影响自己，而且会影响别人&lt;/p&gt;

&lt;h4 id=&quot;4不单单源代码&quot;&gt;4.不单单源代码&lt;/h4&gt;
&lt;p&gt;与项目相关的所有内容（代码、测试代码、数据库脚本、构建与部署脚本、 IDE配置文件，以及所有用于创建、安装、运行、测试应用程序的东西）
关于这点，可以参考&lt;a href=&quot;http://www.infoq.com/cn/news/2012/01/ci-everything-is-code&quot;&gt;持续集成之“Everything is code”&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;5全面的自动化构建测试套件&quot;&gt;5.全面的自动化构建、测试套件&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;10分钟 build（快速的build）
没有什么比缓慢的 build 更能危害持续集成活动
一旦提交 build 成功，其他人就可以放心地基于这些代码工作了&lt;/li&gt;
  &lt;li&gt;在不同的情况中 build 不同的 target&lt;/li&gt;
  &lt;li&gt;每次代码提交后都会在持续集成服务器上触发一次构建
构建不只是编译，可能包含编译、测试、审查和部署以及其他一些事情，将代码放在一起，并让其可以作为一个一致的单元运行的过程&lt;/li&gt;
  &lt;li&gt;自动化标准
任何人都应该能从一个干净的计算机上 check out 源代码，然后敲入一条命令，就可以得到能在这台机器上运行的系统&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;6本地环境与持续集成环境测试环境生产环境一致&quot;&gt;6.本地环境与持续集成环境、测试环境、生产环境一致&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-db7b14bb780014e1.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;deployment-plan.gif&quot; /&gt;
关于环境可参考：&lt;a href=&quot;http://dltj.org/article/software-development-practice/&quot;&gt;Traditional Development/Integration/Staging/Production Practice for Software Development&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;六必要的实践&quot;&gt;六、必要的实践&lt;/h3&gt;
&lt;h4 id=&quot;1最新的正确版本作为起点&quot;&gt;1.“最新的正确版本”作为起点&lt;/h4&gt;

&lt;h4 id=&quot;2时刻准备回滚到前一个版本&quot;&gt;2.时刻准备回滚到前一个版本&lt;/h4&gt;

&lt;h4 id=&quot;3修复破坏应用程序的任意修改是最高优先级的任务&quot;&gt;3.修复破坏应用程序的任意修改是最高优先级的任务&lt;/h4&gt;
&lt;p&gt;10分钟修复不完，需要回滚&amp;amp;在回滚之前要规定一个修复时间&lt;/p&gt;

&lt;h4 id=&quot;4等提交测试通过后再继续工作&quot;&gt;4.等提交测试通过后再继续工作&lt;/h4&gt;
&lt;p&gt;给自己喝一杯咖啡的时间
等待集成返回结果后继续工作能减少错误，也能让别人在最新的正确版本作为起点&lt;/p&gt;

&lt;h4 id=&quot;5提交前在本地运行所有的提交测试&quot;&gt;5.提交前在本地运行所有的提交测试&lt;/h4&gt;
&lt;p&gt;现代CI服务器提供“预测试提交”、“个人构建”&lt;/p&gt;

&lt;h4 id=&quot;6构建失败后不要提交新代码&quot;&gt;6.构建失败后不要提交新代码&lt;/h4&gt;

&lt;h4 id=&quot;7谁提交谁负责&quot;&gt;7.谁提交，谁负责&lt;/h4&gt;
&lt;p&gt;监视 mainline 上的构建，失败时及时修复
如果在下班前提交了代码，那在 mainline 构建成功之前就不能回家&lt;/p&gt;

&lt;h4 id=&quot;8勿将失败的测试注释掉&quot;&gt;8.勿将失败的测试注释掉&lt;/h4&gt;
&lt;p&gt;修改代码、修改测试、删除测试&lt;/p&gt;

&lt;h4 id=&quot;9测试驱动开发&quot;&gt;9.测试驱动开发&lt;/h4&gt;

&lt;h3 id=&quot;七-持续集成实践步骤&quot;&gt;七、 持续集成实践步骤&lt;/h3&gt;

&lt;h4 id=&quot;1自动化构建&quot;&gt;1.自动化构建&lt;/h4&gt;

&lt;h4 id=&quot;2引入自动化测试&quot;&gt;2.引入自动化测试&lt;/h4&gt;
&lt;p&gt;试着指出主要出错的地方，并要让自动化测试暴露这些错误&lt;/p&gt;

&lt;h4 id=&quot;3试着加快build-的速度&quot;&gt;3.试着加快build 的速度&lt;/h4&gt;
&lt;p&gt;10分钟build&lt;/p&gt;

&lt;h4 id=&quot;4ci选型&quot;&gt;4.CI选型&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ligurio/Continuous-Integration-services/blob/master/continuous-integration-services-list.md&quot;&gt;https://github.com/ligurio/Continuous-Integration-services/blob/master/continuous-integration-services-list.md&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;5寻找老司机帮忙很重要&quot;&gt;5.寻找老司机帮忙（很重要）&lt;/h4&gt;
&lt;p&gt;老司机理论+实践经验丰富&lt;/p&gt;

&lt;h1 id=&quot;详见&quot;&gt;详见&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/CatchZeng/ContinuousIntegration&quot;&gt;https://github.com/CatchZeng/ContinuousIntegration&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Feb 2017 17:38:27 +0800</pubDate>
        <link>http://localhost:4000/2017/02/10/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90-%E7%90%86%E8%AE%BA%E7%AF%87/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/10/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90-%E7%90%86%E8%AE%BA%E7%AF%87/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>一起为Xcode8写插件吧</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;一xcode-source-editor-extension-简介&quot;&gt;一、Xcode Source Editor Extension 简介&lt;/h2&gt;
&lt;p&gt;在Xcode8的以前，开发者可以在Xccode运行时通过注入代码来实现插件的功能。插件可以在Alcatraz上面提交和分发。不过Xcode8禁止了该方式的插件安装，转而向开发者提供了Xcode Source Editor Extension（以下简称Extension）的方式来做插件。&lt;/p&gt;

&lt;h4 id=&quot;extension特性安全性&quot;&gt;Extension特性（安全性）&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;支持上架到AppStore&lt;/li&gt;
  &lt;li&gt;每个Extension运行在独立的进程，如果它崩溃了，不会引起Xcode的崩溃，且会有错误提示&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;extension不足功能性&quot;&gt;Extension不足（功能性）&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;无UI交互&lt;/li&gt;
  &lt;li&gt;只能够在开发者调用相关命令的时候直接的修改代码，具体表现为
&lt;strong&gt;获取正在编辑的文本&lt;/strong&gt;
&lt;strong&gt;获取选中的区域&lt;/strong&gt;
&lt;strong&gt;替换正在编辑的文本&lt;/strong&gt;
&lt;strong&gt;选中正在编辑的文本&lt;/strong&gt;
&lt;strong&gt;在Editor菜单中生成一个子菜单，用于调用插件&lt;/strong&gt;
&lt;strong&gt;绑定快捷键&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Extension不能在后台运行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;虽然Extension有诸多不足，但是没有插件写代码是件痛苦的事情，所以在空闲的时候我也做了一些需要用到的Extension，帮助提高开发效率。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;删除选中行的Xcode8插件：
https://github.com/CatchZeng/DeleteLine
&lt;img src=&quot;https://github.com/CatchZeng/DeleteLine/raw/master/demo.gif&quot; alt=&quot;删除选中行的Xcode8插件&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;快速导入头文件的Xcode8插件: 
https://github.com/CatchZeng/ImportSourceEditor
&lt;img src=&quot;https://github.com/CatchZeng/ImportSourceEditor/raw/master/swiftDemo.gif&quot; alt=&quot;Swift&quot; /&gt;
&lt;img src=&quot;https://github.com/CatchZeng/ImportSourceEditor/raw/master/demo.gif&quot; alt=&quot;OC&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;快速添加定义的#pragma mark 的Xcode8插件
https://github.com/CatchZeng/PragmaMarkSourceEditor&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/CatchZeng/PragmaMarkSourceEditor/raw/master/demo.gif&quot; alt=&quot;快速添加定义的#pragma mark 的Xcode8插件&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;二xcode-source-editor-extension-实例&quot;&gt;二、Xcode Source Editor Extension 实例&lt;/h2&gt;
&lt;p&gt;下面以删除选中行的Xcode8插件为例，详细介绍Extension的实现。&lt;/p&gt;
&lt;h4 id=&quot;1创建mac工程&quot;&gt;1.创建mac工程&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/img/in-post/post-plugin/1.png&quot; alt=&quot;创建mac工程&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2add-target&quot;&gt;2.Add Target&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/img/in-post/post-plugin/2.png&quot; alt=&quot;Add Target&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/post-plugin/3.png&quot; alt=&quot;选择Xcode Source Editor Extension &quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/post-plugin/4.png&quot; alt=&quot;输出信息&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3工程结构&quot;&gt;3.工程结构&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/img/in-post/post-plugin/5.png&quot; alt=&quot;工程结构&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4编写extension代码sourceeditorcommandm&quot;&gt;4.编写Extension代码(SourceEditorCommand.m)&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;performCommandWithInvocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XCSourceEditorCommandInvocation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;invocation&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nilOrError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;completionHandler&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//有选中了才删除
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;XCSourceTextRange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;//开始删除的位置
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;NSUInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//删除的行数
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;NSUInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Index Set
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;NSIndexSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSIndexSet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;indexSetWithIndexesInRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSMakeRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//移除指定代码
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;removeObjectsAtIndexes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;5修改extension显示名称&quot;&gt;5.修改Extension显示名称&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/img/in-post/post-plugin/6.png&quot; alt=&quot;修改Extension显示名称&quot; /&gt;
&lt;img src=&quot;/img/in-post/post-plugin/7.png&quot; alt=&quot;修改Extension显示名称&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;6run-deleteplugin&quot;&gt;6.Run DeletePlugin&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/img/in-post/post-plugin/8.png&quot; alt=&quot;Run&quot; /&gt;
&lt;img src=&quot;/img/in-post/post-plugin/9.png&quot; alt=&quot;随意选择一个工程打开&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;7测试extension&quot;&gt;7.测试Extension&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/img/in-post/post-plugin/10.png&quot; alt=&quot;测试Extension&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;8绑定快捷键&quot;&gt;8.绑定快捷键&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/img/in-post/post-plugin/11.png&quot; alt=&quot;绑定快捷键&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面解释一下Extension的Code部分&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;XCSourceEditorCommand 当插件触发后，在代理方法里面可拦截到消息（XCSourceEditorCommandInvocation）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;XCSourceEditorCommandInvocation 存放着用来区分Extension的唯一标示（identifier） 和 数据（XCSourceTextBuffer）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;XCSourceTextBuffer主要有两个属性需要了解&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//当前的文本
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSMutableArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//选中的区域
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSMutableArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XCSourceTextRange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Delete Extension的流程如下：&lt;/p&gt;

&lt;h6 id=&quot;1菜单或快捷键触发delete-extension&quot;&gt;1.菜单或快捷键触发Delete Extension&lt;/h6&gt;
&lt;h6 id=&quot;2xcsourceeditorcommand-拦截到消息&quot;&gt;2.XCSourceEditorCommand 拦截到消息&lt;/h6&gt;
&lt;h6 id=&quot;3从xcsourceeditorcommandinvocation-中拿到-xcsourcetextbuffer&quot;&gt;3.从XCSourceEditorCommandInvocation 中拿到 XCSourceTextBuffer&lt;/h6&gt;
&lt;h6 id=&quot;4在xcsourcetextbuffer中分析需要删除的行&quot;&gt;4.在XCSourceTextBuffer中分析需要删除的行&lt;/h6&gt;
&lt;h6 id=&quot;5删除选中行&quot;&gt;5.删除选中行&lt;/h6&gt;

&lt;h2 id=&quot;三总结&quot;&gt;三、总结&lt;/h2&gt;
&lt;p&gt;最后，一起为Xcode8写插件吧…&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Nov 2016 17:38:27 +0800</pubDate>
        <link>http://localhost:4000/2016/11/16/%E4%B8%80%E8%B5%B7%E4%B8%BAXcode8%E5%86%99%E6%8F%92%E4%BB%B6%E5%90%A7/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/11/16/%E4%B8%80%E8%B5%B7%E4%B8%BAXcode8%E5%86%99%E6%8F%92%E4%BB%B6%E5%90%A7/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>使用Cordova开发iOS App -- 打包插件及JS脚本</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;在&lt;a href=&quot;http://catchzeng.com/2016/09/21/使用Cordova开发iOS-App-开发iOS插件/&quot;&gt;上一篇–开发iOS插件&lt;/a&gt;中我们开发了一个插件，本篇将讲解如何将插件打包。&lt;/p&gt;

&lt;h3 id=&quot;一创建插件包&quot;&gt;一、创建插件包&lt;/h3&gt;
&lt;p&gt;首先在桌面上创建一个文件夹com.catchzeng.testplugin(遵守命名规范),并创建子文件夹及子文件如下图,将插件的代码复制到ios文件夹下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/post-cordova3/1.png&quot; alt=&quot;Plugins&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/post-cordova3/2.png&quot; alt=&quot;Plugins&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;二编写js代码&quot;&gt;二、编写JS代码&lt;/h3&gt;
&lt;p&gt;编写testPlugin.js，向外部暴露testModel的testPlugin方法，这便是前端人员需要调用的接口。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var exec = require(&quot;cordova/exec&quot;);

function TestModel() {};

TestModel.prototype.testPlugin = function (success,fail,option) {
     exec(success, fail, 'testPlugin', 'testWithTitle', option);
};

var testModel = new TestModel();
module.exports = testModel;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;三配置pluginxml文件&quot;&gt;三、配置plugin.xml文件&lt;/h3&gt;
&lt;p&gt;配置plugin.xml 就是为了告诉cordova我们的文件路径在哪,我们的oc类名是什么,oc对象名是什么,js类名及js对象名是什么等信息。这样cordova在安装插件时,才能找到正确的插件文件。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://phonegap.com/ns/plugins/1.0&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.catchzeng.testplugin&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;engines&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;engine&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cordova&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;=3.3.0&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/engines&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;testPlugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;测试插件&lt;span class=&quot;nt&quot;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;js-module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;www/testPlugin.js&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testModel&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;clobbers&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testModel&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/js-module&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;platform&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ios&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;source-file&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;src/ios/TestPlugin.m&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;header-file&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;src/ios/TestPlugin.h&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;source-file&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;src/ios/TestViewController.m&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;header-file&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;src/ios/TestViewController.h&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;resource-file&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;src/ios/TestViewController.xib&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;resource-file&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;src/ios/test.png&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;config-file&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;config.xml&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;parent=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/widget&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;feature&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testPlugin&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ios-package&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TestPlugin&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/feature&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/config-file&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/platform&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;参数说明：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;id=&quot;com.catchzeng.testplugin&quot;&lt;/code&gt; ：插件id必须与文件夹名称相同&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;js-module src=&quot;www/testPlugin.js&quot; name=&quot;testModel&quot;&amp;gt;&lt;/code&gt;：此处配置js所在目录和调用的类（testModel）&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;source-file&amp;gt;&lt;/code&gt;：标示插件所需的oc .m文件&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;header-file&amp;gt;&lt;/code&gt;：标示插件所需的oc .h文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-&amp;lt;resource-file&amp;gt;```：标示插件所需资源文件（图片、xib资源等）&quot;&gt;
```&amp;lt;feature name=&quot;testPlugin&quot;&amp;gt;&amp;lt;param name=&quot;ios-package&quot; value=&quot;TestPlugin&quot; /&amp;gt;```：指明插件映射至ios的类名，此处的testPlugin便是对应到testPlugin.js ```  exec(success, fail, 'testPlugin', 'testWithTitle', option);``` 中的testPlugin。

### 四、测试插件

新建一个Cordova项目，并添加iOS平台作为测试项目。

![Plugins](/img/in-post/post-cordova3/3.png)

添加插件到测试项目
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cordova plugin add  xxxxxx&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
![Plugins](/img/in-post/post-cordova3/4.png)

修改工程项目的index.html

![Plugins](/img/in-post/post-cordova3/5.png)

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/p&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;TestPlugin&lt;/title&gt;
        &lt;meta http-equiv=&quot;Content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
            &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;cordova.js&quot;&gt;&lt;/script&gt;
            &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;

            function testPlugin() {
                testModel.testPlugin(alertSuccess,alertFail,[&quot;我是JS传来的参数！&quot;]);
            }

            function alertSuccess(msg) {
                alert(msg);
            }

            function alertFail(msg) {
                alert('调用OC失败: ' + msg);
            }
            &lt;/script&gt;
    &lt;/head&gt;

    &lt;body style=&quot;padding-top:50px&quot;&gt;
        &lt;button style=&quot;font-size:17px;&quot; onclick=&quot;testPlugin();&quot;&gt;调用iOS插件&lt;/button&gt; &lt;br /&gt;
    &lt;/body&gt;
&lt;/html&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
重新build iOS项目
&lt;/code&gt; cordova build ios ```&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/post-cordova3/6.png&quot; alt=&quot;Plugins&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时打开iOS工程后，运行程序便能得到看到插件的效果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/post-cordova3/7.gif&quot; alt=&quot;Plugins&quot; /&gt;&lt;/p&gt;

&lt;p&gt;将插件文件上传到git后，前端人员也可以使用git的方式安装我们编写的插件&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; cordova plugin add  https://github.com/CatchZeng/com.catchzeng.testplugin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;最后附上Demo地址：&lt;a href=&quot;https://github.com/CatchZeng/com.catchzeng.testplugin&quot;&gt;https://github.com/CatchZeng/com.catchzeng.testplugin&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Sep 2016 17:38:27 +0800</pubDate>
        <link>http://localhost:4000/2016/09/22/%E4%BD%BF%E7%94%A8Cordova%E5%BC%80%E5%8F%91iOS-App-%E6%89%93%E5%8C%85%E6%8F%92%E4%BB%B6%E5%8F%8AJS%E8%84%9A%E6%9C%AC/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/09/22/%E4%BD%BF%E7%94%A8Cordova%E5%BC%80%E5%8F%91iOS-App-%E6%89%93%E5%8C%85%E6%8F%92%E4%BB%B6%E5%8F%8AJS%E8%84%9A%E6%9C%AC/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>使用Cordova开发iOS App -- 开发iOS插件</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;本篇在&lt;a href=&quot;http://catchzeng.com/2016/09/20/使用Cordova开发iOS-App-环境搭建/&quot;&gt;上一篇–Cordova的环境搭建&lt;/a&gt;基础上以一个例子讲解如何为Cordova开发iOS插件。&lt;/p&gt;

&lt;h3 id=&quot;一创建插件文件&quot;&gt;一、创建插件文件&lt;/h3&gt;

&lt;p&gt;在Plugins文件夹下创建插件文件夹命名为com.catchzeng.testplugin
&lt;img src=&quot;/img/in-post/post-cordova2/1.png&quot; alt=&quot;Plugins&quot; /&gt;&lt;/p&gt;

&lt;p&gt;创建类TestPlugin继承于CDVPlugin
&lt;img src=&quot;/img/in-post/post-cordova2/2.png&quot; alt=&quot;Plugins&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注意：创建类后会报头文件&lt;code class=&quot;highlighter-rouge&quot;&gt;#import &amp;lt;Cordova/Cordova.h&amp;gt;&lt;/code&gt;找不到的问题，替换成&lt;code class=&quot;highlighter-rouge&quot;&gt; #import &amp;lt;Cordova/CDVPlugin.h&amp;gt;&lt;/code&gt;即可。&lt;/p&gt;

&lt;h3 id=&quot;二实现插件代码&quot;&gt;二、实现插件代码&lt;/h3&gt;

&lt;p&gt;该插件实现的功能是JS调用原生的代码弹出一个自定义视图控制器（附带参数），并在弹起后回传参数给JS。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/post-cordova2/3.gif&quot; alt=&quot;Plugins&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestPlugin&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;testWithTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CDVInvokedUrlCommand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//customize argument
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;TestViewController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testViewCtrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestViewController&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewController&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;presentViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testViewCtrl&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;CDVPluginResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pluginResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CDVPluginResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resultWithStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CDVCommandStatus_OK&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;messageAsString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;我是OC回传的参数!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;testViewCtrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commandDelegate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendPluginResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pluginResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;callbackId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callbackId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//callback
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;CDVPluginResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pluginResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CDVPluginResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resultWithStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CDVCommandStatus_ERROR&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;messageAsString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;没有参数&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commandDelegate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendPluginResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pluginResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;callbackId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callbackId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;说明：&lt;/p&gt;

&lt;p&gt;command.arguments：JS传递过来的参数列表，可自行协定参数的格式&lt;/p&gt;

&lt;p&gt;CDVPluginResult：插件结果回调类，用于描述结果的状态和回传数据给JS&lt;/p&gt;

&lt;p&gt;command.callbackId：对应回调JS时，指定发送的函数id&lt;/p&gt;

&lt;h3 id=&quot;三测试插件&quot;&gt;三、测试插件&lt;/h3&gt;
&lt;p&gt;在config.xml文件中加入以下代码让JS能够调用我们的OC类,需要注意的是需要配置Staging下的config.xml,而不是外部的&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;feature name=&quot;ocTestPlugin&quot;&amp;gt;
  &amp;lt;param name=&quot;ios-package&quot; value=&quot;TestPlugin&quot; /&amp;gt;
&amp;lt;/feature&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;修改index.html&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;testPlugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-type&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html; charset=utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cordova.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                
            &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;cordova&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testSuccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testFailed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ocTestPlugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;testWithTitle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;我是JS传的参数！&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testSuccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testFailed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'failed: '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;padding-top:100px&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;font-size:17px;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testPlugin();&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;测试iOS插件&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;最后附上工程的结构图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/post-cordova2/4.png&quot; alt=&quot;Plugins&quot; /&gt;&lt;/p&gt;

&lt;p&gt;开发iOS插件部分就先讲到这里，&lt;a href=&quot;http://www.catchzeng.com/2016/09/22/使用Cordova开发iOS-App-打包插件及JS脚本/&quot;&gt;下一篇&lt;/a&gt;将讲解如何将本篇的插件打包供前端人员使用。&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Sep 2016 17:38:27 +0800</pubDate>
        <link>http://localhost:4000/2016/09/21/%E4%BD%BF%E7%94%A8Cordova%E5%BC%80%E5%8F%91iOS-App-%E5%BC%80%E5%8F%91iOS%E6%8F%92%E4%BB%B6/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/09/21/%E4%BD%BF%E7%94%A8Cordova%E5%BC%80%E5%8F%91iOS-App-%E5%BC%80%E5%8F%91iOS%E6%8F%92%E4%BB%B6/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>使用Cordova开发iOS App -- 环境搭建</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;一简介&quot;&gt;一、简介&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt;大家可能比较陌生，但肯定听过 PhoneGap ，Cordova 就是 PhoneGap 被 Adobe 收购后所改的名字。它是一个可以让 JS 与原生代码互相通信的一个库，并且提供了一系列的插件类（如 JS 直接操作本地数据库的插件类）。&lt;/p&gt;

&lt;h4 id=&quot;cordova优缺点&quot;&gt;Cordova优缺点&lt;/h4&gt;
&lt;p&gt;优点: 降低开发成本一次开发多平台套用，版本更新容易可动态更新。&lt;/p&gt;

&lt;p&gt;缺点: cordova其实就是在原生app上加了一个webView,并提供一套JS与原生代码交互的类库。交互效果一般，且访问原生控件时受限,常常无法满足业务需求。&lt;/p&gt;

&lt;h4 id=&quot;cordova插件&quot;&gt;Cordova插件&lt;/h4&gt;
&lt;p&gt;为了解决Cordova的缺点，就出现了cordova插件的概念。即由各个平台的开发者实现webView中无法实现的功能，并打包成插件供前端开发人员调用，这样来优化cordova app的体验问题。&lt;/p&gt;

&lt;h2 id=&quot;二文章安排&quot;&gt;二、文章安排&lt;/h2&gt;
&lt;p&gt;本系列文章主要围绕Cordova for iOS部分讲解，主要分为如下几个部分：&lt;/p&gt;

&lt;p&gt;1.环境搭建&lt;/p&gt;

&lt;p&gt;2.开发iOS插件&lt;/p&gt;

&lt;p&gt;3.打包插件及JS脚本&lt;/p&gt;

&lt;h2 id=&quot;三环境搭建&quot;&gt;三、环境搭建&lt;/h2&gt;

&lt;h4 id=&quot;1检测是否安装了nodejs&quot;&gt;1.检测是否安装了node.js&lt;/h4&gt;
&lt;p&gt;打开终端输入&lt;code class=&quot;highlighter-rouge&quot;&gt;npm --version&lt;/code&gt;，若无打印版本则需先安装&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;node.js&lt;/a&gt;
&lt;img src=&quot;/img/in-post/post-cordova1/1.png&quot; alt=&quot;node.js&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2命令行安装cordova&quot;&gt;2.命令行安装cordova&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g cordova&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;3创建项目&quot;&gt;3.创建项目&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cordova create testCordovaProject com.catchzeng.testCordova testCordova&lt;/code&gt;
&lt;img src=&quot;/img/in-post/post-cordova1/2.png&quot; alt=&quot;create&quot; /&gt;&lt;/p&gt;

&lt;p&gt;参数说明：&lt;/p&gt;

&lt;p&gt;testCordovaProject: 项目文件夹名称&lt;/p&gt;

&lt;p&gt;com.catchzeng.testCordova: 项目的bundleID&lt;/p&gt;

&lt;p&gt;testCordova:项目名称&lt;/p&gt;

&lt;h4 id=&quot;4添加平台&quot;&gt;4.添加平台&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd testCordovaProject/
sudo cordova platform add ios
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/img/in-post/post-cordova1/3.png&quot; alt=&quot;add platform&quot; /&gt;&lt;/p&gt;

&lt;p&gt;添加成功后可在项目的platforms文件夹中看到ios文件夹,进入后就可以看到ios工程了。
&lt;img src=&quot;/img/in-post/post-cordova1/4.png&quot; alt=&quot;iOS project&quot; /&gt;&lt;/p&gt;

&lt;p&gt;iOS工程运行结果
&lt;img src=&quot;/img/in-post/post-cordova1/5.png&quot; alt=&quot;result&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;5cordova开发体验&quot;&gt;5.Cordova开发体验&lt;/h4&gt;
&lt;p&gt;修改Staging-&amp;gt;www-&amp;gt;index.html
&lt;img src=&quot;/img/in-post/post-cordova1/6.png&quot; alt=&quot;result&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;app&quot;&amp;gt;
      &amp;lt;h1&amp;gt;Apache Cordova&amp;lt;/h1&amp;gt;
      &amp;lt;div id=&quot;deviceready&quot; class=&quot;blink&quot;&amp;gt;
          &amp;lt;p class=&quot;event listening&quot;&amp;gt;Connecting to Device&amp;lt;/p&amp;gt;
          &amp;lt;p class=&quot;event received&quot;&amp;gt;Device is Ready&amp;lt;/p&amp;gt;
          &amp;lt;h1 align=&quot;center&quot;&amp;gt;
                HI，iOSDeveloper.
           &amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;再次运行项目，可以看到界面上显示了HI，iOSDeveloper.
&lt;img src=&quot;/img/in-post/post-cordova1/7.png&quot; alt=&quot;result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此，环境搭建完毕。下一篇将讲解&lt;a href=&quot;http://catchzeng.com/2016/09/21/使用Cordova开发iOS-App-开发iOS插件&quot;&gt;为Cordova开发iOS插件&lt;/a&gt;。&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Sep 2016 17:38:27 +0800</pubDate>
        <link>http://localhost:4000/2016/09/20/%E4%BD%BF%E7%94%A8Cordova%E5%BC%80%E5%8F%91iOS-App-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/09/20/%E4%BD%BF%E7%94%A8Cordova%E5%BC%80%E5%8F%91iOS-App-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS开发见闻-第20期</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;欢迎加QQ群讨论：157672725&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;文章&quot;&gt;文章&lt;/h2&gt;

&lt;p&gt;1.&lt;a href=&quot;http://limboy.me/tech/2016/07/06/starting-an-app.html&quot;&gt;做一个 App 前需要考虑的几件事&lt;/a&gt; : 想必许多做App的朋友都不知道做App前应该要考虑什么事情，看看limboy是如何考虑的吧。&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;http://blog.cnbang.net/tech/3237/&quot;&gt;iOS 动态更新方案对比:JSPatch vs React Native&lt;/a&gt; : React Native想必是今年iOS界最火的词语之一了，它与JSPatch的VS结果如何呢？我们先听bang哥如何说的吧。&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;http://tutuge.me/2016/06/19/translation-why-objcmsgsend-must-be-written-in-assembly/&quot;&gt;为什么objc_msgSend必须用汇编实现&lt;/a&gt; ：总是看到有人说用汇编实现objc_msgSend是为了速度快，当然这个不可否认。但是难道没有别的原因？&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;http://yulingtianxia.com/blog/2016/07/18/TBActionSheet/&quot;&gt;自制一款强大的 ActionSheet&lt;/a&gt; : 本文的精华不在于自制库的使用，而是作者在制库过程中的思考细节，有助于想造库的朋友。
&lt;img src=&quot;/img/in-post/post-20/20-1.jpg&quot; alt=&quot;ActionSheet&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;a href=&quot;http://ios.jobbole.com/87918/&quot;&gt;如何制作一个类似Uber的溅落式启动屏 &lt;/a&gt; ：虽Uber中国已被滴滴收购,但那溅落式启动屏还是陪伴我们许多岁月而成为经典，想实现它的话可以看此文章。
&lt;img src=&quot;/img/in-post/post-20/20-2.gif&quot; alt=&quot;如何制作一个类似Uber的溅落式启动屏&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;工具&quot;&gt;工具&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;http://apistore.baidu.com&quot;&gt;apistore&lt;/a&gt;：提供了一些常用的API，包括生活常用、图像识别、应用开发等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/post-20/20-3.png&quot; alt=&quot;apistore&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;https://github.com/Automattic/simplenote-macos/blob/develop/readme.md&quot;&gt;simplenote&lt;/a&gt; : 一款帮你mac 下的开源笔记工具。
&lt;img src=&quot;https://camo.githubusercontent.com/d4dc8cbda69b96796f502be9468db54f20af5835/68747470733a2f2f73696d706c656e6f7465626c6f672e66696c65732e776f726470726573732e636f6d2f323031352f30362f6461726b2d7468656d652d6d61632e706e67&quot; alt=&quot;simpleno&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;http://bughd.com&quot;&gt;bughd&lt;/a&gt; : 一款实时监控APP的崩溃分析工具。
&lt;img src=&quot;/img/in-post/post-20/20-4.png&quot; alt=&quot;bughd&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;https://www.decosoftware.com/download&quot;&gt;deco&lt;/a&gt;: 一款优秀的React Naive IDE。
&lt;img src=&quot;/img/in-post/post-20/20-5.png&quot; alt=&quot;deco&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;开源&quot;&gt;开源&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;https://github.com/mihaelamj/mmjiostemplates&quot;&gt;mmjiostemplates&lt;/a&gt; : iOS项目模板工具，看作者的项目模板分层清晰、复用率高值得学习。
&lt;img src=&quot;https://camo.githubusercontent.com/9c58667fd018b5559cc1d78dcd92d7e9ade1ba28/68747470733a2f2f7261772e6769746875622e636f6d2f6d696861656c616d6a2f6d6d6a696f7374656d706c617465732f6d61737465722f496d616765732f54656d706c617465732e706e67&quot; alt=&quot;mmjiostemplates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;https://github.com/Roylee-ML/SwipeTableView&quot;&gt;SwipeTableView&lt;/a&gt; :— 类似半糖、美丽说主页与QQ音乐歌曲列表布局效果，实现不同菜单的左右滑动切换，同时支持类似tableview的顶部工具栏悬停（既可以左右滑动，又可以上下滑动）。兼容下拉刷新，自定义 collectionview实现自适应 contentSize 还可实现瀑布流功能。
&lt;img src=&quot;https://github.com/Roylee-ML/SwipeTableView/raw/master/ScreenShots/screenshot1.gif&quot; alt=&quot;SwipeTableView&quot; /&gt;
&lt;img src=&quot;https://github.com/Roylee-ML/SwipeTableView/raw/master/ScreenShots/screenshot2.gif&quot; alt=&quot;SwipeTableView&quot; /&gt;
&lt;img src=&quot;https://github.com/Roylee-ML/SwipeTableView/raw/master/ScreenShots/screenshot3.gif&quot; alt=&quot;SwipeTableView&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;https://github.com/3tinkers/TKImageView&quot;&gt;TKImageView&lt;/a&gt; : 帮助你轻易实现图片裁剪功能。
&lt;img src=&quot;https://github.com/3tinkers/TKImageView/raw/master/TKImageViewDemo/resources/sample1.gif&quot; alt=&quot;TKImageView&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;https://github.com/WelkinXie/WXWaveView&quot;&gt;WXWaveView&lt;/a&gt; :添加丝滑的水波纹到View中。
&lt;img src=&quot;https://camo.githubusercontent.com/2c5b76e5a5afc3f54a0161f11899dd5e1a290c85/687474703a2f2f37786e6571642e636f6d312e7a302e676c622e636c6f7564646e2e636f6d2f776176652e676966&quot; alt=&quot;WXWaveView&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;a href=&quot;https://github.com/jobandtalent/AnimatedTextInput&quot;&gt;AnimatedTextInput&lt;/a&gt;: 一款开源的动态文字输入控件。
&lt;img src=&quot;https://github.com/jobandtalent/AnimatedTextInput/raw/master/Assets/general.gif&quot; alt=&quot;AnimatedTextInput&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 18 Aug 2016 17:38:27 +0800</pubDate>
        <link>http://localhost:4000/2016/08/18/iOS%E5%BC%80%E5%8F%91%E8%A7%81%E9%97%BB-%E7%AC%AC20%E6%9C%9F/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/08/18/iOS%E5%BC%80%E5%8F%91%E8%A7%81%E9%97%BB-%E7%AC%AC20%E6%9C%9F/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS动画－－进阶（一）</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;优秀的动画来源于设计，优秀的设计来源于灵感和动效的积累。我们不是设计师，但可以积累动画的基础。在动画的进阶部分，我们先积累一些与动画相关的知识。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;贝塞尔曲线&lt;/li&gt;
  &lt;li&gt;CAShapeLayer、CAReplicatorLayer&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;贝塞尔曲线&quot;&gt;贝塞尔曲线&lt;/h2&gt;
&lt;p&gt;Bezier curve(贝塞尔曲线)是应用于二维图形应用程序的数学曲线.主要有起始点、终止点（也称锚点）、控制点这几个概念。通过调整控制点，贝塞尔曲线的形状会发生变化。&lt;/p&gt;

&lt;h4 id=&quot;一阶贝塞尔曲线线段&quot;&gt;一阶贝塞尔曲线(线段)：&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/img/in-post/post-animation/g1.png&quot; alt=&quot;一阶公式&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/post-animation/1.gif&quot; alt=&quot;一阶贝塞尔曲线&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;二阶贝塞尔曲线抛物线&quot;&gt;二阶贝塞尔曲线(抛物线)：&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/img/in-post/post-animation/g2.png&quot; alt=&quot;二阶公式&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/post-animation/2.gif&quot; alt=&quot;二阶贝塞尔曲线&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;三阶贝塞尔曲线&quot;&gt;三阶贝塞尔曲线：&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/img/in-post/post-animation/g3.png&quot; alt=&quot;三阶公式&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/post-animation/3.gif&quot; alt=&quot;三阶贝塞尔曲线&quot; /&gt;&lt;/p&gt;

&lt;p&gt;三阶以上的贝塞尔曲线在iOS开发中使用较少，这里不再赘述。在iOS中使用&lt;a href=&quot;http://www.jianshu.com/p/bbb2cc485a45&quot;&gt;UIBezierPath&lt;/a&gt;来实现贝塞尔曲线。
贝塞尔曲线能描述动画的轨迹，但是UIBezierPath不具有显示的功能。所以下面我们还需要了解iOS负责View显示的CALayer。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;cashapelayer&quot;&gt;CAShapeLayer&lt;/h2&gt;
&lt;p&gt;CAShapeLayer继承自CALayer，是一个通过矢量图形（ 非bitmap） 来绘制的图层类。&lt;/p&gt;

&lt;p&gt;CALayer在被初始化时是需要给一个frame值的（一般等于view的bounds值），本身有形状的，且为矩形。
CAShapeLayer需通过CGPath 来定义想要绘制的形状，因此常与UIBezierPath配合使用。&lt;/p&gt;

&lt;p&gt;与使用 Core Graphics 直接向 CALayer 的内容中绘制一个路径（- drawLayer: inContext:)相比，使用 CAShapeLayer 有以下优点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;渲染快：CAShapeLayer 使用了硬件加速，绘制图层较快。&lt;/li&gt;
  &lt;li&gt;内存消耗少： CAShapeLayer 不需要创建寄宿图形（CALayer需要），内存消耗少。&lt;/li&gt;
  &lt;li&gt;不会被图层边界剪裁掉： CAShapeLayer 可以在边界之外绘制，因此图层路径不会被剪裁掉.&lt;/li&gt;
  &lt;li&gt;不会出现像素化：使用CAShapeLayer 做 3D 变换时，由于无寄宿图所以不会出现像素化问题。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;careplicatorlayer&quot;&gt;CAReplicatorLayer&lt;/h2&gt;
&lt;p&gt;CAReplicatorLayer可以复制自己子层的layer,并且复制的出来的layer和原来的子layer拥有相同的动效。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;实践比理论更加易懂，下面就以例子来续动画的话题。&lt;/p&gt;

&lt;h2 id=&quot;环形进度条&quot;&gt;环形进度条&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/CatchZeng/CATCurveProgressView/raw/master/images/1.gif&quot; alt=&quot;效果&quot; /&gt;&lt;/p&gt;

&lt;p&gt;进度条的构成为进度环和底色环。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/post-animation/4.png&quot; alt=&quot;进度条构成&quot; /&gt;&lt;/p&gt;

&lt;p&gt;两个环的实现依赖于以上所讲的贝塞尔曲线和CAShapeLayer。
首先，使用贝塞尔曲线描绘底色环的路径&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UIBezierPath *path=[UIBezierPath bezierPathWithArcCenter:CGPointMake(50,50) 
                                                  radius:25 
                                                  startAngle:CATDegreesToRadians(_startAngle)                              
                                                  endAngle:CATDegreesToRadians(_endAngle) 
                                                  clockwise:YES];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后将其赋予CAShapeLayer的path属性，最后将其加入self.layer显示&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    _trackLayer=[CAShapeLayer layer];
    _trackLayer.frame=self.bounds;
    _trackLayer.fillColor = [UIColor clearColor].CGColor;
    _trackLayer.strokeColor = _curveBgColor.CGColor;
    _trackLayer.lineCap = kCALineCapRound;
    _trackLayer.path=path.CGPath;
    [self.layer addSublayer:_trackLayer];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;进度环的实现与底色环相近，并结合CATransaction实现动画&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    [CATransaction begin];
    [CATransaction setDisableActions:!animated];
    [CATransaction setAnimationTimingFunction:[CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseIn]];
    [CATransaction setAnimationDuration:1];
    _progressLayer.strokeEnd=progress;
    [CATransaction commit];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;具体实现见工程:&lt;a href=&quot;https://github.com/CatchZeng/CATCurveProgressView&quot;&gt;CATCurveProgressView&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;雷达图咻一咻波纹&quot;&gt;雷达图（咻一咻、波纹）&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/CatchZeng/CATRadarView/blob/master/CATRadarView.gif?raw=true&quot; alt=&quot;效果&quot; /&gt;&lt;/p&gt;

&lt;p&gt;雷达图的实现分为三个步骤，首先利用CAShapeLayer创建脉冲层（pulseLayer，就是一个圈圈…）&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  _pulseLayer = [CAShapeLayer layer];
  _pulseLayer.frame = self.layer.bounds;
  _pulseLayer.path = [UIBezierPath bezierPathWithOvalInRect:_pulseLayer.bounds].CGPath;
  _pulseLayer.fillColor = [UIColor blueColor].CGColor;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后使用CAReplicatorLayer复制多个脉冲层&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  _replicatorLayer = [CAReplicatorLayer layer];
  _replicatorLayer.frame = self.bounds;
  _replicatorLayer.instanceCount = 6;
  _replicatorLayer.instanceDelay = 1.5;
  [_replicatorLayer addSublayer:self.pulseLayer];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最后加上透明度与大小的动画，来实现雷达的效果&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CABasicAnimation *scaleAnima = [CABasicAnimation animationWithKeyPath:@&quot;transform&quot;];
scaleAnima.fromValue = [NSValue valueWithCATransform3D:CATransform3DScale(CATransform3DIdentity, 0.0, 0.0, 0.0)];
scaleAnima.toValue = [NSValue valueWithCATransform3D:CATransform3DScale(CATransform3DIdentity, 1.0, 1.0, 0.0)];
       
_opacityAnima = [CABasicAnimation animationWithKeyPath:@&quot;opacity&quot;];
_opacityAnima.fromValue = @(0.3);
_opacityAnima.toValue = @(0.0);

_animaGroup = [CAAnimationGroup animation];
_animaGroup.animations = @[self.opacityAnima, scaleAnima];
_animaGroup.duration = 9;
_animaGroup.autoreverses = NO;
_animaGroup.repeatCount = HUGE;

[self.pulseLayer addAnimation:self.animaGroup forKey:@&quot;groupAnimation&quot;];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;具体实现见工程:&lt;a href=&quot;https://github.com/CatchZeng/CATRadarView&quot;&gt;CATRadarView&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;进阶部分的首篇就先到这了，咱们下一篇见。&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Jul 2016 17:38:27 +0800</pubDate>
        <link>http://localhost:4000/2016/07/12/iOS%E5%8A%A8%E7%94%BB-%E8%BF%9B%E9%98%B6-%E4%B8%80/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/07/12/iOS%E5%8A%A8%E7%94%BB-%E8%BF%9B%E9%98%B6-%E4%B8%80/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
  </channel>
</rss>
