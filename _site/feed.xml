<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CatchZeng Blog</title>
    <description></description>
    <link>http://catchzeng.com/</link>
    <atom:link href="http://catchzeng.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 04 May 2016 23:48:10 +0800</pubDate>
    <lastBuildDate>Wed, 04 May 2016 23:48:10 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>iOS开发见闻-第18期</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;欢迎加QQ群讨论：157672725&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;!!!若遇图片载入问题可到&lt;a href=&quot;http://www.jianshu.com/p/cd109018877d&quot;&gt;简书上看&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;文章&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;http://www.jianshu.com/p/ca51c9d3575b#rd&quot;&gt;离屏渲染优化&lt;/a&gt; : 前段时间关于圆角的库是一个接着一个，但是真正有哪个做得好的呢？这篇用实际数据说话的文章应该可以停止这段风潮了。&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;http://casatwy.com/OOP_nomodel.html&quot;&gt;去model化和数据对象&lt;/a&gt; ：castaway老师的文章只能叫好！这篇文章主要讨论的问题是：数据传递时，是否要采用数据对象？这里的数据传递并不是说类似RPC的场景，而是在单个工程内部，各对象之间、各组件之间、各层之间的数据传递。&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;https://www.tuccuay.com/2016/03/cardboard-ios-sdk-getting-started/&quot;&gt;在 iOS 上开始创建你的虚拟现实应用&lt;/a&gt; :  虚拟现实现在可以在iOS上可以体验了。谷歌开源了cardboard的iOS版本sdk,感兴趣的朋友可以看看。&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;http://www.jianshu.com/p/10873c5c1e08&quot;&gt;手把手教你反编译别人的app &lt;/a&gt; ：反编译android的看多了，看看怎么反编译iOS吧。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;工具&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;https://appetize.io/demo?device=iphone5s&amp;amp;scale=75&amp;amp;orientation=portrait&amp;amp;osVersion=9.3&quot;&gt;appetize.io&lt;/a&gt;：为你的 demo 创建在线预览的工具。&lt;br /&gt;
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-1b2021ea821014f7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;appetize.io&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;http://panic.com/transmit/&quot;&gt;transmit&lt;/a&gt; : 一个Mac OS X 上FTP客户端，有着非常漂亮的用户界面和有用的功能。&lt;br /&gt;
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-c725ca96daf9e82a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;transmit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;https://itunes.apple.com/us/app/go2shell/id445770608?mt=12&amp;amp;ign-mpt=uo%3D4&quot;&gt;Go2Shell&lt;/a&gt; : 非常实用的小工具，可在任何文目录中打开终端窗口进行操作。&lt;br /&gt;
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-a3488569c36c3702.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Go2Shell&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;开源&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;https://github.com/iosWellLin/OCR&quot;&gt;OCR&lt;/a&gt; : 光学文字识别身份证。&lt;br /&gt;
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-21903bc6dd7bb064.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;OCR&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;https://github.com/Guikunzhi/BeautifyFaceDemo&quot;&gt;BeautifyFaceDemo&lt;/a&gt; : 使用人脸磨皮算法美化脸部的相机实例。作者对磨皮算法也专门写了&lt;a href=&quot;http://m.blog.csdn.net/article/details?id=50496969&quot;&gt;一篇博文&lt;/a&gt;,值得一看。&lt;br /&gt;
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-b065406e00e232a6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;BeautifyFaceDemo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;https://github.com/uxyheaven/XYRouter&quot;&gt;XYRouter&lt;/a&gt; : XYRouter是一个通过URL routing来解决UIViewController跳转依赖的库。&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;https://github.com/iSame7/Panorama&quot;&gt;Panorama&lt;/a&gt; : 类似 Facebook’s Paper App中的图片倾斜效果。&lt;br /&gt;
&lt;img src=&quot;https://camo.githubusercontent.com/264ad4ee96c2c0a607928a3ff6ddb700e612bc9f/687474703a2f2f73332e6a742e696f2f74696c742e676966&quot; alt=&quot;Panorama&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;https://github.com/DenHeadless/Shapes&quot;&gt;Shapes&lt;/a&gt; : 绘制形状视图并为其加入动画的库，研究动画的朋友别错过。&lt;br /&gt;
&lt;img src=&quot;https://github.com/DenHeadless/Shapes/raw/master/Images/progress_view.gif&quot; alt=&quot;Shapes&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://github.com/DenHeadless/Shapes/raw/master/Images/dimming_view.gif&quot; alt=&quot;Shapes&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://github.com/DenHeadless/Shapes/raw/master/Images/app_store_download_button.gif&quot; alt=&quot;Shapes&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://github.com/DenHeadless/Shapes/raw/master/Images/voice_memos_record_button.gif&quot; alt=&quot;Shapes&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 04 May 2016 17:38:27 +0800</pubDate>
        <link>http://catchzeng.com/2016/05/04/iOS%E5%BC%80%E5%8F%91%E8%A7%81%E9%97%BB-%E7%AC%AC18%E6%9C%9F/</link>
        <guid isPermaLink="true">http://catchzeng.com/2016/05/04/iOS%E5%BC%80%E5%8F%91%E8%A7%81%E9%97%BB-%E7%AC%AC18%E6%9C%9F/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS开源Log工具CATLog</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;做过Java开发的朋友，都会回想log4j。喜欢它的分级输出和Eclipse或Idea分颜色输出以及点击定位到类文件，在iOS中却只剩下NSlog。于是，开始寻找log4j的类似框架。CocoaLumberjack是最早使用的，其功能齐全、接口灵活、自定义方便等特性着实让人喜欢，但也遇到了&lt;a href=&quot;http://m.oschina.net/blog/381201&quot;&gt;一些问题&lt;/a&gt;。之后，看到Coneboy-k开源的&lt;a href=&quot;https://github.com/Coneboy-k/KKLog&quot;&gt;KKLog&lt;/a&gt;，其轻量、简洁、实用的API着实让我喜欢，再也没有什么配置、link等错误,但不支持格式化输出、颜色打印、点击跳转等让我觉得不够用。最后，参考了&lt;a href=&quot;https://github.com/Coneboy-k/KKLog&quot;&gt;KKLog&lt;/a&gt;设计了一个&lt;a href=&quot;https://github.com/CatchZeng/CATLog&quot;&gt;Log工具&lt;/a&gt;，在此，对Coneboy-k表示感谢。&lt;/p&gt;

&lt;h2 id=&quot;log&quot;&gt;说说到底想要什么样的Log&lt;/h2&gt;
&lt;p&gt;也许你会说，你还真挑，不就一个Log工具，你想要什么样的？&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;必要的功能&lt;/h4&gt;
&lt;p&gt;1.支持设置日志级别&lt;br /&gt;
2.支持日志输出到文件&lt;br /&gt;
3.支持日志记录Crash信息&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;进一步的要求&lt;/h4&gt;
&lt;p&gt;1.自动删除旧的日志文件&lt;br /&gt;
2.方便地自定义日志宏&lt;br /&gt;
3.支持颜色打印日志&lt;br /&gt;
4.支持点击日志信息跳转到代码中，方便定位错误信息&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;还想要的&lt;/h4&gt;
&lt;p&gt;有个Mac客户端，调试的时候不连接数据线也能看日志&lt;/p&gt;

&lt;h2 id=&quot;catlog&quot;&gt;CATLog&lt;/h2&gt;
&lt;p&gt;看看CATLog长什么样吧。&lt;br /&gt;
&lt;img src=&quot;https://github.com/CatchZeng/CATLog/raw/master/CATLog.gif&quot; alt=&quot;CATLog&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;附上链接&lt;a href=&quot;https://github.com/CatchZeng/CATLog&quot;&gt;https://github.com/CatchZeng/CATLog&lt;/a&gt; 欢迎star、fork、issue。&lt;br /&gt;
有问题可以到群里讨论 QQ群：157672725&lt;/p&gt;
</description>
        <pubDate>Tue, 03 May 2016 17:38:27 +0800</pubDate>
        <link>http://catchzeng.com/2016/05/03/iOS%E5%BC%80%E6%BA%90Log%E5%B7%A5%E5%85%B7CATLog/</link>
        <guid isPermaLink="true">http://catchzeng.com/2016/05/03/iOS%E5%BC%80%E6%BA%90Log%E5%B7%A5%E5%85%B7CATLog/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS开发见闻-第17期</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;文章&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;http://ifujun.com/yi-wen-zai-iosshang-zi-dong-jian-ce-nei-cun-xie-lu/?hmsr=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&quot;&gt;在iOS上自动检测内存泄露&lt;/a&gt; : Facebook一口气发布了三个利器FBRetainCycleDetector、FBAllocationTracker、FBMemoryProfiler。该篇文章的难得之处在于侧面上反应了Facebook面对问题的思考角度、深度，值得我们借鉴。&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;http://www.jackpu.com/react-nativezui-jia-xue-xi-mo-ban-f8-appkai-yuan-liao/?hmsr=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&quot;&gt;React Native最佳学习模版- F8 App开源了&lt;/a&gt; ：如果说最近iOS界什么名词最火，我会说的React Native。该篇文章带来了最佳学习模版-F8 App，在研究React Native的朋友别错过。&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;http://www.jianshu.com/p/d684693f1d77&quot;&gt;高速公路换轮胎——为遗留系统替换数据库&lt;/a&gt; : 作者由几个月的重构项目经历，讲述了如何一步步替换数据库的过程。文章思路清晰，从背景、系统面貌到方案选型、技术实现，是篇值得称赞的文章。&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3ODg4MDk0Ng==&amp;amp;mid=403474677&amp;amp;idx=1&amp;amp;sn=5163adb2d80aa5b4f0099f79e6d783e1&amp;amp;scene=2&amp;amp;srcid=0410nXOlaNgnthsBuLXyP7yA#wechat_redirect&quot;&gt;网易漫画Swift混编实践&lt;/a&gt; ：时至今日，工程是否要换成Swift写仍是讨论的热题。如果你想换不妨先看看网易怎么做的，至少能少踩坑。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;工具&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;https://github.com/bang590/JSPatchX&quot;&gt;JSPatchX&lt;/a&gt; ：JSPatch XCode 代码自动补全插件。&lt;br /&gt;
&lt;img src=&quot;https://camo.githubusercontent.com/ad17370a5e5ecf1e5196146405f57126eb649390/68747470733a2f2f7261772e6769746875622e636f6d2f62616e673539302f4a535061746368582f6d61737465722f5265736f757263652f53637265656e73686f742e676966&quot; alt=&quot;JSPatchX&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;https://github.com/wzqcongcong/AtAutoCompletion&quot;&gt;AtAutoCompletion&lt;/a&gt; : 一款@的自动补全插件。&lt;br /&gt;
&lt;img src=&quot;https://github.com/wzqcongcong/AtAutoCompletion/raw/master/screenshot/screenshot.png&quot; alt=&quot;AtAutoCompletion&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;https://github.com/tyeen/BlockJump&quot;&gt;BlockJump&lt;/a&gt; : 让你在类文件中快速跳转的插件。&lt;br /&gt;
&lt;img src=&quot;https://camo.githubusercontent.com/bcf2547bd90504fcfe4f4cecd3bc8a6f31161e55/68747470733a2f2f7261772e6769746875622e636f6d2f747965656e2f426c6f636b4a756d702f6d61737465722f73637265656e5f7265636f72642e676966&quot; alt=&quot;BlockJump&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;开源&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;https://github.com/yeziahehe/YFStartView&quot;&gt;YFStartView&lt;/a&gt; : 在启动图都是一个PNG的年代下，有强迫症的我已经受不了，换个设计吧。&lt;br /&gt;
&lt;img src=&quot;https://camo.githubusercontent.com/170b43643d7208c9f7a4ad584bfda8b8f97057d8/687474703a2f2f37786b7674352e636f6d312e7a302e676c622e636c6f7564646e2e636f6d2f6769746875622f5946537461727456696577627574746f6d2e676966&quot; alt=&quot;YFStartView&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://camo.githubusercontent.com/95b7b10a0a40166ae26e8ee7bb7902fdfe0e09f3/687474703a2f2f37786b7674352e636f6d312e7a302e676c622e636c6f7564646e2e636f6d2f6769746875622f594653746172745669657763656e7465722e676966&quot; alt=&quot;YFStartView&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;https://github.com/renzifeng/ZFPlayer&quot;&gt;ZFPlayer&lt;/a&gt; : 基于AVPlayer，支持横屏、竖屏（全屏播放还可锁定屏幕方向），上下滑动调节音量、屏幕亮度，左右滑动调节播放进度。&lt;br /&gt;
&lt;img src=&quot;https://github.com/renzifeng/ZFPlayer/raw/master/screen.gif&quot; alt=&quot;ZFPlayer&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://github.com/renzifeng/ZFPlayer/raw/master/volume.png&quot; alt=&quot;ZFPlayer&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://github.com/renzifeng/ZFPlayer/raw/master/brightness.png&quot; alt=&quot;ZFPlayer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;https://github.com/daltoniam/DCAnimationKit&quot;&gt;DCAnimationKit&lt;/a&gt; : 各种动态效果于一身，喜欢动画的朋友可以Star一下。&lt;br /&gt;
&lt;img src=&quot;https://camo.githubusercontent.com/a5974a8a57c442d5b6c23d01ed3e94dfd1c4ac37/68747470733a2f2f7261772e6769746875622e636f6d2f64616c746f6e69616d2f4443416e696d6174696f6e4b69742f6d61737465722f676966732f746164612e676966&quot; alt=&quot;DCAnimationKit&quot; /&gt; &lt;br /&gt;
&lt;img src=&quot;https://camo.githubusercontent.com/4eb7f20fcae456c8f28ad1b9ffb015ff7242b3b0/68747470733a2f2f7261772e6769746875622e636f6d2f64616c746f6e69616d2f4443416e696d6174696f6e4b69742f6d61737465722f676966732f70756c73652e676966&quot; alt=&quot;DCAnimationKit&quot; /&gt; &lt;br /&gt;
&lt;img src=&quot;https://camo.githubusercontent.com/0a27424f1d55f93ba399adfc3877a5b19efa59c1/68747470733a2f2f7261772e6769746875622e636f6d2f64616c746f6e69616d2f4443416e696d6174696f6e4b69742f6d61737465722f676966732f7368616b652e676966&quot; alt=&quot;DCAnimationKit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;https://github.com/delba/TextAttributes&quot;&gt;TextAttributes&lt;/a&gt; : 一款使得attributed strings更易拼接的库,而且支持动态更新。&lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/delba/TextAttributes/assets/demo.gif&quot; alt=&quot;TextAttributes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;a href=&quot;https://github.com/CatchZeng/CATLog&quot;&gt;CATLog&lt;/a&gt; : 利用Xcodecolors &amp;amp; KZLinkedConsole两个插件实现的一款日志工具，支持分级别、log文件、记录Crash信息、分级颜色显示、点击Log信息跳转到类文件等特性,欢迎Star、Fork、Issue。&lt;br /&gt;
&lt;img src=&quot;https://github.com/CatchZeng/CATLog/raw/master/color.jpg&quot; alt=&quot;CATLog&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://github.com/krzysztofzablocki/KZLinkedConsole/raw/master/logs.gif?raw=true&quot; alt=&quot;CATLog&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 21 Apr 2016 17:38:27 +0800</pubDate>
        <link>http://catchzeng.com/2016/04/21/iOS%E5%BC%80%E5%8F%91%E8%A7%81%E9%97%BB-%E7%AC%AC17%E6%9C%9F/</link>
        <guid isPermaLink="true">http://catchzeng.com/2016/04/21/iOS%E5%BC%80%E5%8F%91%E8%A7%81%E9%97%BB-%E7%AC%AC17%E6%9C%9F/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS开发见闻-第16期</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;文章&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;http://casatwy.com/iOS-Modulization.html&quot;&gt;iOS应用架构谈 组件化方案 &lt;/a&gt; : 组件化是 App 膨胀到一定体积后的解决方案，能一定程度上解决问题。casatwy老师的这篇文章起源于Limboy的&lt;a href=&quot;http://limboy.me/ios/2016/03/10/mgj-components.html&quot;&gt;蘑菇街 App 的组件化之路&lt;/a&gt;。18号bang大神也出来发话了&lt;a href=&quot;http://blog.cnbang.net/tech/3080/&quot;&gt;iOS 组件化方案探索&lt;/a&gt;。看完三篇文章后收益良多，极力推荐。&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;http://www.jianshu.com/p/a0c4d34feadd&quot;&gt;ApplePay高调入华，教你在app里上线ApplePay&lt;/a&gt; ：ApplePay与各大银行开展了国内市场，我们的app是否也要加入ApplePay了呢？需要的朋友可以参考这篇文章。&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;http://www.ismash.cn/post/ru-he-shi-xian-zi-ji-mei-shi-xian-guo-de-xu-qiu-zhi-wen-ben-dong-hua-pian&quot;&gt;如何实现自己没实现过的需求之文本动画&lt;/a&gt; : 本文细致地讲解了文本动画相关的知识，是篇难得的好文章。&lt;br /&gt;
&lt;img src=&quot;https://cloud.githubusercontent.com/assets/3759810/13845905/1e55a5d0-ec7e-11e5-9631-68aaf6b07ba1.gif&quot; alt=&quot;如何实现自己没实现过的需求之文本动画&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;http://www.olinone.com/?p=484&quot;&gt;iOS图片圆角优化&lt;/a&gt; ：本文提及了开源项目&lt;a href=&quot;https://github.com/panghaijiao/HJCornerRadius&quot;&gt;HJCornerRadius&lt;/a&gt;但目的不是介绍如何使用该工具，而是想跟大家分享开发时用到的几点设计思想。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;工具&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;https://itunes.apple.com/app/prepo/id476533227?mt=12&quot;&gt;Prepo&lt;/a&gt; ：一款图标转化器，它可以帮助设计师快速的导出各种尺寸的图标。设计师通过Prepo把任何格式的图片文件转换成iOS可用的图片格式。此外，通过点击Prepo对话框底部“copy plist”按钮，设计师可以轻松的把导出的文件复制到Xcode中，节省了设计师大量的工作时间。&lt;br /&gt;
&lt;img src=&quot;http://a5.mzstatic.com/us/r30/Purple4/v4/ff/30/41/ff30414a-fdc5-ea96-4a2f-396291368d18/screen800x500.jpeg&quot; alt=&quot;Prepo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;https://www.cocoacontrols.com/&quot;&gt;Cocoa Controls&lt;/a&gt; : 一些很棒的你可以用在你的iOS应用中的组件（代码）的列表。有时你可以找到一段优秀代码来节省时间，有时你也可以学习其他开发者是如何完成某个功能的。订阅他们的每周一报吧，都是精华，极少糟粕。&lt;br /&gt;
&lt;img src=&quot;https://www.cocoacontrols.com/assets/logo@2x-1b08dd117f43ea835e9af45533fd6e75.png&quot; alt=&quot;Cocoa Controls&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;https://github.com/MellongLau/AMMethod2Implement&quot;&gt;AMMethod2Implement&lt;/a&gt; : 支持h文件声明方法自动生成实现，m或者mm文件已写好的方法生成方法声明到h文件， extern NSString * const， @select(method:) 和 [self methodName] 实现代码生成。&lt;br /&gt;
&lt;img src=&quot;https://camo.githubusercontent.com/f22645bb84f9ddbdcca5cf9850eb7dc8f66f1ea3/68747470733a2f2f7261772e6769746875622e636f6d2f4d656c6c6f6e674c61752f414d4d6574686f6432496d706c656d656e742f6d61737465722f53637265656e73686f74732f757361676553637265656e73686f742e676966&quot; alt=&quot;AMMethod2Implement&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;https://github.com/krzysztofzablocki/KZLinkedConsole&quot;&gt;KZLinkedConsole&lt;/a&gt;: 可以直接从错误日志跳转到源代码的插件。&lt;br /&gt;
&lt;img src=&quot;https://github.com/krzysztofzablocki/KZLinkedConsole/raw/master/logs.gif?raw=true&quot; alt=&quot;KZLinkedConsole&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;开源&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;https://github.com/EddyBorja/EBPhotoPages&quot;&gt;EBPhotoPages&lt;/a&gt; : 用于显示一个滚动型照片页和元数据的图片库。用户可以放大、缩小图片，以及创建，编辑或删除注释和标记，共享或删除照片，并报告不当的照片。所有照片和内容异步加载。相片的用户权限通过委托协议控制。该库是使用状态模式来控制画廊的行为，让其他开发人员可以轻松地修改或增加新的状态，而不必了解太多的原代码设计。&lt;br /&gt;
&lt;img src=&quot;https://github.com/EddyBorja/EBPhotoPages/raw/master/EBPhotoPages@1x.png&quot; alt=&quot;EBPhotoPages&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://github.com/EddyBorja/EBPhotoPages/raw/master/3.png&quot; alt=&quot;EBPhotoPages&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://github.com/EddyBorja/EBPhotoPages/raw/master/5.png&quot; alt=&quot;EBPhotoPages&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;https://github.com/Ramotion/navigation-stack&quot;&gt;navigation-stack&lt;/a&gt; : 用于导航控制器的 Stack 视图模型最佳实践类库及演示。&lt;br /&gt;
&lt;img src=&quot;https://github.com/Ramotion/navigation-stack/raw/master/Navigation-Stack.gif&quot; alt=&quot;navigation-stack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;https://github.com/marmelroy/PeekPop&quot;&gt;PeekPop&lt;/a&gt; : Peek 和 Pop 是 iPhone 6S 和 6S+ 新推出的一项很棒的特性，可以让你轻松通过 3D touch 实现内容预览。但是还有大概 80% 的 iOS 用户使用的是老的设备。而 PeekPop 是一个 Swift 框架，可以让你的老系统支持 Peek 和 Pop 特性。&lt;br /&gt;
&lt;img src=&quot;https://camo.githubusercontent.com/4a3f8f136def3a4fa4fe0c00cb02118e72d838dc/687474703a2f2f692e67697068792e636f6d2f336f3761626c7530616449436651334f58432e676966&quot; alt=&quot;PeekPop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;https://github.com/zhangsuya/SYStickHeaderWaterFall&quot;&gt;SYStickHeaderWaterFall&lt;/a&gt; : 一款更加灵活支持各种类型的瀑布流结构的库。&lt;br /&gt;
&lt;img src=&quot;https://github.com/zhangsuya/SYStickHeaderWaterFall/raw/master/SYStickHeaderWaterFall/4.gif&quot; alt=&quot;SYStickHeaderWaterFall&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;a href=&quot;https://github.com/tdginternet/TGCameraViewController&quot;&gt;TGCameraViewController&lt;/a&gt; : 一款可定制的AVFoundation相机,界面美观、实用性强且容易集成到自己的项目中。&lt;br /&gt;
&lt;img src=&quot;https://camo.githubusercontent.com/420d3b828938e244f8bcf943343dc271ecc9e150/687474703a2f2f7332382e706f7374696d672e6f72672f65656c69316f6d63742f544743616d6572615f566965775f436f6e74726f6c6c65722e706e67&quot; alt=&quot;TGCameraViewController&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Mar 2016 17:38:27 +0800</pubDate>
        <link>http://catchzeng.com/2016/03/22/iOS%E5%BC%80%E5%8F%91%E8%A7%81%E9%97%BB-%E7%AC%AC16%E6%9C%9F/</link>
        <guid isPermaLink="true">http://catchzeng.com/2016/03/22/iOS%E5%BC%80%E5%8F%91%E8%A7%81%E9%97%BB-%E7%AC%AC16%E6%9C%9F/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS开发见闻-第15期</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;文章&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;http://www.jianshu.com/p/2141fb0dc62c&quot;&gt;饿了么移动APP的架构演进&lt;/a&gt; : 作者简略描述了饿了么从传统的MVC到model Decoupled、Hybrid再到React-Native &amp;amp; Hot Patch的APP架构演进旅程。&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;http://blog.devtang.com/2016/02/16/inspired-summary/&quot;&gt;人员、流程和产品上的思考 - 读《启示录》总结&lt;/a&gt; ：选这篇文章不因为是巧哥发的，而是想向大家推荐《启示录》这本书，如果你有做产品的心，一定要看看。&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;http://www.tanhao.me/code/151113.html/&quot;&gt;iOS实时卡顿监控&lt;/a&gt; : 本文主要讲述了如何将ios的卡顿现象量化，对于性能调试有极大的帮助。&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;http://www.olinone.com/?p=429&quot;&gt;接口编程那些事&lt;/a&gt; ：学了这么多年编程，若是有人问及什么叫面向接口编程，你能怎么回答呢？看看本文能找到一些答案。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;工具&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;https://www.pgyer.com/&quot;&gt;蒲公英&lt;/a&gt; ：国内领先的应用内测分发平台，希望为全球的开发者提供一个能够有效提高应用内测分发效率的平台。&lt;br /&gt;
&lt;img src=&quot;https://o1wjx1evz.qnssl.com/static-20160303/assets/img/QC_imac.png&quot; alt=&quot;蒲公英&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;https://github.com/EDSIOON/EDSJSONToDictionary&quot;&gt;EDSJSONToDictionary&lt;/a&gt; : 直接看效果吧。&lt;br /&gt;
&lt;img src=&quot;https://github.com/EDSIOON/EDSJSONToDictionary/raw/master/ScreenShots/EDSJSONToDicitionary.gif&quot; alt=&quot;EDSJSONToDictionary&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;https://github.com/gliyao/SketchExporter&quot;&gt;SketchExporter&lt;/a&gt; : Sketch的导出插件。&lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/gliyao/SketchExporter/master/SketchExporter.png&quot; alt=&quot;SketchExporter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;https://github.com/aotian16/SwiftJsonToObj&quot;&gt;SwiftJsonToObj&lt;/a&gt;: Swift中将json数据转换为对象的插件。&lt;br /&gt;
&lt;img src=&quot;https://github.com/aotian16/SwiftJsonToObj/raw/master/screenshot/SwiftJsonToObj.png&quot; alt=&quot;SwiftJsonToObj&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;开源&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;https://github.com/storehouse/Advance&quot;&gt;Advance&lt;/a&gt; : swift写的一款效果很好，接口简单的动画库。&lt;br /&gt;
&lt;img src=&quot;https://github.com/storehouse/Advance/raw/master/Assets/nav.gif&quot; alt=&quot;Advance&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://github.com/storehouse/Advance/raw/master/Assets/logo.gif&quot; alt=&quot;Advance&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;https://github.com/coolbeet/CBStoreHouseRefreshControl&quot;&gt;CBStoreHouseRefreshControl&lt;/a&gt; : 一款在Storehouse启发下创作出来的控件，下拉刷新的时候可以完全定制自己想要的效果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/a0ff4643665482e588bbf9f951069251604dd118/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f737579752e746573742f434253746f7265486f75736552656672657368436f6e74726f6c322e676966&quot; alt=&quot;CBStoreHouseRefreshControl&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;https://github.com/500px/greedo-layout-for-ios&quot;&gt;greedo-layout-for-ios&lt;/a&gt; : 一款让UICollectionView展示高度可变的固定比例的网格视图，具体看效果图。&lt;br /&gt;
&lt;img src=&quot;https://github.com/500px/greedo-layout-for-ios/raw/master/screenshot.png&quot; alt=&quot;greedo-layout-for-ios&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;https://github.com/movielala/TVOSButton&quot;&gt;TVOSButton&lt;/a&gt; : 效果极佳的一款视差按钮。&lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/movielala/TVOSButton/master/demo.gif&quot; alt=&quot;TVOSButton&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;a href=&quot;https://github.com/dzenbot/DZNEmptyDataSet&quot;&gt;DZNEmptyDataSet&lt;/a&gt; : 一个下拉式的UITableView/UICollectionView父类,在没有内容要显示时使用Empty DataSet模式。&lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/dzenbot/UITableView-DataSet/master/Examples/Applications/Screenshots/Screenshots_row1.png&quot; alt=&quot;DZNEmptyDataSet&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/dzenbot/UITableView-DataSet/master/Examples/Applications/Screenshots/Screenshots_row2.png&quot; alt=&quot;DZNEmptyDataSet&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Mar 2016 17:38:27 +0800</pubDate>
        <link>http://catchzeng.com/2016/03/08/iOS%E5%BC%80%E5%8F%91%E8%A7%81%E9%97%BB-%E7%AC%AC15%E6%9C%9F/</link>
        <guid isPermaLink="true">http://catchzeng.com/2016/03/08/iOS%E5%BC%80%E5%8F%91%E8%A7%81%E9%97%BB-%E7%AC%AC15%E6%9C%9F/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS开发见闻-第14期</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;文章&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;http://onevcat.com/2016/02/swift-performance/&quot;&gt;Swift 性能探索和优化分析&lt;/a&gt; : 喵神的swift，不解释直接看。&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;http://jiangliancheng.gitcafe.io/2016/01/23/%E5%B0%8F%E7%AC%A8%E7%8B%BC%E6%BC%AB%E8%B0%88%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9AGCD-queue/&quot;&gt;小笨狼漫谈多线程：GCD(一)&lt;/a&gt; ：很细致的一篇文章，使用了大量图片、gif等来方便读者理解多线程的问题。&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;http://blog.cnbluebox.com/blog/2015/11/28/module-and-decoupling/&quot;&gt;模块化与解耦&lt;/a&gt; : 本文主要讲述了在iOS开发过程中，模块化工程架构的一种组织方式。文章末尾的两个例子代码质量很高，能培养我们的模块化思想。&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;http://ios.jobbole.com/83968/&quot;&gt;UIDynamics, UIKit 或 OpenGL? 3 种 iOS 动画实现分析&lt;/a&gt; ：你有没想过，乔治·卢卡斯的太空史诗歌剧，其实，可以在 iOS 上实现？在银河系中黑暗与光明双方之间的永恒战役中，我们得到启发，并创建具有星球大战人物特色的梦幻般的 UI 动画。看效果图后，你还不想看？&lt;br /&gt;
&lt;img src=&quot;http://ww1.sinaimg.cn/large/80215f6cgw1f0gq67gifdg20m80gob2e.gif&quot; alt=&quot;UIDynamics&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;工具&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;https://github.com/neonichu/BBUDebuggerTuckAway&quot;&gt;BBUDebuggerTuckAway&lt;/a&gt; ：一个可在编辑代码时自动隐藏debugger的Xcode插件。&lt;br /&gt;
&lt;img src=&quot;https://github.com/neonichu/BBUDebuggerTuckAway/raw/master/plugin.gif&quot; alt=&quot;BBUDebuggerTuckAway&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;https://github.com/tyeen/BlockJump&quot;&gt;BlockJump&lt;/a&gt; : 一款快速在代码中跳转的插件。&lt;br /&gt;
&lt;img src=&quot;https://camo.githubusercontent.com/bcf2547bd90504fcfe4f4cecd3bc8a6f31161e55/68747470733a2f2f7261772e6769746875622e636f6d2f747965656e2f426c6f636b4a756d702f6d61737465722f73637265656e5f7265636f72642e676966&quot; alt=&quot;BlockJump&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;https://github.com/mshibanami/DefaultMarginDisabler&quot;&gt;DefaultMarginDisabler&lt;/a&gt; : 相信用xib、storyboard做自动布局的朋友都会讨厌一个打钩，看效果吧。&lt;br /&gt;
&lt;img src=&quot;https://github.com/mshibanami/DefaultMarginDisabler/raw/master/screenshot.png&quot; alt=&quot;DefaultMarginDisabler&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;https://github.com/Forkong/FKConsole&quot;&gt;FKConsole&lt;/a&gt;: 开发中经常要在log输出信息，但是中文却没法直接显示，这给调试带来许多麻烦，FKConsole这个插件让调试不再只是英文的世界。&lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/Forkong/FKConsole/master/Screenshots/demo.gif&quot; alt=&quot;FKConsole&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;开源&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;https://github.com/chiahsien/CHTCollectionViewWaterfallLayout&quot;&gt;CHTCollectionViewWaterfallLayout&lt;/a&gt; : CHTCollectionViewWaterfallLayout是UICollectionViewLayout的一个子类，尽可能地模仿了UICollectionViewFlowLayout的用法，灵感来源于Pinterest，同时还兼容PSTCollectionView。&lt;br /&gt;
&lt;img src=&quot;https://cloud.githubusercontent.com/assets/474/3419095/25b4de9e-fe56-11e3-9b98-690319d736ce.png&quot; alt=&quot;CHTCollectionViewWaterfallLayout&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;https://github.com/zoonooz/ZFDragableModalTransition&quot;&gt;ZFDragableModalTransition&lt;/a&gt; : 自定义动画展示模态视图控制器，可从左边、右边或者底部推出模态视图。&lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/zoonooz/ZFDragableModalTransition/master/Screenshot/ss.gif&quot; alt=&quot;ZFDragableModalTransition&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;https://github.com/12207480/TYSlidePageScrollView&quot;&gt;TYSlidePageScrollView&lt;/a&gt; : 带header,footer,滑动菜单的，分页上下左右滑动的视图控制器。&lt;br /&gt;
&lt;img src=&quot;https://github.com/12207480/TYSlidePageScrollView/raw/master/screenshot/slidePageViewDemo.gif&quot; alt=&quot;TYSlidePageScrollView&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;https://github.com/MHaroonBaig/MotionKit&quot;&gt;MotionKit&lt;/a&gt; : 只需要两行或者很少的几行代码就可以从加速度传感器、陀螺仪和磁力传感器获取数据。&lt;/p&gt;

&lt;p&gt;5.&lt;a href=&quot;https://github.com/eonist/Element&quot;&gt;Element&lt;/a&gt; : 一套mac的UI库，喜欢mac开发的朋友不要错过。&lt;br /&gt;
&lt;img src=&quot;https://camo.githubusercontent.com/4c5e3d4eadddfdd2b185d10c62dcbd6ba92df40d/68747470733a2f2f646c2e64726f70626f7875736572636f6e74656e742e636f6d2f752f323535393437362f7468655f69636f6e5f6261725f616e696d5f7832702e676966&quot; alt=&quot;Element&quot; /&gt;&lt;img src=&quot;https://camo.githubusercontent.com/61e68ade94b04596ba041691d096dc9dcb08e742/68747470733a2f2f646c2e64726f70626f7875736572636f6e74656e742e636f6d2f752f323535393437362f726164696f62756c6c6574735f63726f705f6c6f772e676966&quot; alt=&quot;Element&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Feb 2016 17:38:27 +0800</pubDate>
        <link>http://catchzeng.com/2016/02/23/iOS%E5%BC%80%E5%8F%91%E8%A7%81%E9%97%BB-%E7%AC%AC14%E6%9C%9F/</link>
        <guid isPermaLink="true">http://catchzeng.com/2016/02/23/iOS%E5%BC%80%E5%8F%91%E8%A7%81%E9%97%BB-%E7%AC%AC14%E6%9C%9F/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS开发见闻-第13期</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;文章&lt;/h2&gt;

&lt;p&gt;1.&lt;a href=&quot;http://www.daizi.me/2016/01/05/iOS%20%E5%90%AF%E5%8A%A8%E6%97%B6%E4%BC%98%E5%8C%96%20%281%29/&quot;&gt;iOS 启动时优化&lt;/a&gt; :本文虽是针对 Facebook 应用的启动时优化，文中所说的大部分优化策略对于小型应用来说意义可能并不是很大，但是重要的是，我们应学习Facebook 工程师通过一系列系统的考量寻求优化解决方案的方式。&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;http://onevcat.com/2016/01/create-framework/&quot;&gt;如何打造一个让人愉快的框架&lt;/a&gt; ：喵神的框架论，如果你想做一个框架，不妨先看看这篇文章，或许会为你的框架提供更好的思路。&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;http://ios.jobbole.com/83393/&quot;&gt;熟练使用 LLDB，让你调试事半功倍&lt;/a&gt; : LLDB是Xcode默认的调试器，它与LLVM编译器一起，带给我们更丰富的流程控制和数据检测的调试功能。平时用Xcode运行程序，实际走的都是LLDB。熟练使用LLDB，可以让你debug事半功倍。&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;http://oncenote.com/2015/07/28/iOS-To-Android/&quot;&gt;iOS到Android到底有多远&lt;/a&gt; ：本人对Android和iOS都很喜欢，两者的开发其实不大，而且能起到差异性学习的效果。这篇文章讲述了iOS和Android开发的一些要点，如果你也有意学习Android，那么可以看看。&lt;/p&gt;

&lt;p&gt;5.&lt;a href=&quot;http://www.iiiyu.com/2016/01/19/CoreData-VS-Realm/&quot;&gt;CoreData-VS-Realm&lt;/a&gt; ：现在谈及Realm想必大家都不会陌生，它的到来改变了持久化的格局，那它到底值不值得用呢？看看萧宸宇的使用感受吧。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;工具&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;https://github.com/omz/Dash-Plugin-for-Xcode&quot;&gt;Dash-Plugin-for-Xcode&lt;/a&gt; ：一款集成了 Dash 文档查看器应用的 Xcode 插件，允许开发者在使用 Option-Click 或作用相同的快捷键操作查看当前文本的相关文档时，用 Dash 代替 Xcode 的文档查看器。&lt;br /&gt;
&lt;img src=&quot;http://static.open-open.com/lib/uploadImg/20140516/20140516112310_863.jpg&quot; alt=&quot;Dash-Plugin-for-Xcode&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;http://www.apicloud.com/superwebview&quot;&gt;superwebview&lt;/a&gt; : 嵌入的Web体验差、功能弱？试试SuperWebView。任何一款APP，集成SuperWebViewSDK后都可以大幅缩短迭代周期。支持功能动态增加，无需提交AppStore审核，用户无需重新下载，比原生WebView更流畅更强大的用户体验。&lt;br /&gt;
&lt;img src=&quot;http://www.apicloud.com/img/new/superwebview-intro-5.png&quot; alt=&quot;superwebview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;https://itunes.apple.com/us/app/liya/id455484422?ls=1&amp;amp;mt=12&quot;&gt;Liya&lt;/a&gt; : 是不是厌倦了手动创建数据库，创建CoreData？他可以帮你可视化操作Sqlite以及CoreData！&lt;br /&gt;
&lt;img src=&quot;http://a5.mzstatic.com/us/r30/Purple4/v4/07/6c/40/076c4052-faf1-9f11-f7fd-d35b3b178ce3/screen800x500.jpeg&quot; alt=&quot;Liya&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;https://github.com/TencentOpen/GT&quot;&gt;GT&lt;/a&gt;:GT（随身调）是APP的随身调试平台，它是直接运行在手机上的“集成调试环境”(IDTE, Integrated Debug Environment)。利用GT，仅凭一部手机，无需连接电脑，即可对APP进行快速的性能测试(CPU、内存、流量、电量、帧率/流畅度等等)、开发日志的查看、Crash日志查看、网络数据包的抓取、APP内部参数的调试、真机代码耗时统计等。&lt;br /&gt;
&lt;img src=&quot;http://gt.qq.com/pics/index/GT650.jpg&quot; alt=&quot;GT&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;开源&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;https://github.com/audiokit/AudioKit&quot;&gt;AudioKit&lt;/a&gt; : 一个开源的强大的音频合成、处理和分析库。用于 iPhone/OS X 应用的开发，支持 Objective-C 和 Swift 语言。&lt;br /&gt;
&lt;img src=&quot;http://static.oschina.net/uploads/space/2014/1108/061436_7Kml_5189.jpg&quot; alt=&quot;AudioKit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;https://github.com/CatchChat/Yep&quot;&gt;Yep&lt;/a&gt; : Yep 是一款非常小巧而轻量化的社交 App，围绕「遇见天才」这个主题，让用户去找到领域中的精英或者是正在一起学习的人。作者不但开源了代码，而且讲述了工程的结构，相当难得。&lt;br /&gt;
&lt;img src=&quot;https://camo.githubusercontent.com/f678b86f8b87dd25ed59ada8c1c3dc1b696a987f/687474703a2f2f626c6f672e7a686f776b65762e696e2f636f6e74656e742f696d616765732f323031362f30322f696d6167652e706e67&quot; alt=&quot;Yep&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;https://github.com/nickoneill/PermissionScope&quot;&gt;PermissionScope&lt;/a&gt; : PermissionScope 是 Swift 框架，是智能 iOS 用户权限 UI 和统一 API，可以智能的处理用户权限请求。&lt;br /&gt;
&lt;img src=&quot;https://camo.githubusercontent.com/b3aadf6f7486413749922757a42d863132f836d6/687474703a2f2f726171756f2e6e65742f696d616765732f7065726d697373696f6e73636f70652e676966&quot; alt=&quot;PermissionScope&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;https://github.com/pili-engineering/PLCameraStreamingKit&quot;&gt;PLCameraStreamingKit&lt;/a&gt; : 一个适用于 iOS 的 RTMP 直播推流 SDK，可高度定制化和二次开发。特色是支持 iOS Camera 画面捕获并进行 H.264 硬编码，以及支持 iOS 麦克风音频采样并进行 AAC 硬编码；同时，还根据移动网络环境的多变性，实现了一套可供开发者灵活选择的编码参数集合。借助 PLCameraStreamingKit，开发者可以快速构建一款类似 Meerkat 或 Periscope 的手机直播应用。&lt;br /&gt;
&lt;img src=&quot;https://github.com/pili-engineering/PLCameraStreamingKit/raw/master/header-doc.png?raw=true&quot; alt=&quot;PLCameraStreamingKit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;a href=&quot;https://github.com/marmelroy/Localize-Swift&quot;&gt;Localize-Swift&lt;/a&gt; : Localize-Swift 是一个简单的用于 Swift 应用的国际化和本地化框架，提供了清晰的语法和应用内的多语言切换。。&lt;br /&gt;
&lt;img src=&quot;https://camo.githubusercontent.com/68670b270ff0f916c5cb2dfe0d158a5cb4245681/687474703a2f2f692e696d6775722e636f6d2f767372707142742e676966&quot; alt=&quot;Localize-Swift&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Jan 2016 17:38:27 +0800</pubDate>
        <link>http://catchzeng.com/2016/01/30/iOS%E5%BC%80%E5%8F%91%E8%A7%81%E9%97%BB-%E7%AC%AC13%E6%9C%9F/</link>
        <guid isPermaLink="true">http://catchzeng.com/2016/01/30/iOS%E5%BC%80%E5%8F%91%E8%A7%81%E9%97%BB-%E7%AC%AC13%E6%9C%9F/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS用被误解的MVC重构代码</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;这段时间在重构代码，看了几种模式，最后选择使用被误解的MVC来重构。&lt;br /&gt;
下面分别简要介绍MVVM(RAC)、MVP、MVC模式，同时分享一下在重构代码过程中的一些想法。&lt;/p&gt;

&lt;h2 id=&quot;mvvm&quot;&gt;MVVM&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;优点：&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;双向绑定（data-binding）：View的变动，自动反映在ViewModel，反之亦然。使用过Angular 和 Ember 的朋友应该对这点很熟悉。&lt;/li&gt;
  &lt;li&gt;使得 Model 层和 View 层解耦&lt;/li&gt;
  &lt;li&gt;结合RAC使用变得神乎其技。特别是面对&lt;strong&gt;&lt;em&gt;View与View之间变化关系紧密&lt;/em&gt;&lt;/strong&gt;时RAC能处理得很elegant。&lt;/li&gt;
  &lt;li&gt;解决了&lt;strong&gt;&lt;em&gt;状态量&lt;/em&gt;&lt;/strong&gt;的问题（即无状态）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/post-mvc/MVVM.jpg&quot; alt=&quot;MVVM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.缺点:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ViewModel承担了大部分MVC中C的事务。【本质上没有解决MVC的&lt;strong&gt;&lt;em&gt;massive viewcontroller&lt;/em&gt;&lt;/strong&gt;问题】&lt;/li&gt;
  &lt;li&gt;数据绑定使得 Bug 调试变难。【由于双向绑定使得&lt;strong&gt;&lt;em&gt;View和Model的bug&lt;/em&gt;&lt;/strong&gt;较难定位】&lt;/li&gt;
  &lt;li&gt;数据绑定需要花费更多的内存。【这是个缺点，但项目实践中我没怎么发觉到】&lt;/li&gt;
  &lt;li&gt;RAC学习成本较高。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3.总结：&lt;br /&gt;
    MVVM是我最先考虑的模式，原因是被RAC吸引了。&lt;br /&gt;
    MVVM不失为一个良好的模式，但其&lt;strong&gt;&lt;em&gt;缺点由其优点而来&lt;/em&gt;&lt;/strong&gt;，使用过程中较难避免。&lt;br /&gt;
    关于项目是否使用MVVM，我的观点是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;如果团队人员都能较好领会函数响应式编程思想、bug定位能力较强的话，可以使用。
如果项目的逻辑较为复杂导致状态量较多时可以考虑使用。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我在业余作品中还是喜欢使用RAC的，在工作上没有使用RAC原因是没有很好的队友，为了项目的可维护性而放弃了RAC。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;mvp&quot;&gt;MVP&lt;/h2&gt;
&lt;p&gt;MVP 是从MVC演变而来，它们有相通的地方：Controller/Presenter负责逻辑的处理，Model提供数据，View负责显示。MVP与MVC有一个重大的区别：在MVP中View并不直接使用Model，它们之间的通信是通过Presenter (MVC中的Controller)来进行的，所有的交互都发生在Presenter内部，而在&lt;strong&gt;&lt;em&gt;MVC中View会直接从Model中读取数据&lt;/em&gt;&lt;/strong&gt;而不是通过 Controller。&lt;br /&gt;
看到最后一句的时候相信大家都会有疑问，也许会指着下面这张斯坦福教授的图说MVC的View和Model是没有直接通讯的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/post-mvc/斯坦福MVC.jpg&quot; alt=&quot;斯坦福MVC&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但传统的MVC并不是这样的，百科&lt;a href=&quot;http://baike.baidu.com/link?url=JpP8cWxxrM-WGebq0kmhI88O3fHLlJOqW0ZEBqYjBYkPM38hxlHi1XTXCDM6l2oMDgjdMUpNX-2Jk0d_ldV6Pny6-zX2gc7iQL3KeC6TAYsUpJOcoW5pia9gUQ1fA_WV&quot;&gt;MVC框架&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/post-mvc/MVC图1.jpg&quot; alt=&quot;MVC图1&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/img/in-post/post-mvc/MVC图2.jpg&quot; alt=&quot;MVC图2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么哪个才是真正的MVC？这也是今天主要想跟大家交流的，为了继续这个话题我们先进一步了解MVP模式。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/post-mvc/MVP.jpg&quot; alt=&quot;MVP&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在MVP中View持有一个Presenter对象，View将界面的响应处理移交给Presenter，而Presenter调用Model进行处理，最后Presenter将Model处理完毕的数据通过Interface的形式递交给View做相应的改变。&lt;/p&gt;

&lt;p&gt;MV（X）本是同根生，自然有一些相同点。MVC在每一个平台上都有自己的特点，自然也会稍许不同。所以，你也许会感觉&lt;strong&gt;MVP才跟斯坦福教授讲的MVC比较像&lt;/strong&gt;！&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;重构&lt;/h2&gt;
&lt;p&gt;在重构前先看几个问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;iOS中的ViewController到底是MVC中的View还是Controller？还是有独到的看法？&lt;/strong&gt;&lt;br /&gt;
 我在圈子里面做了一个访谈。总数53人，有21人答案是View，30人答案是Controller，2人有独到的看法。当时我很惊讶！尽然对ViewController有这么多不同的看法。在此分享对此的一些看法，如有疏漏，望大家指正。&lt;br /&gt;
做过Android的朋友会发现ViewController与Android的Activity及其相似。我认为ViewController总体上属于MVC中的View层，但与传统的View不一样的是ViewController附带了一些Controller的逻辑，但该逻辑&lt;strong&gt;仅为”视图逻辑”&lt;/strong&gt;(相对于”业务逻辑”而言)。我想这也是apple管它叫”视图控制器”的原因。需要明白的一点是，apple造了一个ViewController，但它和MVC模式都没有限制我们只能把它当做Controller，完全可以自定义一个Controller。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;是什么导致了massive viewcontroller？&lt;/strong&gt;&lt;br /&gt;
 我的理解是因为没有将MVC的各层职能分清，而把视图、业务逻辑都往ViewController上堆，自然就成了massive viewcontroller。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;如果使用MVVM，那么tableview的datasource&amp;amp;delegate应该放在哪里比较合适？如何解决这个问题？&lt;/strong&gt;&lt;br /&gt;
我没有答案，因为觉得放在MVVM中的哪一层都觉得不合适。望大神告知！&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;为了解决开发中的问题，我对MVC各层重新做了职能分配。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/post-mvc/MVCRefactoring.jpg&quot; alt=&quot;MVCRefactoring&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注：单独箭头表示直接引用，箭头带圆圈表示以接口引用。&lt;/p&gt;

&lt;p&gt;重构后的分层模式与职能分配：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;View层：由View与ViewController组成。View为单独的视图，ViewController负责多个视图的管理、tableview的datasource &amp;amp; delegate等视图逻辑(这也就解决了问题3)。ViewController会持有一个Controller来传递视图需要响应的业务逻辑。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Controller层：负责业务逻辑的处理。Controller持有View和Service的接口引用（Service可根据项目特点选择直接/接口引用）。Controller通过调用Service来处理View层传递下来的业务，并用接口引用递交结果给View层做相应的改变。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Model层:由Service与Entity组成。Service为Controller层提供网络与本地数据服务，即Service处理网络请求、数据库、文件等操作。Entity为实体类，负责定义数据的模型。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;show-me-the-code&quot;&gt;Show me the code&lt;/h2&gt;
&lt;p&gt;先说明一下code的场景:&lt;br /&gt;
code为一个登录模块，账号类型分老师和学生，并且老师和学生的登录界面不同，但接口调用一致。code地址：&lt;a href=&quot;https://github.com/CatchZeng/MVCRefactoring&quot;&gt;MVCRefactoring&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Model层代码&lt;br /&gt;
Entity&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface CATUserEntity : NSObject

@property (nonatomic,copy) NSString* username;
@property (nonatomic,copy) NSString* gender;
@property (nonatomic)  NSInteger age;

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Service&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface CATLoginService : CATBaseService

-(void)loginWithUsername:(NSString *)username password:(NSString *)password type:(NSInteger)type success:(CATSuccessBlock)success failed:(CATFailedBlock)failed;

@end 


@implementation CATLoginService

-(void)loginWithUsername:(NSString *)username password:(NSString *)password type:(NSInteger)type success:(CATSuccessBlock)success failed:(CATFailedBlock)failed{
    //在这里调用网络、操作数据库等
    //返回数据并解析成相应的数据，这里模拟返回一个User的实体。
    //网络层这里推荐 巧哥使用命令模式封装的YTKNetworking！！！ 
    CATUserEntity* user = [[CATUserEntity alloc]init];
    user.gender = @&quot;男&quot;;
    user.age = 20;
    if (type == 1) {
        user.username = @&quot;老师&quot;;
    }else{
        user.username = @&quot;学生&quot;;
    }
    success(@&quot;登录成功!&quot;,user);
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Controller层代码（由于项目特点，这里的Model没有以接口形式引用）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@protocol CATLoginControllerDelegate &amp;lt;NSObject&amp;gt;

-(void)loginSuccessWithData:(id)data;
-(void)loginFailedWithMsg:(NSString *)msg;

@end

@interface CATLoginController : NSObject

-(id)initWith:(id&amp;lt;CATLoginControllerDelegate&amp;gt;)delegate;

-(void)loginWithUsername:(NSString *)username password:(NSString *)password type:(NSInteger)type;

@end



@interface CATLoginController()

@property (nonatomic,weak) id&amp;lt;CATLoginControllerDelegate&amp;gt; delegate;
@property (nonatomic,strong) CATLoginService* service;

@end

@implementation CATLoginController

-(id)initWith:(id&amp;lt;CATLoginControllerDelegate&amp;gt;)delegate{
    self = [super init];
    if (self) {
        _delegate = delegate;
    }
    return self;
}

-(void)loginWithUsername:(NSString *)username password:(NSString *)passwor type:(NSInteger)type{
    WEAKSELF
    [self.service loginWithUsername:username password:passwor type:type success:^(NSString *msg, id data) {
        STRONGSELF
        if (data &amp;amp;&amp;amp; strongSelf.delegate &amp;amp;&amp;amp; [strongSelf.delegate respondsToSelector:@selector(loginSuccessWithData:)]){//登录成功 &amp;amp;&amp;amp; delegate实现了相应的方法
            [strongSelf.delegate  loginSuccessWithData:data];
        }else if(strongSelf.delegate &amp;amp;&amp;amp; [strongSelf.delegate respondsToSelector:@selector(loginFailedWithMsg:)]){//登录失败 &amp;amp;&amp;amp; delegate实现了相应的方法
            [strongSelf.delegate loginFailedWithMsg:msg];
        }else{
            //handle...
        }
    } failed:^(NSString *msg) {
        //handle error
    }];
}

- (CATLoginService *) service {
    if(!_service) {
        _service = [[CATLoginService alloc] init];
    }
    return _service;
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;View层代码&lt;/p&gt;

&lt;p&gt;老师登录界面&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface CATTeacherLoginViewController ()&amp;lt;CATLoginControllerDelegate&amp;gt;

@property (nonatomic,strong) CATLoginController* controller;
@property (weak, nonatomic) IBOutlet UILabel *labMsg;

@end

@implementation CATTeacherLoginViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    self.navigationItem.title = @&quot;老师登录界面&quot;;
}

- (IBAction)loginButtonClicked:(id)sender {
    [self.controller loginWithUsername:@&quot;111&quot; password:@&quot;111&quot; type:1];
}

- (CATLoginController *) controller {
    if(_controller == nil) {
        _controller = [[CATLoginController alloc] initWith:self];
    }
    return _controller;
}

-(void)loginSuccessWithData:(id)data{
    //处理登录成功后的界面呈现
    if (data &amp;amp;&amp;amp; [data isKindOfClass:[CATUserEntity class]]) {
        CATUserEntity* user = (CATUserEntity *)data;
        _labMsg.text = [NSString stringWithFormat:@&quot;登录成功！你好:%@&quot;,user.username];
    }
}

-(void)loginFailedWithMsg:(NSString *)msg{
    //处理登录失败后的界面呈现
    NSLog(@&quot;登录失败:%@&quot;,msg);
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;学生登录界面&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface CATStudentLoginViewController ()&amp;lt;CATLoginControllerDelegate&amp;gt;

@property (nonatomic,strong) CATLoginController* controller;
@property (weak, nonatomic) IBOutlet UILabel *labMsg;

@end

@implementation CATStudentLoginViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    self.navigationItem.title = @&quot;学生登录界面&quot;;
}

- (IBAction)loginButtonClicked:(id)sender {
    [self.controller loginWithUsername:@&quot;111&quot; password:@&quot;111&quot; type:2];
}

- (CATLoginController *) controller {
    if(_controller == nil) {
        _controller = [[CATLoginController alloc] initWith:self];
    }
    return _controller;
}

-(void)loginSuccessWithData:(id)data{
    //处理登录成功后的界面呈现
    if (data &amp;amp;&amp;amp; [data isKindOfClass:[CATUserEntity class]]) {
        CATUserEntity* user = (CATUserEntity *)data;
        _labMsg.text = [NSString stringWithFormat:@&quot;登录成功！你好:%@&quot;,user.username];
    }
}

-(void)loginFailedWithMsg:(NSString *)msg{
    //处理登录失败后的界面呈现
    NSLog(@&quot;登录失败:%@&quot;,msg);
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-2&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;重构后的优点:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;各层职能变得更加清晰。&lt;/li&gt;
  &lt;li&gt;View与Controller彻底解耦。（LoginController以接口形式调用视图层，界面更改对其不产生影响，自身的修改也对视图层不产生影响。）&lt;/li&gt;
  &lt;li&gt;代码复用度高。（LoginController可复用于老师和学生的账号登录）&lt;/li&gt;
  &lt;li&gt;测试方便。（若要测试登录接口是否可行，可直接实例化 LoginService调用登录接口进行测试）&lt;/li&gt;
  &lt;li&gt;把视图逻辑交于ViewController，业务逻辑交于Controller，解决了massive viewcontroller和视图的datasource、delegate代码放置位置等问题。&lt;/li&gt;
  &lt;li&gt;任务分配方便。（接口约定完毕后视图层、控制层、模型层可以单独由不同人完成）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;缺点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;多了一些胶水代码。&lt;/li&gt;
  &lt;li&gt;需要多定义视图、模型的接口（CATLoginControllerDelegate）&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;section-3&quot;&gt;最后&lt;/h1&gt;

&lt;p&gt;本文的分层方式并不一定适合每个工程，大家可以根据自己工程的情况自行调整。简友【我在睡觉被占用】说得好，其实不用太拘泥与什么模式，去扣定义。只要遵循尽量解耦，关系逻辑清晰的原则就行了。在此表示感谢！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;然而，可能只有我误解了MVC。&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Jan 2016 17:38:27 +0800</pubDate>
        <link>http://catchzeng.com/2016/01/26/iOS%E7%94%A8%E8%A2%AB%E8%AF%AF%E8%A7%A3%E7%9A%84MVC%E9%87%8D%E6%9E%84%E4%BB%A3%E7%A0%81/</link>
        <guid isPermaLink="true">http://catchzeng.com/2016/01/26/iOS%E7%94%A8%E8%A2%AB%E8%AF%AF%E8%A7%A3%E7%9A%84MVC%E9%87%8D%E6%9E%84%E4%BB%A3%E7%A0%81/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS清理工程中未使用的类文件工具</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;随着团队人数增多，工程的复杂度提高，工程文件数变得相当多，清理工程变得越来越复杂。于是，闲暇时写了一个清理工程中未使用的类文件工具。由于工程为oc代码，所以工具只适用于oc创建的工程。工具测试时间短、用例少难免有不足的地方，有兴趣的朋友&lt;strong&gt;使用前记得备份工程&lt;/strong&gt;!&lt;br /&gt;
工具地址:&lt;a href=&quot;https://github.com/CatchZeng/CATClearProjectTool&quot;&gt;CATClearProjectTool&lt;/a&gt;, 欢迎star、fork、issue。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;效果&lt;/h2&gt;
&lt;p&gt;1.下图为测试工程结构：包含AppDelegate、ViewController、CATUsedClass、CATUsedClass2、CATUnUsedCLass以及test文件。其中test文件和CATUnUsedCLass未在工程中使用过。&lt;br /&gt;
&lt;img src=&quot;https://github.com/CatchZeng/CATClearProjectTool/raw/master/images/0.png&quot; alt=&quot;测试工程结构&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.将测试工程的.xcodeproj拖拽到工具中。&lt;br /&gt;
&lt;img src=&quot;https://github.com/CatchZeng/CATClearProjectTool/raw/master/images/1.png&quot; alt=&quot;拖拽工程到工具&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.点击search按钮，文本框将列出所有未被使用的类文件。&lt;br /&gt;
&lt;img src=&quot;https://github.com/CatchZeng/CATClearProjectTool/raw/master/images/2.png&quot; alt=&quot;搜索结果&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.点击click按钮，文本框将显示成功清理的类文件列表。&lt;br /&gt;
&lt;img src=&quot;https://github.com/CatchZeng/CATClearProjectTool/raw/master/images/3.png&quot; alt=&quot;清理后的结果&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.再次打开工程，能看到已成功清理未使用的类文件【注：工程中默认过滤掉AppDelegate,ViewController,main三个类文件的删除】&lt;br /&gt;
&lt;img src=&quot;https://github.com/CatchZeng/CATClearProjectTool/raw/master/images/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6.你也可以加入过滤，如下图过滤掉CATUnUsedCLass，则即使它在工程中未使用过也不会将它删除（多个过滤文件，使用逗号隔开）。&lt;br /&gt;
&lt;img src=&quot;https://github.com/CatchZeng/CATClearProjectTool/raw/master/images/5.png&quot; alt=&quot;加入过滤&quot; /&gt;&lt;/p&gt;

&lt;p&gt;7.加过滤后清理的结果&lt;br /&gt;
&lt;img src=&quot;https://github.com/CatchZeng/CATClearProjectTool/raw/master/images/6.png&quot; alt=&quot;加过滤后清理的结果&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://github.com/CatchZeng/CATClearProjectTool/raw/master/images/7.png&quot; alt=&quot;清理后的工程结构&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;工具的原理&lt;/h2&gt;
&lt;p&gt;读取project文件中的文件组织信息，找到工程中所有的类，然后遍历所有类文件的#import情况,找出未使用的类文件删除，并删除project文件中未使用文件的记录数据。&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Jan 2016 17:38:27 +0800</pubDate>
        <link>http://catchzeng.com/2016/01/23/iOS%E6%B8%85%E7%90%86%E5%B7%A5%E7%A8%8B%E4%B8%AD%E6%9C%AA%E4%BD%BF%E7%94%A8%E7%9A%84%E7%B1%BB%E6%96%87%E4%BB%B6%E5%B7%A5%E5%85%B7/</link>
        <guid isPermaLink="true">http://catchzeng.com/2016/01/23/iOS%E6%B8%85%E7%90%86%E5%B7%A5%E7%A8%8B%E4%B8%AD%E6%9C%AA%E4%BD%BF%E7%94%A8%E7%9A%84%E7%B1%BB%E6%96%87%E4%BB%B6%E5%B7%A5%E5%85%B7/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS开发见闻-第12期</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;文章&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;http://blog.cnbang.net/living/2970/&quot;&gt;bangbang的年终回顾&lt;/a&gt; :每天被繁杂的代码充斥着，来一篇生活篇吧！看看JSPatch作者bangbang的2015，或许你会有些许感慨。&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;http://blog.devtang.com/blog/2016/01/03/reactive-cocoa-discussion/&quot;&gt;ReactiveCocoa 讨论会&lt;/a&gt; ：期待已久的RAC讨论会终于出来了，看看巧哥和其他大神对RAC的看法吧。&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;http://blog.cnbluebox.com/blog/2015/09/18/howtolayoutview/&quot;&gt;如何做好IOS View的布局&lt;/a&gt; : 对开发app来说，布局是个永久的话题。这篇文章总结了view、subview、scrollView、childViewController、Autolayout、tableView等等较为细致的经验，非常值得学习！&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;http://merowing.info/2016/01/improve-your-ios-architecture-with-flowcontrollers/&quot;&gt;使用flowcontrollers来改善你的iOS架构 &lt;/a&gt; ：本文讲述了一种很好地思路来解决在不同设备上视图呈现风格不一的问题（例如：一个视图在iPhone和iPad呈现效果不一样的情况），如果觉得英文看起来费劲，后续有时间会翻译给大家。&lt;/p&gt;

&lt;p&gt;5.&lt;a href=&quot;http://www.jianshu.com/p/77660e626874#&quot;&gt;iOS崩溃调试 &lt;/a&gt; ：崩溃不可怕，可怕的是不知道怎么崩溃的。小壮总结了一些针对于崩溃的调试技巧，实用性很强。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;工具&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;https://shimo.im/&quot;&gt;石墨文档&lt;/a&gt; ：团队协作中难免需要文档的协作，石墨文档为你带来一次全新的文档协作体验，让所有人步调一致，从未如此简单。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-4e210d9a72f1ce87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;石墨文档&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;https://www.iconfinder.com/&quot;&gt;iconfinder&lt;/a&gt; : 在线icon查找网站，使用名称查找你所需的icon。当自己在做开发而又没有美工的时候iconfinder将为你解决icon问题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-d5313eaf185090fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;iconfinder&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;http://www.jb51.net/softs/265717.html&quot;&gt;coderunner&lt;/a&gt; :  一个轻量级的代码感知文本编辑器，知道怎么编译和运行多种语言的代码。想快速测试一段Objective-C代码，又不想创建一整个Xcode项目？试试Code Runner吧。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/943491-a77e0a2cd8ab73b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;coderunner&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;开源&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;https://github.com/zhengjinghua/MQRCodeReaderViewController&quot;&gt;MQRCodeReaderViewController&lt;/a&gt;：基于原生二维码扫描封装的一款扫描库，识别速度快，界面设计优美。&lt;br /&gt;
&lt;img src=&quot;https://camo.githubusercontent.com/1c5d9e98f640e775bcba6dfcd1b097a6b675986b/687474703a2f2f37786e6664632e636f6d312e7a302e676c622e636c6f7564646e2e636f6d2f7172636f64655f73637265656e73686f742e676966&quot; alt=&quot;MQRCodeReaderViewController&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;http://code.cocoachina.com/view/128968&quot;&gt;CALayer及其子类&lt;/a&gt; ：CALayer及其子类的用法,和核心动画的简单使用等. 包含:CALyer、CAGradientLayer、 CATiledLayer 、CAShapeLayer、 CATextLayer、 CAEmitterLayer CAReplicatorLayer 、CAScrollLayer 。&lt;br /&gt;
&lt;img src=&quot;http://code.cocoachina.com/uploads/attachments/20160105/128968/916fe1dbc63e14ef0ea919b7c9c563c2.gif&quot; alt=&quot;CALayer及其子类&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;https://github.com/zsy78191/XXXRoundMenuButton/&quot;&gt;XXXRoundMenuButton&lt;/a&gt; : 一款实用的菜单按钮。&lt;img src=&quot;https://raw.githubusercontent.com/zsy78191/XXXRoundMenuButton/master/XXXRoundMenu.gif&quot; alt=&quot;XXXRoundMenuButton&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;https://github.com/sammcewan/WYPopoverController&quot;&gt;WYPopoverController&lt;/a&gt; : 为了在iPhone上实现popover效果，找了好几个库，发现WYPopoverController在使用和兼容性方面都做得较好。&lt;br /&gt;
&lt;img src=&quot;https://camo.githubusercontent.com/43c604f9b8e72cd52dd8dd4f9f0bd268659655fa/68747470733a2f2f7261772e6769746875622e636f6d2f6e69636f6c61736368656e676465762f5759506f706f766572436f6e74726f6c6c65722f6d61737465722f73637265656e73686f74732f7779706f706f7665725f73637265656e73686f745f322e706e67&quot; alt=&quot;WYPopoverController&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;a href=&quot;https://github.com/xmartlabs/XLPagerTabStrip&quot;&gt;XLPagerTabStrip&lt;/a&gt; : 一个容器视图控制器，它可以让你很容易的在视图控制器集合间转换。它可以显示当前的、之前的、之后的视图控制器的交互导航。&lt;br /&gt;
&lt;img src=&quot;https://github.com/xmartlabs/XLPagerTabStrip/raw/master/XLPagerTabStrip/Demo/PagerSlidingTabStrip.gif&quot; alt=&quot;XLPagerTabStrip&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Jan 2016 17:38:27 +0800</pubDate>
        <link>http://catchzeng.com/2016/01/07/iOS%E5%BC%80%E5%8F%91%E8%A7%81%E9%97%BB-%E7%AC%AC12%E6%9C%9F/</link>
        <guid isPermaLink="true">http://catchzeng.com/2016/01/07/iOS%E5%BC%80%E5%8F%91%E8%A7%81%E9%97%BB-%E7%AC%AC12%E6%9C%9F/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
  </channel>
</rss>
