<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CatchZeng Blog</title>
    <description></description>
    <link>http://catchzeng.com/</link>
    <atom:link href="http://catchzeng.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 21 Jan 2016 23:43:50 +0800</pubDate>
    <lastBuildDate>Thu, 21 Jan 2016 23:43:50 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>IntelliJ IDEA Spring MVC环境搭建</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;
阅读 &lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;IntelliJ在业界被公认为最好的java开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE支持、Ant、JUnit、CVS整合、代码审查、 创新的GUI设计等方面的功能可以说是超常的。&lt;br /&gt;
	Spring MVC属于SpringFrameWork的后续产品，提供了构建 Web 应用程序的全功能 MVC 模块。使用 Spring 可插入的 MVC架构，易于同其它View框架（Tiles等）无缝集成，采用IOC便于测试。源于这些优点，越来越多开发者已将Spring MVC列为的首选。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;搭建过程&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;.选中Spring并勾选Spring MVC，点击Next&lt;br /&gt;
&lt;img src=&quot;http://leanote.com/api/file/getImage?fileId=5648258aab64416406000576&quot; alt=&quot;图片标题&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;勾选create project from template&lt;br /&gt;
&lt;img src=&quot;http://leanote.com/api/file/getImage?fileId=56482963ab6441640600060a&quot; alt=&quot;图片标题&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;输入项目名称、保存位置、tomact位置等信息&lt;br /&gt;
&lt;img src=&quot;http://leanote.com/api/file/getImage?fileId=56482a86ab6441640600060c&quot; alt=&quot;图片标题&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;点击run，启动&lt;br /&gt;
&lt;img src=&quot;http://leanote.com/api/file/getImage?fileId=56482b5eab64416406000611&quot; alt=&quot;图片标题&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;浏览器输入Hello World表示环境搭建成功&lt;br /&gt;
&lt;img src=&quot;http://leanote.com/api/file/getImage?fileId=56482c25ab644165680005be&quot; alt=&quot;图片标题&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;spring-mvc&quot;&gt;Spring MVC请求处理流程&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Spring MVC的设计是围绕DispatcherServlet展开的，DispatcherServlet负责将请求派发到特定的handler。通过可配置的handler mappings、view resolution、locale以及theme resolution来处理请求并且转到对应的视图。Spring MVC请求处理的整体流程如图：&lt;br /&gt;
&lt;img src=&quot;http://leanote.com/api/file/getImage?fileId=56482d79ab64416406000618&quot; alt=&quot;图片标题&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在web.xml中我们可以看到配置了一个DispatcherServlet，该Servlet拦截了 / 的所有请求&lt;br /&gt;
&lt;img src=&quot;http://leanote.com/api/file/getImage?fileId=56482e09ab644165680005c4&quot; alt=&quot;图片标题&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在mvc-dispatcher-servlet.xml中 component-scan 扫描指定的文件夹下的文件（这里指定了根目录）&lt;br /&gt;
&lt;img src=&quot;http://leanote.com/api/file/getImage?fileId=56482fd4ab644165680005d5&quot; alt=&quot;图片标题&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当请求发起时，Spring MVC扫描文件发现HelloController 中的 @Controller和@RequestMapping(“/”)注解便由DispatcherServlet转向HelloController来处理 / 请求&lt;br /&gt;
&lt;img src=&quot;http://leanote.com/api/file/getImage?fileId=564830c4ab644165680005d9&quot; alt=&quot;图片标题&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当HelloController返回hello变由mvc-dispatcher-servlet.xml的配置默认加上前后缀成为/WEB-INF/pages/hello.jsp，最后将Hello World输出&lt;br /&gt;
&lt;img src=&quot;http://leanote.com/api/file/getImage?fileId=56483169ab64416406000626&quot; alt=&quot;图片标题&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 15 Nov 2015 23:24:14 +0800</pubDate>
        <link>http://catchzeng.com/2015/11/15/IntelliJ-IDEA-Spring-MVC%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
        <guid isPermaLink="true">http://catchzeng.com/2015/11/15/IntelliJ-IDEA-Spring-MVC%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
        
        <category>Java Web</category>
        
        
      </item>
    
      <item>
        <title>为AppDelegate瘦身</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;
阅读 &lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;项目开发了一段时间后，相信大家都会遇到AppDelegate中的didFinishLaunch函数不断增大带来的不便管理问题。在Java中我们常使用JVM的ClassLoader对类进行加载、连接、初始化等操作，在oc中对应的就是load和initialize。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;瘦身&lt;/h2&gt;
&lt;p&gt;load和initialize在使用中需要注意的点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;系统最多会调用一次（除非开发者主动调用）&lt;/li&gt;
  &lt;li&gt;都能为程序初始化一些数据，创造适合的运行环境&lt;/li&gt;
  &lt;li&gt;父类调用一定在子类之前&lt;/li&gt;
  &lt;li&gt;由下图文档可知，&lt;strong&gt;load是只要类或者category被加入runtime便会被调用&lt;/strong&gt;，而initialize是在类或者其子类的第一个方法被调用前调用。&lt;br /&gt;
&lt;img src=&quot;http://img.blog.csdn.net/20151024085728124&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们可以利用&lt;strong&gt;load是只要类或者category被加入runtime便会被调用&lt;/strong&gt;这个特性，来为AppDelegate瘦身：&lt;br /&gt;
&lt;img src=&quot;http://img.blog.csdn.net/20151024092327331&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-2&quot;&gt;题外&lt;/h2&gt;
&lt;p&gt;1.搜索一下自己的项目，可以发现某些第三方库也是利用load方法来实现&lt;strong&gt;自动运行&lt;/strong&gt;(如：IQKeyboardManager)。&lt;br /&gt;
&lt;img src=&quot;http://img.blog.csdn.net/20151024093003486&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151024093137407&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.由于&lt;strong&gt;系统最多会调用一次（除非开发者主动调用）&lt;/strong&gt;，为了防止主动调用，可以在load方法中加上dispatch_once&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151024093529899&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Oct 2015 06:24:19 +0800</pubDate>
        <link>http://catchzeng.com/2015/10/26/%E4%B8%BAAppDelegate%E7%98%A6%E8%BA%AB/</link>
        <guid isPermaLink="true">http://catchzeng.com/2015/10/26/%E4%B8%BAAppDelegate%E7%98%A6%E8%BA%AB/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>屏幕适配之Size Classes</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;
阅读 &lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;在适配ios8的时候，其实autolayout基本都可以满足，所以当时没有使用上Size Classes。这几天为了适配ios9用上了Size Classes。令我最开心的是，很方便地解决了&lt;strong&gt;不同状态下不同布局&lt;/strong&gt;的问题（如：横屏和竖屏布局不同、iPad和iPhone布局不同）,下图是我用Size Classes做的一个demo。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150924135208588&quot; alt=&quot;效果图&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;size-classes&quot;&gt;Size Classes的概念&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;布局的进化史&lt;/strong&gt;&lt;br /&gt;
代码frame -&amp;gt; autoreszing(父子控件的关系ios6) -&amp;gt; autolayout(任何控件都可以产生关系ios7) -&amp;gt; Size Classes（抽象ios8）。&lt;/p&gt;

&lt;p&gt;其实sizeclass是对设备的一种抽象。它不再有尺寸、横屏和竖屏的概念，只有（Compact、Any，Regular）的概念，即把设备分为&lt;strong&gt;紧凑型、任意型、宽松型&lt;/strong&gt;（如下图）&lt;br /&gt;
&lt;img src=&quot;http://img.blog.csdn.net/20150924204829183&quot; alt=&quot;storyboard的展示形态&quot; /&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150924204935390&quot; alt=&quot;抽象形态&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为了方便理解Size Classes，可以把它想象成一个&lt;strong&gt;屏幕选择器&lt;/strong&gt;，可以对不同屏幕进行选择。我们需要注意的是&lt;strong&gt;Size Classes仅仅是对屏幕进行了分类, 真正布局还是交给autolayout&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;问题：&lt;strong&gt;如何知道适配的设备使用那种型&lt;/strong&gt;？&lt;br /&gt;
解决：在storyboard中移动鼠标选中某一个型，可以看到关于该型适应的信息（如下图）&lt;br /&gt;
&lt;img src=&quot;http://img.blog.csdn.net/20150924210540664&quot; alt=&quot;这里写图片描述&quot; /&gt;  该型表示 竖屏的iPhone&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150924210714273&quot; alt=&quot;这里写图片描述&quot; /&gt; 该型表示 横屏的iPhone&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150924210835075&quot; alt=&quot;这里写图片描述&quot; /&gt; 该型表示 竖屏的iPhone 和 ipad横竖屏&lt;/p&gt;

&lt;h2 id=&quot;size-classes-1&quot;&gt;Size Classes的实践&lt;/h2&gt;

&lt;p&gt;下面我们就照着gif图上的例子来讲一下如何在项目中使用Size Classes来解决问题。&lt;br /&gt;
1.首先建立一个singleview的工程，打开Main.storyboard，在wAny hAny的型下拖拽两个view和两个label&lt;br /&gt;
&lt;img src=&quot;http://img.blog.csdn.net/20150924212158909&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.接下来先设置&lt;strong&gt;所有状态下都需要的约束&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;【我们希望蓝色的view在任何情况下都是正方形，设置其Aspect Ratio为1：1】&lt;br /&gt;
&lt;img src=&quot;http://img.blog.csdn.net/20150924212511678&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;【我们希望红色的view在任何情况下大小都是44x44并且与lab名称顶部位置一直，设置其width 44 height 44  Align Top to 名称】&lt;br /&gt;
&lt;img src=&quot;http://img.blog.csdn.net/20150924212701257&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.其他设置如下&lt;br /&gt;
&lt;img src=&quot;http://img.blog.csdn.net/20150924213136063&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150924213228323&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个时候我们会看到红色的警告，表示我们没有把自动布局的约束设置完全，那下一步我们该做的是在你需要的型下把剩余的约束补充完成。&lt;/p&gt;

&lt;p&gt;4.选择型到 wCompact hRegular（选中后wCompact hRegular的背景会变蓝色,表示你已经进入到该型的模式下）&lt;br /&gt;
&lt;img src=&quot;http://img.blog.csdn.net/20150924213511441&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.为该型补充剩余的约束&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150924213948955&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150924214016180&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150924214036219&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150924214056416&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时我们看到红色的警告已经没有，表示我们已经把该型的约束补充完毕&lt;br /&gt;
&lt;img src=&quot;http://img.blog.csdn.net/20150924214157176&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6.接下来，我们切换到wAny hCompact型下添加约束&lt;br /&gt;
&lt;img src=&quot;http://img.blog.csdn.net/20150924214333696&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;7.添加的约束&lt;br /&gt;
&lt;img src=&quot;http://img.blog.csdn.net/20150924214538686&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150924214603332&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150924214620984&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150924214636822&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;直到红点消失！！&lt;br /&gt;
&lt;img src=&quot;http://img.blog.csdn.net/20150924214157176&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;好了，兴奋的一刻来了运行一下，旋转一下是不是跟gif上的一样呢！&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;小结一下&lt;/h2&gt;

&lt;p&gt;1.先在 wAny hAny的型下设置所有状态下都需要的约束（有点像面向对象的基类）,能减少约束的重复设置&lt;br /&gt;
2.选择需要适配的型，进行约束的添加（有点像子类）&lt;br /&gt;
4.Size Classes实际上是&lt;strong&gt;继承的思想在布局中的运用&lt;/strong&gt;，让我们能在一个storyboard中设置不同状态下的形态，免去了以前横屏一个xib，竖屏一个xib的麻烦。&lt;br /&gt;
5.Size Classes也为ios9的分屏适配带来便捷【该点会在下一期提及】&lt;/p&gt;

&lt;p&gt;今天就到这里了，下期见！&lt;/p&gt;

&lt;p&gt;demo源码：https://github.com/catchZeng/SizeClassDemo&lt;/p&gt;

</description>
        <pubDate>Mon, 26 Oct 2015 06:16:06 +0800</pubDate>
        <link>http://catchzeng.com/2015/10/26/%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D%E4%B9%8BSize-Classes/</link>
        <guid isPermaLink="true">http://catchzeng.com/2015/10/26/%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D%E4%B9%8BSize-Classes/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS开发见闻-第1期</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;
阅读 &lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;文章&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;http://casatwy.com/iosying-yong-jia-gou-tan-kai-pian.html&quot;&gt;iOS应用架构 &lt;/a&gt;：此文章由安居客iOS app的第二版架构设计者编写，里面详尽地解释了view层的组织和调用方案、网络层设计方案、本地持久化方案及动态部署。文中作者不但给出了自己的设计方案，更值得我们学习的是作者在多人协作的情况下对架构的设计与考虑。&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;http://daizi.me/2015/09/23/%E3%80%90OC%E3%80%91delegate%20or%20block/&quot;&gt;【OC】开发中选择delegate 还是 block &lt;/a&gt;：找了很多关于delegation和block的使用场景，发现没有很满意的解释，后来无意中在stablekernel找到了这篇文章，文中作者不仅仅是给出了解决方案，更值得我们深思的是作者独特的思考和解决问题的方式【&lt;a href=&quot;http://blog.stablekernel.com/blocks-or-delegates/&quot;&gt;国外原文地址&lt;/a&gt;】&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;http://blog.csdn.net/yiyaaixuexi/article/details/9374411&quot;&gt;Objective-C的hook方案&lt;/a&gt;：念茜的博客，一直有关注她的文章。该篇文章讲述了Method Swizzling的用法，简单易懂。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;工具&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;https://bugtags.com/&quot;&gt;Bugtags&lt;/a&gt; : 国内首款为改善移动产品质量而专门打造的测试平台产品。使用Bugtags平台可以随时随地对移动产品提出准确的改善意见，使得测试更简单，修复问题更轻松，产品用户满意度更高。&lt;br /&gt;
&lt;img src=&quot;https://s1-bugtags-com.alikunlun.com/home/cc.png&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;https://github.com/CocoaLumberjack/CocoaLumberjack&quot;&gt;CocoaLumberjack&lt;/a&gt;：一款针对Mac和iOS平台的日志框架，快速、简单、功能强大，并具有极好的灵活性。开发者可用它为Debug和版本发布指定不同级别的日志，可通过CocoaPods进行安装，详细使用请看&lt;a href=&quot;http://blog.csdn.net/catch01/article/details/48807359&quot;&gt;iOS调试技巧之Log &lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;http://www.charlesproxy.com/&quot;&gt;Charles&lt;/a&gt;：一个HTTP代理服务器,HTTP监视器,反转代理服务器·它允许一个开发者查看所有连接互联网的HTTP通信·这些包括request, response现HTTP headers （包含cookies与caching信息）。对于测试和服务器端进行交互的应用非常有用。&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;http://mtj.baidu.com/web/welcome/login&quot;&gt;百度移动统计&lt;/a&gt; : 百度的移动端统计工具，能帮助我们统计错误日志、自定义事件、用户信息、用户行为习惯、版本管理、趋势等等。&lt;br /&gt;
&lt;img src=&quot;http://img.blog.csdn.net/20151017122004386&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;开源&lt;/h2&gt;
&lt;p&gt;1.&lt;a href=&quot;https://github.com/forkingdog/UITableView-FDTemplateLayoutCell&quot;&gt;UITableView-FDTemplateLayoutCell&lt;/a&gt; : forkingdog封装的一个Cell，帮我们自动计算Cell的高度，为适配各种iOS设备但来极大的方便。&lt;br /&gt;
&lt;img src=&quot;https://github.com/forkingdog/UITableView-FDTemplateLayoutCell/raw/master/Sceenshots/screenshot2.gif&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;https://github.com/TransitApp/SVProgressHUD&quot;&gt;SVProgressHUD&lt;/a&gt; ： 一款清爽又功能完善的HUD，拥有显示成功、失败、自定义消息、设置遮盖等功能。&lt;br /&gt;
&lt;img src=&quot;https://camo.githubusercontent.com/6ed028acbf67707d622344e0ef1bc3b098425b50/687474703a2f2f662e636c2e6c792f6974656d732f32473146315a304d306b306832553356317033392f535650726f67726573734855442e676966&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;https://github.com/lookingstars/tudou&quot;&gt;tudou&lt;/a&gt; : lookingstars的高仿土豆iPhone版。&lt;br /&gt;
&lt;img src=&quot;http://img.blog.csdn.net/20151017122556995&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Mon, 26 Oct 2015 06:08:40 +0800</pubDate>
        <link>http://catchzeng.com/2015/10/26/iOS%E5%BC%80%E5%8F%91%E8%A7%81%E9%97%BB-%E7%AC%AC1%E6%9C%9F/</link>
        <guid isPermaLink="true">http://catchzeng.com/2015/10/26/iOS%E5%BC%80%E5%8F%91%E8%A7%81%E9%97%BB-%E7%AC%AC1%E6%9C%9F/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>AppStore上架问题ERROR ITMS-90049</title>
        <description>&lt;p&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;
阅读 &lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;昨天上架的时候报错&lt;br /&gt;
&lt;code&gt;
ERROR ITMS-90049: &quot;This bundle is invalid. The bundle identifier contains disallowed characters. [See the section of the Application Programming Guide entitled The APplication Bundle.]&quot;
&lt;/code&gt;&lt;br /&gt;
最后在&lt;a href=&quot;http://tieba.baidu.com/p/4116151851&quot;&gt;贴吧&lt;/a&gt;里找到了方法，在这里记录一下。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;解决方法&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151024163556206&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;刚开始使用方法（二），结果可能因为我的工程问题而失败【使用此方法建议参考： &lt;a href=&quot;http://blog.csdn.net/h1101723183/article/details/49339681&quot;&gt;Xcode上传App到Appstore，报错Error ITMS-90049&lt;/a&gt; Q群的朋友 命 甴己造，已验证此方法可用，在此表示感谢！】&lt;/p&gt;

&lt;p&gt;后面使用方法（一）：&lt;strong&gt;删除了第三方的plist文件&lt;/strong&gt;，上传成功！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关于方法（一）、（二）我建议大家先尝试（二），实在不行再用（一）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;查找第三方plist文件的方法：&lt;/strong&gt;&lt;br /&gt;
在项目下面的Fliter中输入.plist，就可以找到工程中的所有plist文件，选择对应的删除就可以了。&lt;br /&gt;
&lt;img src=&quot;http://img.blog.csdn.net/20151024163752361&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Oct 2015 05:43:50 +0800</pubDate>
        <link>http://catchzeng.com/2015/10/26/AppStore%E4%B8%8A%E6%9E%B6%E9%97%AE%E9%A2%98ERROR-ITMS-90049/</link>
        <guid isPermaLink="true">http://catchzeng.com/2015/10/26/AppStore%E4%B8%8A%E6%9E%B6%E9%97%AE%E9%A2%98ERROR-ITMS-90049/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
  </channel>
</rss>
